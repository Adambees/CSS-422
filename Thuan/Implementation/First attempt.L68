00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/10/2018 2:51:50 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : First simple implementation of printing out NOP
00000000                             3  * Written by : Thuan Tran
00000000                             4  * Date       : Feb 25th,2018
00000000                             5  * Description: Load the test program in prototype, testNop. Enter starting and ending address. Expected to print out NOP
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  *** A2 will be used as the address in which it will iterate through all the way until ending adrress
00000000                             9  
00000000  =00000100                 10  STARTING_ADDRESS            EQU    $100 * User input starting address
00000000  =00000150                 11  ENDING_ADDRESS              EQU    $150 * User input ending address
00000000  =00000200                 12  TEMP_CURRENT_4_NIBBLES      EQU    $200 * Temporary variables to start decode
00000000  =00000250                 13  DESTINATION_VAR             EQU    $250 * Used to hold the Address number
00000000  =00000300                 14  DESTINATION_MODE            EQU    $300 * Used to hold the mode of destination
00000000  =00000350                 15  SOURCE_MODE                 EQU    $350 * used to hold the mode of the source
00000000  =00000400                 16  SOURCE_VAR                  EQU    $400 * Used to hold the address number of source
00000000  =00000450                 17  SIZE                        EQU    $450 * Used to hold the size: 00,01 or 10 stuff
00000000  =00000500                 18  SECOND_TEMP_VAR             EQU    $500 * Can either be used to hold source var or destination var for print out
00000000  =00000550                 19  THIRD_TEMP_VAR              EQU    $550
00000000  =00000600                 20  FOURTH_TEMP_VAR             EQU    $600
00000000  =00000650                 21  FIFTH_TEMP_VAR              EQU    $650
00000000  =00000700                 22  REGISTER_NUMBER_TO_PRINT    EQU    $700
00000000  =00000750                 23  TEMP_CURRENT_2_NIBBLES      EQU    $750
00000000                            24  
00001000                            25      ORG    $1000
00001000                            26  START:                  ; first instruction of program
00001000                            27  
00001000                            28  
00001000                            29  *************************
00001000                            30  * Input and parsing op code section
00001000                            31  *************************
00001000                            32  
00001000                            33  GET_START_ADDRESS
00001000  43F9 000021AC             34      LEA INTRO_STARTING,A1  * Welcome the user
00001006  103C 000D                 35      MOVE.B  #13,D0         * Nice to have carry and line feed
0000100A  4E4F                      36      TRAP    #15
0000100C                            37  
0000100C  227C 00000000             38      MOVEA.L   #0,A1         * Clear what is in A1
00001012  43F8 0650                 39      LEA FIFTH_TEMP_VAR,A1
00001016  4240                      40      CLR     D0
00001018  4241                      41      CLR     D1
0000101A  103C 0002                 42      MOVE.B  #2,D0          * Get a string input that represent the user
0000101E  4E4F                      43      TRAP    #15
00001020                            44  
00001020  6000 003E                 45      BRA     CONVERT_ASCII_TO_HEX
00001024                            46  
00001024                            47  CHECK_VALID_ADDRESS
00001024                            48  
00001024                            49  
00001024                            50  
00001024                            51  GET_END_ADDRESS
00001024  43F9 000021CC             52      LEA INTRO_ENDING,A1         * Now time to get the ending address
0000102A  103C 000D                 53      MOVE.B  #13,D0
0000102E  4E4F                      54      TRAP    #15
00001030                            55  
00001030  43F8 0600                 56      LEA     FOURTH_TEMP_VAR,A1
00001034  103C 0002                 57      MOVE.B  #2,D0
00001038  4E4F                      58      TRAP    #15
0000103A                            59  
0000103A  6000 0024                 60      BRA     CONVERT_ASCII_TO_HEX
0000103E                            61  
0000103E                            62  
0000103E                            63  PARSING_OP_CODE * Decode the first four byte. Will go throug each 2 bytes at a time
0000103E  4EB9 00001942             64      JSR       PRINT_ADDRESS_LOCATION
00001044  4EB9 00001A06             65      JSR       GET_NEXT_FOUR_NIBBLE
0000104A  3638 0200                 66      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
0000104E  4EB9 000019E6             67      JSR       GET_THE_FIRST_NIBBLE
00001054                            68  
00001054  C6FC 0006                 69      MULU      #6,D3
00001058  4EB0 3000                 70      JSR       0(A0,D3)          * Jump to the table depemding on first nibble
0000105C  FFFF FFFF                 71      SIMHALT
00001060                            72  
00001060                            73  
00001060                            74  CONVERT_ASCII_TO_HEX            * ascii table http://www.asciitable.com/
00001060  1019                      75      MOVE.B (A1)+,D0       * Go through each byte of the address
00001062  B03C 0030                 76      CMP.B   #$30,D0       * Valid data are from $30 - $39 ( 0-9) and $41 - $46 (A-F)
00001066  6D00 011E                 77      BLT    ERROR_INVALID_INPUT
0000106A  B03C 0039                 78      CMP.B   #$39,D0          * check if in the range number of hex character
0000106E  6E00 0016                 79      BGT    CONVERT_CHARACTER_ASCII_TO_HEX
00001072  0400 0030                 80      SUB.B   #$30,D0     * Get the hex range from '0-9'
00001076  D680                      81      ADD.L   D0,D3
00001078  5341                      82      SUBI    #1,D1          * Decrement the counter for length of address
0000107A  B23C 0000                 83      CMP.B   #0,D1
0000107E  6700 008E                 84      BEQ     FINISH_CONVERT_STARTING_ADDRESS
00001082  E98B                      85      LSL.L   #4,D3
00001084  60DA                      86      BRA     CONVERT_ASCII_TO_HEX
00001086                            87  
00001086                            88  CONVERT_CHARACTER_ASCII_TO_HEX
00001086  B03C 0041                 89      CMP.B   #$41,D0                        * At this point, the data must be larger than number
0000108A  6D00 00FA                 90      BLT     ERROR_INVALID_INPUT            * Only $41 - 46 are valid
0000108E  B03C 0046                 91      CMP.B   #$46,D0
00001092  6E00 00F2                 92      BGT     ERROR_INVALID_INPUT             * Greater than $46, nope
00001096  0400 0037                 93      SUB.B   #$37,D0                         * Get the A-F value
0000109A  D680                      94      ADD.L   D0,D3                           * Save the value
0000109C  5341                      95      SUBI    #1,D1                           * Decrement the counter
0000109E  B23C 0000                 96      CMP.B   #0,D1
000010A2  6700 006A                 97      BEQ     FINISH_CONVERT_STARTING_ADDRESS
000010A6  E98B                      98      LSL.L   #4,D3                           * Shift the value to the left 4 bits to save room for another byte
000010A8  60B6                      99      BRA     CONVERT_ASCII_TO_HEX
000010AA                           100  
000010AA                           101  
000010AA                           102  CONVERT_HEX_TO_ASCII                       * Usually call when printing out address in memory to console
000010AA                           103                                             * Convert 4 nibblees (2 bytes at a time). Each 1 nibble
000010AA                           104                                             * Variables: TEMP_CURRENT_4_NIBBLES
000010AA                           105                 * Reset the index that is used to jump table
000010AA  49F9 00001E88            106      LEA      HEX_CHARACTER_JUMP_TABLE,A4            * Load the table to print out ascii charracter
000010B0  3638 0200                107      MOVE.W   TEMP_CURRENT_4_NIBBLES,D3
000010B4  4EB9 000019E6            108      JSR     GET_THE_FIRST_NIBBLE * Get the left most hex value and convert
000010BA  C6FC 0006                109      MULU    #6,D3
000010BE  4EB4 3000                110      JSR     0(A4,D3)
000010C2  3638 0200                111      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000010C6  4EB9 000019EC            112      JSR     GET_THE_SECOND_NIBBLE
000010CC  C6FC 0006                113      MULU    #6,D3
000010D0  4EB4 3000                114      JSR     0(A4,D3)
000010D4  3638 0200                115      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000010D8  4EB9 000019F4            116      JSR     GET_THE_THIRD_NIBBLE
000010DE  C6FC 0006                117      MULU    #6,D3
000010E2  4EB4 3000                118      JSR     0(A4,D3)
000010E6  3638 0200                119      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000010EA  4EB9 000019FC            120      JSR     GET_THE_FOURTH_NIBBLE
000010F0  C6FC 0006                121      MULU    #6,D3
000010F4  4EB4 3000                122      JSR     0(A4,D3)
000010F8  4243                     123      CLR.W   D3
000010FA  4E75                     124      RTS
000010FC                           125  
000010FC                           126  
000010FC                           127  
000010FC                           128  PREPARE_START_AND_END_ADDRESS * When finish getting the ending adress, will load data into address regist
000010FC  41F9 00001AC2            129      LEA         FIRST_NIBBLE_JUMP_TABLE,A0
00001102  2478 0100                130      MOVE.L      STARTING_ADDRESS,A2
00001106  2678 0150                131      MOVE.L      ENDING_ADDRESS,A3
0000110A  6000 FF32                132      BRA         PARSING_OP_CODE * Start parsing the opcode now
0000110E                           133  
0000110E                           134  FINISH_CONVERT_STARTING_ADDRESS
0000110E  0803 0000                135      BTST    #0,D3 * The the last bit of the address to see if it is even or odd
00001112  6600 003E                136      BNE     INVALID_STARTING_ADDRESS
00001116  B47C 0001                137      CMP     #1,D2                      * Check if we are doing starting or ending address
0000111A  6700 000C                138      BEQ     FINISH_CONVERT_ENDING_ADDRESS
0000111E  5242                     139      ADDI    #1,D2 * Counter to make sure that we are doing the ending address
00001120  21C3 0100                140      MOVE.L  D3,STARTING_ADDRESS
00001124  6000 FEFE                141      BRA     GET_END_ADDRESS
00001128                           142  
00001128                           143  FINISH_CONVERT_ENDING_ADDRESS
00001128  0803 0000                144      BTST    #0,D3        * Check for odd address
0000112C  6600 003A                145      BNE     INVALID_ENDING_ADDRESS
00001130  B678 0100                146      CMP     STARTING_ADDRESS, D3       * Check if the ending address is less than or equal starting address
00001134  6C00 0032                147      BGE     INVALID_ENDING_ADDRESS
00001138  4242                     148      CLR.W   D2       * Clear the second data register for future use
0000113A  21C3 0150                149      MOVE.L  D3,ENDING_ADDRESS
0000113E  4243                     150      CLR.W   D3
00001140  43F9 000022E0            151      LEA     SPACE,A1
00001146  103C 000D                152      MOVE.B  #13,D0
0000114A  4E4F                     153      TRAP    #15
0000114C  60AE                     154      BRA     PREPARE_START_AND_END_ADDRESS
0000114E  FFFF FFFF                155      SIMHALT
00001152                           156  
00001152                           157  INVALID_STARTING_ADDRESS
00001152  227C 00000000            158      MOVEA.L   #0,A1
00001158  43F9 000021EA            159      LEA INVALID_INPUT,A1
0000115E  103C 000D                160      MOVE.B #13,D0
00001162  4E4F                     161      TRAP #15
00001164  6000 FE9A                162      BRA GET_START_ADDRESS
00001168                           163  
00001168                           164  INVALID_ENDING_ADDRESS
00001168  227C 00000000            165      MOVEA.L   #0,A1
0000116E  43F9 000021EA            166      LEA INVALID_INPUT,A1
00001174  103C 000D                167      MOVE.B #13,D0
00001178  4E4F                     168      TRAP #15
0000117A  6000 FEA8                169      BRA GET_END_ADDRESS
0000117E                           170  
0000117E                           171  USER_INPUT_ENTER  * Wait for the user to press enter to continue
0000117E  103C 0005                172      MOVE.B  #5,D0
00001182  4E4F                     173      TRAP #15
00001184  4E75                     174      RTS
00001186                           175  
00001186                           176  
00001186                           177  *************************************************
00001186                           178  * Print to console section
00001186                           179  *************************************************
00001186                           180  
00001186                           181  
00001186                           182  
00001186                           183  
00001186                           184  
00001186                           185  
00001186                           186  
00001186                           187  * Could be used to detect non aligned starting address and ending address
00001186                           188  ERROR_INVALID_INPUT
00001186  B47C 0001                189      CMP #1,D2
0000118A  67DC                     190      BEQ INVALID_ENDING_ADDRESS
0000118C  60C4                     191      BRA INVALID_STARTING_ADDRESS
0000118E                           192  
0000118E                           193  INVALID                         * UNSUPPORTED OR INVALID INSTRUCTION. PRINT OUT LOCATIO AND DATA
0000118E  BE7C 0001                194      CMP #1,D7
00001192  6700 FEAA                195      BEQ PARSING_OP_CODE              * Used this to not print out instructions but to proceed
00001196  43F9 000022A4            196      LEA DATA_VALUE,A1
0000119C  4EB9 00001906            197      JSR PRINT_TO_SCREEN_ENTIRE_STRING
000011A2  4EB9 000019CE            198      JSR PRINT_EMPTY_SPACE
000011A8  4EB9 000019B6            199      JSR PRINT_HEX_SYMBOL
000011AE  4EB8 10AA                200      JSR CONVERT_HEX_TO_ASCII * Print out the op code that was not decoded
000011B2  43F9 000022E0            201      LEA  SPACE,A1 * Go to new line
000011B8  103C 000D                202      MOVE.B #13,D0
000011BC  4E4F                     203      TRAP #15
000011BE  3E3C 0001                204      MOVE #1,D7 * 1 signify that we are currently in the process of processing invalid op code.
000011C2  6000 FE7A                205      BRA PARSING_OP_CODE
000011C6                           206  
000011C6                           207  
000011C6                           208  
000011C6                           209  RESET_INVALID_COUNTER
000011C6  3E3C 0000                210      MOVE      #0, D7                   * Reset the counter, 0 means now the instruction is valid
000011CA  4E75                     211      RTS
000011CC                           212  
000011CC                           213  PRINT_OUT_NEG                     * Check the 8-6 bits of NEG and LEA. For NEG, the 8-6 bits are 0S where S is the size. For LEA, it is 111
000011CC  4EB8 11C6                214      JSR     RESET_INVALID_COUNTER
000011D0  43F9 00002222            215      LEA      NEG_VALUE,A1            * Print NEG to screen
000011D6  4EB9 00001906            216      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
000011DC  4EB9 000012CE            217      JSR     PRINT_NORMAL_SUFFIX
000011E2                           218                                              * Now print the source mode and data mode
000011E2  4EB9 00001A24            219      JSR     CHECK_TYPE_DATA             * Extract the mode and register
000011E8  4EB9 0000190E            220      JSR     PRINT_DATA_MODE_SOURCE
000011EE  618E                     221      BSR     USER_INPUT_ENTER
000011F0  6000 FE4C                222      BRA     PARSING_OP_CODE
000011F4  4E75                     223      RTS
000011F6                           224  
000011F6                           225  PRINT_OUT_NOP
000011F6  4EB8 11C6                226      JSR     RESET_INVALID_COUNTER
000011FA  43F9 00002204            227      LEA     NOP_VALUE,A1 * Display the NOP message
00001200  4EB9 00001906            228      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001206  6100 FF76                229      BSR     USER_INPUT_ENTER
0000120A  6000 FE32                230      BRA     PARSING_OP_CODE
0000120E  FFFF FFFF                231      SIMHALT             ; halt simulator
00001212                           232  
00001212                           233  PRINT_OUT_RTS
00001212  4EB8 11C6                234      JSR     RESET_INVALID_COUNTER
00001216  43F9 0000220A            235      LEA     RTS_VALUE,A1
0000121C  4EB9 00001906            236      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001222  6100 FF5A                237      BSR     USER_INPUT_ENTER
00001226  6000 FE16                238      BRA     PARSING_OP_CODE
0000122A  FFFF FFFF                239      SIMHALT
0000122E                           240  
0000122E                           241  PRINT_OUT_ORI_TO_SR
0000122E  4EB8 11C6                242      JSR     RESET_INVALID_COUNTER
00001232  43F9 00002210            243      LEA     ORI_VALUE,A1
00001238  4EB9 00001906            244      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
0000123E  6100 FF3E                245      BSR     USER_INPUT_ENTER
00001242  6000 FDFA                246      BRA     PARSING_OP_CODE
00001246  4E75                     247      RTS
00001248                           248  
00001248                           249  PRINT_OUT_JSR
00001248  4EB8 11C6                250      JSR     RESET_INVALID_COUNTER
0000124C  43F9 00002216            251      LEA      JSR_VALUE,A1
00001252  4EB9 00001906            252      JSR      PRINT_TO_SCREEN_ENTIRE_STRING * Now query what type of data to print out, source or destination
00001258  4EB9 000019CE            253      JSR      PRINT_EMPTY_SPACE
0000125E  4EB9 00001A24            254      JSR     CHECK_TYPE_DATA
00001264  4EB9 0000190E            255      JSR     PRINT_DATA_MODE_SOURCE          * Print the M and N of the last 6 bits
0000126A  6100 FF12                256      BSR     USER_INPUT_ENTER
0000126E  6000 FDCE                257      BRA     PARSING_OP_CODE
00001272                           258  
00001272                           259  
00001272                           260  
00001272                           261  PRINT_OUT_CMPI
00001272  4EB8 11C6                262      JSR     RESET_INVALID_COUNTER                       * Dtermine the size to print out CMPI
00001276  43F9 00002228            263      LEA     CMPI_VALUE,A1                  * Print out the literal value
0000127C  4EB9 00001906            264      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001282  4EB9 00001A24            265      JSR     CHECK_TYPE_DATA
00001288  4EB9 000012CE            266      JSR     PRINT_NORMAL_SUFFIX
0000128E  4EB9 000019CE            267      JSR     PRINT_EMPTY_SPACE
00001294  4EB9 000019DA            268      JSR     PRINT_IMMEDIATE_DATA_SYMBOL
0000129A  4EB9 00001A16            269      JSR     GET_NORMAL_SIZE               * Get the size of the operation to know how much byte should we advance forward
000012A0  E24B                     270      LSR     #1, D3                        * For cmpi.b and cmpi.w, they all map to absolute short in which print only 4
000012A2  31C3 0550                271      MOVE.W  D3, THIRD_TEMP_VAR
000012A6  4EB9 00001A24            272      JSR     CHECK_TYPE_DATA              * Now byte and word will be printed 4 space where as long will be printed 5 space
000012AC  4EB9 00001DCC            273      JSR     REGISTER_MODE_111            * Print out the immediate value
000012B2  4EB9 00001962            274      JSR     PRINT_COMMA
000012B8  4EB9 000019CE            275      JSR     PRINT_EMPTY_SPACE
000012BE  4EB9 0000190E            276      JSR     PRINT_DATA_MODE_SOURCE
000012C4  6100 FEB8                277      BSR     USER_INPUT_ENTER
000012C8  6000 FD74                278      BRA     PARSING_OP_CODE
000012CC  4E75                     279      RTS
000012CE                           280  
000012CE                           281  
000012CE                           282  
000012CE                           283  PRINT_NORMAL_SUFFIX                       * For normal size, the size is on the first 2 bit of the third nibble
000012CE                           284                                * Get rid of the 2 right most bit of the third nibble
000012CE  4EB9 00001A16            285      JSR     GET_NORMAL_SIZE
000012D4  49F9 00001FF6            286      LEA     NORMAL_SIZE_PRINT_JUMP_TABLE,A4
000012DA  B67C 0003                287      CMP     #%11,D3                      * For normal size, does not take 11
000012DE  6700 FEAE                288      BEQ     INVALID
000012E2  C6FC 0006                289      MULU    #6,D3
000012E6  4EB4 3000                290      JSR     0(A4,D3)                       * Print out appropriate suffix
000012EA  4E75                     291      RTS
000012EC                           292  
000012EC                           293  
000012EC                           294  ** STORE DATA INTO THIRD_TEMP_VAR FIRST.DEPENDING ON SOURCE OR DESTINATION REGISTER
000012EC                           295  
000012EC                           296  PRINT_REGISTER_NUMBER           * This is used to print the register number Dn or An where it will print n
000012EC                           297                                  * Expected to store the data into D3 first
000012EC  49F9 00001E88            298      LEA  HEX_CHARACTER_JUMP_TABLE,A4
000012F2  3638 0550                299      MOVE.W  THIRD_TEMP_VAR,D3
000012F6  C6FC 0006                300      MULU    #6,D3
000012FA  4EB4 3000                301      JSR     0(A4,D3)
000012FE  4278 0550                302      CLR.W THIRD_TEMP_VAR
00001302  4243                     303      CLR.W D3
00001304  4E75                     304      RTS
00001306                           305  
00001306                           306  PRINT_OUT_LEA
00001306  4EB8 11C6                307      JSR     RESET_INVALID_COUNTER
0000130A  43F9 0000221C            308      LEA LEA_VALUE,A1
00001310  4EB9 00001906            309      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001316  4EB9 000019CE            310      JSR PRINT_EMPTY_SPACE
0000131C  4EB9 00001A24            311      JSR CHECK_TYPE_DATA
00001322  4EB9 0000190E            312      JSR PRINT_DATA_MODE_SOURCE
00001328  4EB9 00001962            313      JSR PRINT_COMMA
0000132E  4EB9 000019CE            314      JSR PRINT_EMPTY_SPACE
00001334  4EB9 0000196E            315      JSR PRINT_ADDRESS_REGISTER
0000133A  31F8 0250 0550           316      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR * Store the register number to print
00001340  4EB8 12EC                317      JSR PRINT_REGISTER_NUMBER
00001344  6100 FE38                318      BSR USER_INPUT_ENTER
00001348  6000 FCF4                319      BRA PARSING_OP_CODE
0000134C  4E75                     320      RTS
0000134E                           321  
0000134E                           322  PRINT_OUT_ADDQ             * ADDQ is the same as SUBQ
0000134E  4EB8 11C6                323      JSR     RESET_INVALID_COUNTER
00001352  43F9 00002270            324      LEA ADDQ_VALUE,A1
00001358  6000 0010                325      BRA ADDQ_AND_SUBQ_HELPER
0000135C                           326  
0000135C                           327  PRINT_OUT_SUBQ                              * SUBQ does not accept 0. working on a way to print out 8
0000135C  4EB8 11C6                328      JSR     RESET_INVALID_COUNTER
00001360  43F9 00002240            329      LEA SUBQ_VALUE,A1
00001366  6000 0002                330      BRA ADDQ_AND_SUBQ_HELPER
0000136A                           331  
0000136A                           332  ADDQ_AND_SUBQ_HELPER
0000136A  4EB9 00001906            333      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001370  4EB8 12CE                334      JSR PRINT_NORMAL_SUFFIX
00001374  4EB9 000019CE            335      JSR PRINT_EMPTY_SPACE
0000137A  4EB9 000019DA            336      JSR PRINT_IMMEDIATE_DATA_SYMBOL
00001380  4EB9 00001A24            337      JSR CHECK_TYPE_DATA
00001386  0C78 0000 0250           338      CMP #0, DESTINATION_VAR                * In the case of 8, the destination var is 000. But we want to print out 8
0000138C  6700 0028                339      BEQ SUBQ_HELPER_FUNCTION
00001390  31F8 0250 0550           340      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR     * Save the value to print out from print register number
00001396  4EB8 12EC                341      JSR PRINT_REGISTER_NUMBER              * Print out the data from 1-8
0000139A  4EB9 00001962            342      JSR PRINT_COMMA
000013A0  4EB9 000019CE            343      JSR PRINT_EMPTY_SPACE
000013A6  4EB9 0000190E            344      JSR PRINT_DATA_MODE_SOURCE
000013AC  6100 FDD0                345      BSR USER_INPUT_ENTER
000013B0  6000 FC8C                346      BRA PARSING_OP_CODE
000013B4  4E75                     347      RTS
000013B6                           348  
000013B6                           349  SUBQ_HELPER_FUNCTION                         * Single function that exist to help with printing oout the data in SUBQ
000013B6  31FC 0008 0550           350      MOVE.W #8, THIRD_TEMP_VAR
000013BC  4EB8 12EC                351      JSR PRINT_REGISTER_NUMBER
000013C0  4EB9 00001962            352      JSR PRINT_COMMA
000013C6  4EB9 000019CE            353      JSR PRINT_EMPTY_SPACE
000013CC  4EB9 0000190E            354      JSR PRINT_DATA_MODE_SOURCE
000013D2  6100 FDAA                355      BSR USER_INPUT_ENTER
000013D6  6000 FC66                356      BRA PARSING_OP_CODE
000013DA                           357  PRINT_OUT_DIVS
000013DA  4EB8 11C6                358      JSR     RESET_INVALID_COUNTER
000013DE  43F9 00002246            359      LEA DIVS_VALUE,A1
000013E4  4EB9 00001906            360      JSR PRINT_TO_SCREEN_ENTIRE_STRING
000013EA  4EB9 0000201E            361      JSR PRINT_NORMAL_WORD_SUFFIX
000013F0  4EB9 000019CE            362      JSR PRINT_EMPTY_SPACE
000013F6  4EB9 0000190E            363      JSR PRINT_DATA_MODE_SOURCE
000013FC  4EB9 00001962            364      JSR PRINT_COMMA
00001402  4EB9 000019CE            365      JSR PRINT_EMPTY_SPACE
00001408  4EB9 0000197A            366      JSR PRINT_DATA_REGISTER
0000140E  31F8 0250 0550           367      MOVE.W DESTINATION_VAR, THIRD_TEMP_VAR      * Store the register number Dn to print out
00001414  4EB8 12EC                368      JSR PRINT_REGISTER_NUMBER
00001418  6100 FD64                369      BSR USER_INPUT_ENTER
0000141C  6000 FC20                370      BRA PARSING_OP_CODE
00001420  4E75                     371      RTS
00001422                           372  
00001422                           373  PRINT_OUT_MULS                      * MULS also act like sub for <ea>,Dn * FIX
00001422  4EB8 11C6                374      JSR     RESET_INVALID_COUNTER
00001426  43F9 00002258            375      LEA   MULS_VALUE,A1
0000142C  4EB9 00001906            376      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
00001432  4EB9 0000201E            377      JSR   PRINT_NORMAL_WORD_SUFFIX
00001438  4EB9 000019CE            378      JSR   PRINT_EMPTY_SPACE
0000143E  4EB9 00001A24            379      JSR     CHECK_TYPE_DATA
00001444  31FC 0001 0300           380      MOVE.W  #%01, DESTINATION_MODE      * Change the size of the 2 size bit to print out
0000144A  4EB9 0000190E            381      JSR  PRINT_DATA_MODE_SOURCE
00001450  4EB9 00001962            382      JSR     PRINT_COMMA
00001456  4EB9 000019CE            383      JSR     PRINT_EMPTY_SPACE
0000145C                           384  
0000145C  4EB9 0000197A            385      JSR     PRINT_DATA_REGISTER
00001462  31F8 0250 0550           386      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR
00001468  4EB8 12EC                387      JSR     PRINT_REGISTER_NUMBER
0000146C  6100 FD10                388      BSR     USER_INPUT_ENTER
00001470  6000 FBCC                389      BRA     PARSING_OP_CODE
00001474  4E75                     390      RTS
00001476                           391  
00001476                           392  
00001476                           393  PRINT_OUT_MULU
00001476  4EB8 11C6                394      JSR     RESET_INVALID_COUNTER
0000147A  43F9 0000225E            395      LEA     MULU_VALUE,A1
00001480  4EB9 00001906            396      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001486  4EB9 0000201E            397      JSR     PRINT_NORMAL_WORD_SUFFIX
0000148C  4EB9 000019CE            398      JSR     PRINT_EMPTY_SPACE
00001492  4EB9 00001A24            399      JSR     CHECK_TYPE_DATA
00001498  31FC 0001 0300           400      MOVE.W  #%01, DESTINATION_MODE
0000149E  4EB9 0000190E            401      JSR     PRINT_DATA_MODE_SOURCE
000014A4  4EB9 00001962            402      JSR     PRINT_COMMA
000014AA  4EB9 000019CE            403      JSR     PRINT_EMPTY_SPACE
000014B0                           404  
000014B0  4EB9 0000197A            405      JSR     PRINT_DATA_REGISTER
000014B6  31F8 0250 0550           406      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR
000014BC  4EB8 12EC                407      JSR     PRINT_REGISTER_NUMBER
000014C0  6100 FCBC                408      BSR     USER_INPUT_ENTER
000014C4  6000 FB78                409      BRA     PARSING_OP_CODE
000014C8  4E75                     410      RTS
000014CA                           411  
000014CA                           412  PRINT_OUT_CMP
000014CA  4EB8 11C6                413      JSR     RESET_INVALID_COUNTER
000014CE  43F9 0000222E            414      LEA CMP_VALUE,A1
000014D4  4EB9 00001906            415      JSR PRINT_TO_SCREEN_ENTIRE_STRING
000014DA  4EB8 12CE                416      JSR PRINT_NORMAL_SUFFIX
000014DE  4EB9 000019CE            417      JSR PRINT_EMPTY_SPACE
000014E4  4EB9 00001A24            418      JSR CHECK_TYPE_DATA
000014EA  4EB9 0000190E            419      JSR PRINT_DATA_MODE_SOURCE
000014F0  4EB9 00001962            420      JSR PRINT_COMMA
000014F6  4EB9 000019CE            421      JSR PRINT_EMPTY_SPACE
000014FC  4EB9 0000197A            422      JSR PRINT_DATA_REGISTER
00001502  31F8 0250 0550           423      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR
00001508  4EB8 12EC                424      JSR PRINT_REGISTER_NUMBER
0000150C  6100 FC70                425      BSR USER_INPUT_ENTER
00001510  6000 FB2C                426      BRA PARSING_OP_CODE
00001514                           427  
00001514  4E75                     428      RTS
00001516                           429  
00001516                           430  
00001516                           431  PRINT_OUT_SUBA
00001516  4EB8 11C6                432      JSR     RESET_INVALID_COUNTER
0000151A  43F9 0000223A            433      LEA     SUBA_VALUE,A1
00001520  6000 0010                434      BRA     SUBA_AND_ADDA_HELPER
00001524                           435  
00001524                           436  PRINT_OUT_ADDA
00001524  4EB8 11C6                437      JSR     RESET_INVALID_COUNTER
00001528  43F9 0000226A            438      LEA     ADDA_VALUE,A1
0000152E  6000 0002                439      BRA     SUBA_AND_ADDA_HELPER
00001532                           440  
00001532                           441  SUBA_AND_ADDA_HELPER
00001532  4EB9 00001906            442      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001538  4EB9 00001A24            443      JSR     CHECK_TYPE_DATA
0000153E  4EB9 000019EC            444      JSR     GET_THE_SECOND_NIBBLE
00001544  E14B                     445      LSL     #8,D3                      * Get the special one bit size of ADDA
00001546  EF4B                     446      LSL     #7,D3
00001548  EE4B                     447      LSR     #7,D3
0000154A  E04B                     448      LSR     #8,D3
0000154C  5243                     449      ADD     #1,D3                      * 0 is word and 1 is long. Add 1 will be 01 and 10, word and long
0000154E  31C3 0300                450      MOVE.W  D3,DESTINATION_MODE
00001552  4EB8 12CE                451      JSR     PRINT_NORMAL_SUFFIX        * Now print .W or .L only
00001556  4EB9 0000190E            452      JSR     PRINT_DATA_MODE_SOURCE
0000155C  4EB9 00001962            453      JSR     PRINT_COMMA
00001562  4EB9 000019CE            454      JSR     PRINT_EMPTY_SPACE
00001568  4EB9 0000196E            455      JSR     PRINT_ADDRESS_REGISTER
0000156E  31F8 0250 0550           456      MOVE.W  DESTINATION_VAR, THIRD_TEMP_VAR       * Save the variable to print out the number of address register
00001574  4EB8 12EC                457      JSR     PRINT_REGISTER_NUMBER
00001578  6100 FC04                458      BSR     USER_INPUT_ENTER
0000157C  6000 FAC0                459      BRA     PARSING_OP_CODE
00001580  4E75                     460      RTS
00001582                           461  
00001582                           462  PRINT_OUT_OR
00001582  4EB8 11C6                463      JSR     RESET_INVALID_COUNTER
00001586  43F9 0000228A            464      LEA     OR_VALUE,A1
0000158C  6000 001E                465      BRA     ADD_AND_SUB_HELPER           * Take advantage of the similar structure like add and sub
00001590                           466  
00001590                           467  PRINT_OUT_ADD
00001590  4EB8 11C6                468      JSR     RESET_INVALID_COUNTER              * Function similar like SUB
00001594  43F9 00002264            469      LEA     ADD_VALUE,A1
0000159A  6000 0010                470      BRA     ADD_AND_SUB_HELPER
0000159E                           471  
0000159E                           472  PRINT_OUT_SUB                      * The SUB function is odd is that the Dn is always in front
0000159E                           473                                     * So to distinguish it, we need to check the source mode and compare with
0000159E                           474                                     *000
0000159E  4EB8 11C6                475      JSR     RESET_INVALID_COUNTER
000015A2  43F9 00002234            476      LEA SUB_VALUE,A1                       * Only time where the source and dstiantion are in correct position
000015A8  6000 0002                477      BRA     ADD_AND_SUB_HELPER
000015AC                           478  
000015AC                           479  
000015AC                           480  ADD_AND_SUB_HELPER
000015AC  4EB9 00001906            481      JSR PRINT_TO_SCREEN_ENTIRE_STRING       * Is when both are data register
000015B2  4EB8 12CE                482      JSR PRINT_NORMAL_SUFFIX
000015B6  4EB9 000019CE            483      JSR PRINT_EMPTY_SPACE
000015BC  4EB9 00001A24            484      JSR CHECK_TYPE_DATA
000015C2  0C78 0000 0350           485      CMP #0, SOURCE_MODE               *
000015C8  6600 002E                486      BNE SUB_HELPER_FUNCTION         * Utilize the not normal approach
000015CC  4EB9 0000190E            487      JSR PRINT_DATA_MODE_SOURCE
000015D2  4EB9 00001962            488      JSR PRINT_COMMA
000015D8  4EB9 000019CE            489      JSR PRINT_EMPTY_SPACE
000015DE  4EB9 0000197A            490      JSR PRINT_DATA_REGISTER
000015E4  31F8 0250 0550           491      MOVE.W DESTINATION_VAR, THIRD_TEMP_VAR
000015EA  4EB8 12EC                492      JSR PRINT_REGISTER_NUMBER
000015EE  6100 FB8E                493      BSR USER_INPUT_ENTER
000015F2  6000 FA4A                494      BRA PARSING_OP_CODE
000015F6  4E75                     495      RTS
000015F8                           496  
000015F8                           497  SUB_HELPER_FUNCTION       * For whatever the data register is always the first 3 bit of the second nibble
000015F8                           498                                             * Even though it can either be in the source or destination when write it
000015F8  4EB9 00001A24            499      JSR CHECK_TYPE_DATA
000015FE                           500  
000015FE                           501  
000015FE  3638 0250                502      MOVE.W DESTINATION_VAR,D3
00001602  31F8 0400 0250           503      MOVE.W SOURCE_VAR,DESTINATION_VAR
00001608  31C3 0400                504      MOVE.W D3,SOURCE_VAR
0000160C  3638 0300                505      MOVE.W DESTINATION_MODE,D3
00001610  31F8 0350 0300           506      MOVE.W SOURCE_MODE,DESTINATION_MODE
00001616  31C3 0350                507      MOVE.W D3,SOURCE_MODE
0000161A  3638 0350                508      MOVE.W SOURCE_MODE, D3
0000161E  31F8 0400 0550           509      MOVE.W SOURCE_VAR, THIRD_TEMP_VAR         * Save the variable to print out from register
00001624  E44B                     510      LSR #2,D3
00001626  B67C 0000                511      CMP #0,D3         * Check direction to know which order we should be printing
0000162A  6700 0024                512      BEQ SUB_HELPER_REGISTER_TO_MEM
0000162E                           513  
0000162E  4EB9 00001D92            514      JSR REGISTER_MODE_000                  * Need to find a way to switch the places
00001634  4EB9 00001962            515      JSR PRINT_COMMA
0000163A  4EB9 000019CE            516      JSR PRINT_EMPTY_SPACE
00001640  4EB9 00001928            517      JSR PRINT_DATA_MODE_DESTINATION
00001646  6100 FB36                518      BSR USER_INPUT_ENTER
0000164A  6000 F9F2                519      BRA PARSING_OP_CODE
0000164E  4E75                     520      RTS
00001650                           521  
00001650                           522  SUB_HELPER_REGISTER_TO_MEM            * Helper function to help with printing fro register to memory
00001650  4EB9 00001928            523      JSR PRINT_DATA_MODE_DESTINATION
00001656  4EB9 00001962            524      JSR PRINT_COMMA
0000165C  4EB9 000019CE            525      JSR PRINT_EMPTY_SPACE
00001662  4EB9 00001D92            526      JSR REGISTER_MODE_000
00001668  6100 FB14                527      BSR USER_INPUT_ENTER
0000166C  6000 F9D0                528      BRA PARSING_OP_CODE
00001670  4E75                     529      RTS
00001672                           530  
00001672                           531  PRINT_OUT_BRA                         * Current limitation: Only can print out branch to a word address (4bytes).No support for 8 bytes
00001672  4EB8 11C6                532      JSR     RESET_INVALID_COUNTER
00001676  43F9 0000224C            533      LEA     BRA_VALUE,A1
0000167C  4EB9 00001906            534      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001682  4EB9 000019CE            535      JSR     PRINT_EMPTY_SPACE
00001688  4EB9 000019B6            536      JSR     PRINT_HEX_SYMBOL
0000168E  380A                     537      MOVE.W  A2,D4           * Save the current address we are at
00001690  4EB9 00001A06            538      JSR     GET_NEXT_FOUR_NIBBLE       * GEt the displacement we are suppose to branch to
00001696  D843                     539      ADD     D3,D4             * Current address + displacement => address we are suppose to jump to
00001698  31C4 0200                540      MOVE.W  D4, TEMP_CURRENT_4_NIBBLES     * Prepare the address to print out in hex
0000169C  4EB8 10AA                541      JSR     CONVERT_HEX_TO_ASCII
000016A0  6100 FADC                542      BSR     USER_INPUT_ENTER
000016A4  6000 F998                543      BRA     PARSING_OP_CODE
000016A8                           544  PRINT_OUT_BSR
000016A8  4EB8 11C6                545      JSR     RESET_INVALID_COUNTER
000016AC  43F9 00002252            546      LEA    BSR_VALUE,A1
000016B2  4EB9 00001906            547      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
000016B8  4EB9 000019CE            548      JSR    PRINT_EMPTY_SPACE
000016BE  4EB9 000019B6            549      JSR    PRINT_HEX_SYMBOL
000016C4  380A                     550      MOVE.W  A2,D4
000016C6  4EB9 00001A06            551      JSR    GET_NEXT_FOUR_NIBBLE
000016CC  D843                     552      ADD    D3,D4
000016CE  31C4 0200                553      MOVE.W D4,TEMP_CURRENT_4_NIBBLES
000016D2  4EB8 10AA                554      JSR    CONVERT_HEX_TO_ASCII
000016D6  6100 FAA6                555      BSR    USER_INPUT_ENTER
000016DA  6000 F962                556      BRA   PARSING_OP_CODE
000016DE                           557  
000016DE                           558  PRINT_OUT_Bcc
000016DE  4EB8 11C6                559      JSR     RESET_INVALID_COUNTER
000016E2  43F9 00002328            560      LEA    B,A1
000016E8  4EB9 00001906            561      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
000016EE  4DF9 00002044            562      LEA    CONDITION_JUMP_TABLE,A6            * Load the jump table to know which condition code to print
000016F4  3638 0200                563      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
000016F8  4EB9 000019EC            564      JSR     GET_THE_SECOND_NIBBLE
000016FE  C6FC 0006                565      MULU    #6,D3
00001702  4EB6 3000                566      JSR     0(A6,D3)            * Now print out the suffix of B
00001706  4EB9 000019CE            567      JSR     PRINT_EMPTY_SPACE
0000170C  4EB9 000019B6            568      JSR     PRINT_HEX_SYMBOL
00001712  380A                     569      MOVE.W  A2,D4
00001714  4EB9 00001A06            570      JSR     GET_NEXT_FOUR_NIBBLE
0000171A  D843                     571      ADD     D3,D4
0000171C  31C4 0200                572      MOVE.W  D4,TEMP_CURRENT_4_NIBBLES
00001720  4EB8 10AA                573      JSR     CONVERT_HEX_TO_ASCII
00001724  6100 FA58                574      BSR     USER_INPUT_ENTER
00001728  6000 F914                575      BRA     PARSING_OP_CODE
0000172C                           576  
0000172C                           577  PRINT_OUT_LOGICAL_SHIFT_MEM           * Lsd with <ea>
0000172C  4EB8 11C6                578      JSR     RESET_INVALID_COUNTER
00001730  43F9 0000227A            579      LEA    LS_VALUE,A1
00001736  4EB9 00001750            580      JSR    ASD_LSD_ROD_SHIFT_HELPER
0000173C  4E75                     581      RTS
0000173E                           582  
0000173E                           583  PRINT_OUT_ARITH_SHIFT_MEM
0000173E  4EB8 11C6                584      JSR     RESET_INVALID_COUNTER
00001742  43F9 00002276            585      LEA    AS_VALUE,A1
00001748  4EB9 00001750            586      JSR    ASD_LSD_ROD_SHIFT_HELPER
0000174E  4E75                     587      RTS
00001750                           588  
00001750                           589  ASD_LSD_ROD_SHIFT_HELPER
00001750  4EB9 00001906            590      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
00001756  4DF9 00002114            591      LEA     RIGHT_OR_LEFT_JUMP_TABLE,A6     * Print the direction, left or right
0000175C  3638 0200                592      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001760  4EB9 00001A24            593      JSR     CHECK_TYPE_DATA
00001766  4EB9 000019EC            594      JSR     GET_THE_SECOND_NIBBLE
0000176C  E14B                     595      LSL      #8,D3
0000176E  EF4B                     596      LSL      #7,D3
00001770  EE4B                     597      LSR       #7,D3
00001772  E04B                     598      LSR      #8,D3
00001774  C6FC 0006                599      MULU     #6,D3
00001778  4EB6 3000                600      JSR      0(A6,D3)   * Print out left or right
0000177C  4EB9 0000201E            601      JSR     PRINT_NORMAL_WORD_SUFFIX
00001782  31F8 0400 0550           602      MOVE.W   SOURCE_VAR, THIRD_TEMP_VAR      * Save the register number in case for print OUT
00001788  4EB9 0000190E            603      JSR      PRINT_DATA_MODE_SOURCE
0000178E  6100 F9EE                604      BSR     USER_INPUT_ENTER
00001792  6000 F8AA                605      BRA     PARSING_OP_CODE
00001796  4E75                     606      RTS
00001798                           607  
00001798                           608  PRINT_OUT_ROTATE_MEM
00001798  4EB8 11C6                609      JSR     RESET_INVALID_COUNTER
0000179C  43F9 0000227E            610      LEA    RO_VALUE,A1
000017A2  4EB8 1750                611      JSR    ASD_LSD_ROD_SHIFT_HELPER
000017A6  4E75                     612      RTS
000017A8                           613  
000017A8                           614  
000017A8                           615  
000017A8                           616  PRINT_OUT_ASD_OR_LSD                * For other ASd and LSd, the first  bit of the last nibble can differentiate them
000017A8  4EB8 11C6                617      JSR     RESET_INVALID_COUNTER
000017AC  3638 0200                618      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
000017B0  4EB9 000019FC            619      JSR    GET_THE_FOURTH_NIBBLE
000017B6  E64B                     620      LSR    #3,D3
000017B8  B67C 0000                621      CMP    #0,D3
000017BC  6700 0008                622      BEQ    PRINT_OUT_ASD * First bit is 0 for ASD
000017C0  6000 0016                623      BRA    PRINT_OUT_LSD * 1 for LSD
000017C4  4E75                     624      RTS
000017C6                           625  
000017C6                           626  PRINT_OUT_ASD
000017C6  4EB8 11C6                627      JSR     RESET_INVALID_COUNTER
000017CA  43F9 00002276            628      LEA AS_VALUE,A1
000017D0  4EB9 00001810            629      JSR ASD_LSD_ROD_HELPER_FUNCTION
000017D6  4E75                     630      RTS
000017D8                           631  
000017D8                           632  PRINT_OUT_LSD
000017D8  4EB8 11C6                633      JSR     RESET_INVALID_COUNTER
000017DC  43F9 0000227A            634      LEA LS_VALUE,A1
000017E2  4EB9 00001810            635      JSR ASD_LSD_ROD_HELPER_FUNCTION
000017E8  4E75                     636      RTS
000017EA                           637  
000017EA                           638  PRINT_OUT_ROD           * Could be ROd or ROXd. If the latter case, then it is invalid
000017EA                           639  
000017EA  3638 0200                640      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
000017EE  4EB9 000019FC            641      JSR     GET_THE_FOURTH_NIBBLE
000017F4  E64B                     642      LSR     #3,D3
000017F6  B67C 0001                643      CMP     #1,D3
000017FA  6600 F992                644      BNE     INVALID         * ROD ibly accept 1 as the first bit in the fourth nibbles
000017FE  4EB8 11C6                645      JSR     RESET_INVALID_COUNTER
00001802  43F9 0000227E            646      LEA     RO_VALUE,A1
00001808  4EB9 00001810            647      JSR     ASD_LSD_ROD_HELPER_FUNCTION
0000180E  4E75                     648      RTS
00001810                           649  
00001810                           650  
00001810                           651  
00001810                           652  
00001810                           653  ASD_LSD_ROD_HELPER_FUNCTION   * Used for printing out the cases where a source and destionaion are present
00001810  4EB9 00001906            654      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001816  4DF9 00002114            655      LEA     RIGHT_OR_LEFT_JUMP_TABLE,A6     * Print the direction, left or right
0000181C  3638 0200                656      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3 * Now print out the Direction left or right
00001820  4EB9 00001A24            657      JSR     CHECK_TYPE_DATA
00001826  4EB9 000019EC            658      JSR     GET_THE_SECOND_NIBBLE
0000182C  E14B                     659      LSL      #8,D3
0000182E  EF4B                     660      LSL      #7,D3
00001830  E04B                     661      LSR      #8,D3
00001832  EE4B                     662      LSR      #7,D3
00001834  C6FC 0006                663      MULU     #6,D3
00001838  4EB6 3000                664      JSR      0(A6,D3)   * Print out left or right
0000183C  3638 0200                665      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001840  4EB8 12CE                666      JSR     PRINT_NORMAL_SUFFIX    * Print out .B, .W or .L
00001844  3638 0200                667      MOVE.W   TEMP_CURRENT_4_NIBBLES,D3      * Now we need to determine if its is immediate or register rotation
00001848  4EB9 000019F4            668      JSR      GET_THE_THIRD_NIBBLE
0000184E  E14B                     669      LSL      #8,D3
00001850  ED4B                     670      LSL      #6,D3
00001852  E04B                     671      LSR      #8,D3
00001854  EE4B                     672      LSR      #7,D3 * Now the third bit will be at the last position
00001856  4DF9 00002138            673      LEA     IMMEDIATE_OR_REGISTER_JUMP_TABLE,A6
0000185C  C6FC 0006                674      MULU     #6,D3
00001860  4EB6 3000                675      JSR     0(A6,D3)
00001864  4EB9 0000197A            676      JSR     PRINT_DATA_REGISTER
0000186A  3638 0200                677      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
0000186E  4EB9 00001A24            678      JSR     CHECK_TYPE_DATA
00001874  31F8 0400 0550           679      MOVE.W  SOURCE_VAR,THIRD_TEMP_VAR * Save the register number to print out
0000187A  4EB8 12EC                680      JSR     PRINT_REGISTER_NUMBER
0000187E  6100 F8FE                681      BSR     USER_INPUT_ENTER
00001882  6000 F7BA                682      BRA     PARSING_OP_CODE
00001886  4E75                     683      RTS
00001888                           684  
00001888                           685  
00001888                           686  MOVE_OPCODE_HELPER
00001888  3638 0200                687      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
0000188C  4EB9 00001A24            688      JSR CHECK_TYPE_DATA
00001892  0C78 0001 0300           689      CMP #%001, DESTINATION_MODE
00001898  6700 0008                690      BEQ PRINT_OUT_MOVEA
0000189C  6000 0018                691      BRA PRINT_OUT_MOVE
000018A0  4E75                     692      RTS
000018A2                           693  
000018A2                           694  
000018A2                           695  PRINT_OUT_MOVEA
000018A2  4EB8 11C6                696      JSR     RESET_INVALID_COUNTER
000018A6  3E3C 0000                697      MOVE     #0,D7
000018AA  43F9 0000228E            698      LEA MOVEA_VALUE,A1
000018B0  4EB9 000018C6            699      JSR MOVE_SECOND_OPCODE_HELPER
000018B6                           700  
000018B6                           701  PRINT_OUT_MOVE
000018B6                           702  
000018B6  4EB8 11C6                703      JSR     RESET_INVALID_COUNTER
000018BA  43F9 00002296            704      LEA MOVE_VALUE,A1
000018C0  4EB9 000018C6            705      JSR MOVE_SECOND_OPCODE_HELPER
000018C6                           706  
000018C6                           707  
000018C6                           708  
000018C6                           709  MOVE_SECOND_OPCODE_HELPER
000018C6  4EB9 00001906            710      JSR PRINT_TO_SCREEN_ENTIRE_STRING
000018CC  4DF9 00001FA8            711      LEA MOVE_SIZE_PRINT_JUMP_TABLE,A6
000018D2  3638 0200                712      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
000018D6  4EB9 000019E6            713      JSR GET_THE_FIRST_NIBBLE
000018DC  C6FC 0006                714      MULU #6,D3
000018E0  4EB6 3000                715      JSR 0(A6,D3)
000018E4  4EB9 0000190E            716      JSR PRINT_DATA_MODE_SOURCE
000018EA  4EB9 00001962            717      JSR PRINT_COMMA
000018F0  4EB9 000019CE            718      JSR PRINT_EMPTY_SPACE
000018F6  4EB9 00001928            719      JSR PRINT_DATA_MODE_DESTINATION
000018FC  6100 F880                720      BSR USER_INPUT_ENTER
00001900  6000 F73C                721      BRA PARSING_OP_CODE
00001904  4E75                     722      RTS
00001906                           723  
00001906                           724  
00001906                           725  
00001906                           726  
00001906                           727  PRINT_TO_SCREEN_ENTIRE_STRING         * Simple utility method that take whatever in A1 and print out
00001906  103C 000E                728      MOVE.B  #14,D0      * This is used to print out the command as an entire string
0000190A  4E4F                     729      TRAP    #15
0000190C  4E75                     730      RTS
0000190E                           731  
0000190E                           732  PRINT_DATA_MODE_SOURCE         * Depnding on the mode, will print out appropriate data mode: Dn,An,(An),...
0000190E  4DF9 00001D62            733      LEA     REGISTER_MODE_JUMP_TABLE,A6
00001914  31F8 0400 0550           734      MOVE.W   SOURCE_VAR, THIRD_TEMP_VAR
0000191A  3638 0350                735      MOVE    SOURCE_MODE,D3
0000191E  C6FC 0006                736      MULU    #6,D3
00001922  4EB6 3000                737      JSR     0(A6,D3)       * Let's see what mode is this source mode
00001926  4E75                     738      RTS
00001928                           739  
00001928                           740  PRINT_DATA_MODE_DESTINATION
00001928  4DF9 00001D62            741      LEA     REGISTER_MODE_JUMP_TABLE,A6
0000192E  31F8 0250 0550           742      MOVE.W    DESTINATION_VAR, THIRD_TEMP_VAR      * Determine the Xn to print
00001934  3638 0300                743      MOVE.W    DESTINATION_MODE,D3
00001938  C6FC 0006                744      MULU    #6,D3
0000193C  4EB6 3000                745      JSR     0(A6,D3)
00001940  4E75                     746      RTS
00001942                           747  
00001942                           748  PRINT_ADDRESS_LOCATION        * Print out the address in which we are executing the disassembling
00001942                           749                                * Should print out 00XX YYYY as the address location
00001942                           750                                * Find a way to load the address at A2 into some variables and call print hex to ascii
00001942  2A0A                     751      MOVE.L  A2,D5
00001944  E04D                     752      LSR     #8,D5              * Shift 4 bytes left most to print out
00001946  E04D                     753      LSR     #8,D5
00001948  31C5 0200                754      MOVE.W  D5,TEMP_CURRENT_4_NIBBLES * Get the entire long address
0000194C  4EB8 10AA                755      JSR     CONVERT_HEX_TO_ASCII
00001950  3A0A                     756      MOVE.W  A2,D5
00001952  31C5 0200                757      MOVE.W  D5,TEMP_CURRENT_4_NIBBLES
00001956  4EB8 10AA                758      JSR     CONVERT_HEX_TO_ASCII
0000195A  4EB9 000019CE            759      JSR     PRINT_EMPTY_SPACE
00001960  4E75                     760      RTS
00001962                           761  
00001962                           762  
00001962                           763  PRINT_COMMA *Print the comma to separate between source and destination
00001962  43F9 000022DC            764      LEA     COMMA,A1
00001968  4EB8 1906                765      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
0000196C  4E75                     766      RTS
0000196E                           767  
0000196E                           768  PRINT_ADDRESS_REGISTER
0000196E  43F9 000022D8            769      LEA   ADDRESS_REGISTER,A1
00001974  4EB8 1906                770      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
00001978  4E75                     771      RTS
0000197A                           772  
0000197A                           773  PRINT_DATA_REGISTER
0000197A  43F9 000022D4            774      LEA    DATA_REGISTER,A1
00001980  4EB8 1906                775      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
00001984  4E75                     776      RTS
00001986                           777  
00001986                           778  PRINT_OPEN_BRACKET
00001986  43F9 000022C4            779      LEA   OPENING_BRACKET,A1
0000198C  4EB8 1906                780      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
00001990  4E75                     781      RTS
00001992                           782  
00001992                           783  PRINT_CLOSE_BRACKET
00001992  43F9 000022C8            784      LEA  CLOSING_BRACKET,A1
00001998  4EB8 1906                785      JSR  PRINT_TO_SCREEN_ENTIRE_STRING
0000199C  4E75                     786      RTS
0000199E                           787  
0000199E                           788  PRINT_PLUS_SIGN
0000199E  43F9 000022CC            789      LEA  PLUS_SIGN,A1
000019A4  4EB8 1906                790      JSR  PRINT_TO_SCREEN_ENTIRE_STRING
000019A8  4E75                     791      RTS
000019AA                           792  
000019AA                           793  PRINT_MINUS_SIGN
000019AA  43F9 000022D0            794      LEA  MINUS_SIGN,A1
000019B0  4EB8 1906                795      JSR  PRINT_TO_SCREEN_ENTIRE_STRING
000019B4  4E75                     796      RTS
000019B6                           797  
000019B6                           798  PRINT_HEX_SYMBOL
000019B6  43F9 000022E8            799      LEA   HEX_SYMBOL,A1
000019BC  4EB8 1906                800      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
000019C0  4E75                     801      RTS
000019C2                           802  
000019C2                           803  PRINT_BINARY_SYMBOL
000019C2  43F9 000022E4            804      LEA   BINARY_SYMBOL,A1
000019C8  4EB8 1906                805      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
000019CC  4E75                     806      RTS
000019CE                           807  
000019CE                           808  PRINT_EMPTY_SPACE
000019CE  43F9 000022E0            809      LEA   SPACE,A1
000019D4  4EB8 1906                810      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
000019D8  4E75                     811      RTS
000019DA                           812  
000019DA                           813  PRINT_IMMEDIATE_DATA_SYMBOL
000019DA  43F9 000022EC            814      LEA    IMMEDIATE_DATA_SYMBOL,A1
000019E0  4EB8 1906                815      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
000019E4  4E75                     816      RTS
000019E6                           817  
000019E6                           818  
000019E6                           819  
000019E6                           820  ****************************************
000019E6                           821  * Query data section
000019E6                           822  ****************************************
000019E6                           823  
000019E6                           824  GET_THE_FIRST_NIBBLE            * Get the left most byte. Assuming that the full word data is already store in D3
000019E6  E04B                     825      LSR     #8,D3               * Shift 2 bytes to the rights
000019E8  E84B                     826      LSR     #4,D3               * Shift 1 byte to the right. Now left most byte is now the right most byte
000019EA  4E75                     827      RTS
000019EC                           828  
000019EC                           829  
000019EC                           830  GET_THE_SECOND_NIBBLE
000019EC  E94B                     831      LSL     #4,D3             * Shift the left most byte to go away
000019EE  E84B                     832      LSR     #4,D3             * Return the original place
000019F0  E04B                     833      LSR     #8,D3              * Push the 2 right most byte out of the way
000019F2  4E75                     834      RTS
000019F4                           835  
000019F4                           836  GET_THE_THIRD_NIBBLE
000019F4  E14B                     837      LSL     #8,D3                * Bye byte 2 left most nibble
000019F6  E04B                     838      LSR     #8,D3                * Get rid of the 3 bytes that are infront
000019F8  E84B                     839      LSR     #4,D3                 * Shift back to original position
000019FA  4E75                     840      RTS
000019FC                           841  
000019FC                           842  GET_THE_FOURTH_NIBBLE
000019FC  E14B                     843      LSL     #8,D3
000019FE  E94B                     844      LSL     #4,D3
00001A00  E04B                     845      LSR     #8,D3
00001A02  E84B                     846      LSR     #4,D3
00001A04  4E75                     847      RTS
00001A06                           848  
00001A06                           849  GET_NEXT_FOUR_NIBBLE
00001A06  361A                     850      MOVE.W  (A2)+,D3
00001A08  31C3 0200                851      MOVE.W  D3, TEMP_CURRENT_4_NIBBLES       * Copy the value into temp variable
00001A0C  4E75                     852      RTS
00001A0E                           853  
00001A0E                           854  
00001A0E                           855  GET_NEXT_TWO_NIBBLE
00001A0E  161A                     856      MOVE.B  (A2)+,D3            * Get the next byte ( 2 nibbles)
00001A10  11C3 0750                857      MOVE.B  D3, TEMP_CURRENT_2_NIBBLES
00001A14  4E75                     858      RTS
00001A16                           859  
00001A16                           860  GET_NORMAL_SIZE                   * The normal size is on the first 2 bit of the third nibble of the op code
00001A16                           861  *    MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001A16                           862      **JSR     GET_THE_THIRD_NIBBLE           * Get the index to know which value to print
00001A16  3638 0300                863      MOVE.W  DESTINATION_MODE,D3
00001A1A  E14B                     864      LSL     #8,D3
00001A1C  ED4B                     865      LSL     #6,D3
00001A1E  E04B                     866      LSR     #8,D3
00001A20  EC4B                     867      LSR     #6,D3
00001A22  4E75                     868      RTS
00001A24                           869  **********************************
00001A24                           870  * logical reasoning section (determine what kind of opcode to print, what type of data to print)
00001A24                           871  **********************************
00001A24                           872  
00001A24                           873  
00001A24                           874  ********
00001A24                           875  * Check type data: Means getting the appropriate source and destination register  and mode
00001A24                           876  ********
00001A24                           877  CHECK_TYPE_DATA
00001A24  3638 0200                878      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001A28  E94B                     879      LSL     #4,D3      * Get rid of left most byte
00001A2A  E84B                     880      LSR     #4,D3      * Now focus on the following format      destination mode mode source. Start with destination first
00001A2C  E04B                     881      LSR     #8,D3      * Now the D3 has the destination
00001A2E  E24B                     882      LSR     #1,D3
00001A30  31C3 0250                883      MOVE.W  D3,DESTINATION_VAR
00001A34  3638 0200                884      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3 * Now go with the destination mode
00001A38  EF4B                     885      LSL     #7,D3
00001A3A  EE4B                     886      LSR     #7,D3
00001A3C  EC4B                     887      LSR     #6,D3
00001A3E  31C3 0300                888      MOVE.W  D3,DESTINATION_MODE
00001A42  3638 0200                889      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3       * Now extract the source mode
00001A46  E14B                     890      LSL     #8,D3
00001A48  E54B                     891      LSL     #2,D3
00001A4A  E04B                     892      LSR     #8,D3
00001A4C  E44B                     893      LSR     #2,D3
00001A4E  E64B                     894      LSR     #3,D3
00001A50  31C3 0350                895      MOVE.W  D3,SOURCE_MODE      * Now extract the source
00001A54  3638 0200                896      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001A58  E14B                     897      LSL     #8,D3
00001A5A  EB4B                     898      LSL     #5,D3
00001A5C  E04B                     899      LSR     #8,D3
00001A5E  EA4B                     900      LSR     #5,D3
00001A60  31C3 0400                901      MOVE.W  D3,SOURCE_VAR
00001A64  3638 0200                902      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001A68  4E75                     903      RTS
00001A6A                           904  
00001A6A                           905  
00001A6A                           906  * Now the byte of the opcode is in D3
00001A6A                           907  
00001A6A                           908  
00001A6A                           909  
00001A6A                           910  
00001A6A                           911  
00001A6A                           912  
00001A6A                           913  
00001A6A                           914  FIRST_NIBBLE_4_SECOND_NIBBLE_E        * Possible answer are NOP,JSR and RTS
00001A6A  3638 0200                915      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3       * Get the op code
00001A6E  E14B                     916      LSL     #8,D3             * Shift to the left to dissappear 2 left most byte
00001A70  E04B                     917      LSR     #8,D3             * Shift to the right to gain back original position. Only now the 2 left most byte are gone
00001A72  B63C 0071                918      CMP.B   #$71,D3           * NOP is 4E71
00001A76  6700 F77E                919      BEQ     PRINT_OUT_NOP
00001A7A  B63C 0075                920      CMP.B   #$75,D3           *RTS is 4E75
00001A7E  6700 F792                921      BEQ     PRINT_OUT_RTS
00001A82  4EB8 1A24                922      JSR     CHECK_TYPE_DATA       *  Get the destination mode and desitnation register. Could be JSR
00001A86  3638 0200                923      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001A8A  4EB8 19F4                924      JSR     GET_THE_THIRD_NIBBLE     * For Jsr  the 2 bit of the 3rd nibble is 10
00001A8E  E44B                     925      LSR     #2, D3
00001A90  B67C 0002                926      CMP     #%10, D3              *
00001A94  6700 F7B2                927      BEQ     PRINT_OUT_JSR         * Print out the command JSR and the data
00001A98  6000 F6F4                928      BRA     INVALID               * Need to implement
00001A9C  4E75                     929      RTS
00001A9E                           930  
00001A9E                           931  SECOND_NIBBLE_IS_0 * Possible to be ORI. In the case first byte is 0 as well
00001A9E  4EB8 1A0E                932      JSR     GET_NEXT_TWO_NIBBLE
00001AA2  0C38 007C 0750           933      CMP.B   #$7C, TEMP_CURRENT_2_NIBBLES            * Only ORI to SR have the last 2 bytes in op code as 7C
00001AA8  6000 F784                934      BRA     PRINT_OUT_ORI_TO_SR
00001AAC                           935  
00001AAC                           936  
00001AAC                           937  SECOND_NIBBLE_IS_E  * Possible to be NOP and RTS. In the case the first byte is 4
00001AAC  4EB8 1A0E                938      JSR GET_NEXT_TWO_NIBBLE   * Get the remaning 2 bytes
00001AB0  0C78 0071 0750           939      CMP     #$71, TEMP_CURRENT_2_NIBBLES
00001AB6  6700 F73E                940      BEQ     PRINT_OUT_NOP
00001ABA  B67C 0075                941      CMP     #$75,D3
00001ABE  6700 F752                942      BEQ     PRINT_OUT_RTS
00001AC2                           943  
00001AC2                           944  
00001AC2                           945  
00001AC2                           946  
00001AC2                           947  **************************************************
00001AC2                           948  * Specific branching of the jump table is stored here
00001AC2                           949  *************************************************
00001AC2                           950  FIRST_NIBBLE_JUMP_TABLE                  * Based on the first byte of the op code then jump on what is possible
00001AC2  4EF9 00001B22            951      JMP  FIRST_NIBBLE_IS_0               * ORI, CMPI. BCLR
00001AC8  4EF9 00001B34            952      JMP  FIRST_NIBBLE_IS_1               * MOVE.B, MOVEA.B
00001ACE  4EF9 00001B3C            953      JMP  FIRST_NIBBLE_IS_2               * MOVEA.L, MOVE.L
00001AD4  4EF9 00001B44            954      JMP  FIRST_NIBBLE_IS_3               * MOVE.W    MOVEA.W
00001ADA  4EF9 00001B4C            955      JMP  FIRST_NIBBLE_IS_4               * NOP, LEA, NEG, JSR, RTS
00001AE0  4EF9 00001B78            956      JMP  FIRST_NIBBLE_IS_5               * SUBQ
00001AE6  4EF9 00001BAE            957      JMP  FIRST_NIBBLE_IS_6               * BCS, BGE, BLT, BVC, BRA
00001AEC  4EF9 00001BD0            958      JMP  FIRST_NIBBLE_IS_7               * NOT SUPPORTED
00001AF2  4EF9 00001C2A            959      JMP  FIRST_NIBBLE_IS_8               * DIVS, OR
00001AF8  4EF9 00001C50            960      JMP  FIRST_NIBBLE_IS_9               * SUB
00001AFE  4EF9 00001C6C            961      JMP  FIRST_NIBBLE_IS_A               * NOT SUPPORTED
00001B04  4EF9 00001C72            962      JMP  FIRST_NIBBLE_IS_B               * EOR, CMP
00001B0A  4EF9 00001CA6            963      JMP  FIRST_NIBBLE_IS_C               * MULS
00001B10  4EF9 00001CDC            964      JMP  FIRST_NIBBLE_IS_D               * ADD, ADDA
00001B16  4EF9 00001CFA            965      JMP  FIRST_NIBBLE_IS_E               * LSR, LSL, ASR, ASL, ROL, ROR
00001B1C  4EF9 00001D30            966      JMP  FIRST_NIBBLE_IS_F               * NOT SUPPORTED
00001B22                           967  
00001B22                           968  FIRST_NIBBLE_IS_0             * UNFINISHED IMPLEMENTATION
00001B22  3638 0200                969      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001B26  4EB8 19EC                970      JSR     GET_THE_SECOND_NIBBLE
00001B2A  B63C 000C                971      CMP.B   #$C, D3
00001B2E  6700 F742                972      BEQ     PRINT_OUT_CMPI
00001B32  4E75                     973      RTS
00001B34                           974  
00001B34                           975  
00001B34                           976  FIRST_NIBBLE_IS_1 *MOVE.B, MOVEA.B * Can only be MOVE for these nibble because of the size of MOVE
00001B34  4EB8 1888                977      JSR MOVE_OPCODE_HELPER
00001B38  FFFF FFFF                978      SIMHALT
00001B3C                           979  
00001B3C                           980  FIRST_NIBBLE_IS_2 *MOVE.L, MOVEA.L
00001B3C  4EB8 1888                981      JSR MOVE_OPCODE_HELPER
00001B40  FFFF FFFF                982      SIMHALT
00001B44                           983  
00001B44                           984  FIRST_NIBBLE_IS_3 * MOVE.W, MOVEA.W
00001B44  4EB8 1888                985      JSR MOVE_OPCODE_HELPER
00001B48  FFFF FFFF                986      SIMHALT
00001B4C                           987  
00001B4C                           988  
00001B4C                           989  FIRST_NIBBLE_IS_4                 * Possible for NOP,LEA,RTS,JSR,NEG. Now will check the second byte
00001B4C  3638 0200                990      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3         * Get the original op code back
00001B50  4EB8 19EC                991      JSR     GET_THE_SECOND_NIBBLE
00001B54  B63C 000E                992      CMP.B   #$E,D3
00001B58  6700 FF10                993      BEQ     FIRST_NIBBLE_4_SECOND_NIBBLE_E             * NOP,RTS,JSR
00001B5C  B63C 0004                994      CMP.B   #4,D3              *  If the second nibble is 4, then it must be neg
00001B60  6700 F66A                995      BEQ     PRINT_OUT_NEG
00001B64                           996                                  * For LEA, the aestination mode must be 111 (address register)
00001B64  4EB8 1A24                997      JSR     CHECK_TYPE_DATA
00001B68  0C78 0007 0300           998      CMP     #%111,DESTINATION_MODE
00001B6E  6700 F796                999      BEQ     PRINT_OUT_LEA           * Only LEA have the 3 bits of destination is 111
00001B72  6000 F61A               1000      BRA     INVALID
00001B76  4E75                    1001      RTS
00001B78                          1002  
00001B78                          1003  FIRST_NIBBLE_IS_5                     * This is SUBQ and ADDQ
00001B78  3638 0200               1004      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001B7C  4EB8 1A24               1005      JSR    CHECK_TYPE_DATA
00001B80  4EB8 1A16               1006      JSR    GET_NORMAL_SIZE           * SUBQ and ADDQ only accpet normal size. Meaning no 11
00001B84  B67C 0003               1007      CMP    #%11,D3
00001B88  6700 F604               1008      BEQ    INVALID
00001B8C  3638 0200               1009      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001B90  4EB8 19EC               1010      JSR    GET_THE_SECOND_NIBBLE
00001B94  E14B                    1011      LSL    #8,D3           * Get rid of the first 2 byets
00001B96  EF4B                    1012      LSL    #7,D3           * Shift back to original position
00001B98  E04B                    1013      LSR    #8,D3
00001B9A  EE4B                    1014      LSR    #7,D3
00001B9C  B67C 0000               1015      CMP    #0,D3           * SUBQ have 1 as the last bit in the second nibble
00001BA0  6700 F7AC               1016      BEQ    PRINT_OUT_ADDQ     * ADDQ has 0 as the last bit in the second nibble
00001BA4  6000 F7B6               1017      BRA    PRINT_OUT_SUBQ
00001BA8  4E75                    1018      RTS
00001BAA  FFFF FFFF               1019      SIMHALT
00001BAE                          1020  
00001BAE                          1021  FIRST_NIBBLE_IS_6
00001BAE  3638 0200               1022      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001BB2  4EB8 19EC               1023      JSR     GET_THE_SECOND_NIBBLE
00001BB6  B67C 0000               1024      CMP     #%0000,D3      * Only the condition code of BRA is 0000
00001BBA  6700 FAB6               1025      BEQ     PRINT_OUT_BRA
00001BBE  B67C 0001               1026      CMP     #%0001,D3
00001BC2  6700 FAE4               1027      BEQ     PRINT_OUT_BSR
00001BC6  6000 FB16               1028      BRA     PRINT_OUT_Bcc
00001BCA                          1029  
00001BCA  4E75                    1030      RTS
00001BCC  FFFF FFFF               1031      SIMHALT
00001BD0                          1032  
00001BD0                          1033  FIRST_NIBBLE_IS_7 * This is MOVEQ
00001BD0  43F9 0000229C           1034      LEA MOVEQ_VALUE,A1
00001BD6  4EB8 1906               1035      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001BDA  4EB9 0000202E           1036      JSR PRINT_NORMAL_LONG_SUFFIX
00001BE0  3238 0200               1037      MOVE.W TEMP_CURRENT_4_NIBBLES,D1 * Save the current opcode
00001BE4  4EB8 19DA               1038      JSR PRINT_IMMEDIATE_DATA_SYMBOL
00001BE8  4EB8 19B6               1039      JSR PRINT_HEX_SYMBOL
00001BEC  3638 0200               1040      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001BF0  E14B                    1041      LSL #8,D3
00001BF2  E04B                    1042      LSR #8,D3
00001BF4  31C3 0200               1043      MOVE.W D3, TEMP_CURRENT_4_NIBBLES
00001BF8  4EB8 10AA               1044      JSR CONVERT_HEX_TO_ASCII                * Print the 8 bit data field
00001BFC  31C1 0200               1045      MOVE.W D1, TEMP_CURRENT_4_NIBBLES
00001C00  3638 0200               1046      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001C04  4EB8 1962               1047      JSR PRINT_COMMA
00001C08  4EB8 19CE               1048      JSR PRINT_EMPTY_SPACE
00001C0C  4EB8 1A24               1049      JSR CHECK_TYPE_DATA
00001C10  4EB8 197A               1050      JSR PRINT_DATA_REGISTER
00001C14  31F8 0250 0550          1051      MOVE.W DESTINATION_VAR, THIRD_TEMP_VAR
00001C1A  4EB8 12EC               1052      JSR PRINT_REGISTER_NUMBER
00001C1E  6100 F55E               1053      BSR USER_INPUT_ENTER
00001C22  6000 F41A               1054      BRA PARSING_OP_CODE
00001C26                          1055  
00001C26  FFFF FFFF               1056      SIMHALT
00001C2A                          1057  
00001C2A                          1058  FIRST_NIBBLE_IS_8 * DIVS
00001C2A  3638 0200               1059      MOVE.W TEMP_CURRENT_4_NIBBLES, D3
00001C2E  4EB8 1A24               1060      JSR CHECK_TYPE_DATA
00001C32  0C78 0007 0300          1061      CMP #%111, DESTINATION_MODE
00001C38  6700 F7A0               1062      BEQ  PRINT_OUT_DIVS
00001C3C  0C78 0003 0300          1063      CMP #%011, DESTINATION_MODE
00001C42  6700 F54A               1064      BEQ  INVALID * This is DIVU
00001C46  6000 F93A               1065      BRA PRINT_OUT_OR
00001C4A  4E75                    1066      RTS
00001C4C  FFFF FFFF               1067      SIMHALT
00001C50                          1068  
00001C50                          1069  FIRST_NIBBLE_IS_9              * SUB and SUBA           * No way of knowing SUX
00001C50  3638 0200               1070      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001C54  4EB8 1A24               1071      JSR CHECK_TYPE_DATA
00001C58  4EB8 1A16               1072      JSR GET_NORMAL_SIZE
00001C5C  B67C 0003               1073      CMP #%11,D3
00001C60  6700 F8B4               1074      BEQ PRINT_OUT_SUBA      * SUB Does not accept the size of 11
00001C64  6000 F938               1075      BRA PRINT_OUT_SUB
00001C68  FFFF FFFF               1076      SIMHALT
00001C6C                          1077  
00001C6C                          1078  FIRST_NIBBLE_IS_A
00001C6C  4E75                    1079      RTS
00001C6E  FFFF FFFF               1080      SIMHALT
00001C72                          1081  
00001C72                          1082  FIRST_NIBBLE_IS_B        * CMP
00001C72  3638 0200               1083      MOVE.W   TEMP_CURRENT_4_NIBBLES,D3
00001C76  4EB8 1A24               1084      JSR      CHECK_TYPE_DATA
00001C7A  4EB8 1A16               1085      JSR     GET_NORMAL_SIZE
00001C7E  B67C 0003               1086      CMP      #%11, D3
00001C82  6700 F50A               1087      BEQ      INVALID * CMP does not accept size 11
00001C86  3638 0200               1088      MOVE.W   TEMP_CURRENT_4_NIBBLES,D3
00001C8A  4EB8 19EC               1089      JSR      GET_THE_SECOND_NIBBLE
00001C8E  E14B                    1090      LSL     #8,D3      * Get the last bit of the second nibble
00001C90  EF4B                    1091      LSL      #7,D3
00001C92  EE4B                    1092      LSR      #7,D3
00001C94  E04B                    1093      LSR      #8,D3
00001C96  B67C 0000               1094      CMP      #0,D3        * CMP only accept 0 as the last bit in the second nibble
00001C9A  6600 F4F2               1095      BNE      INVALID
00001C9E  6000 F82A               1096      BRA      PRINT_OUT_CMP
00001CA2  FFFF FFFF               1097      SIMHALT
00001CA6                          1098  
00001CA6                          1099  FIRST_NIBBLE_IS_C          * MULS
00001CA6  3638 0200               1100      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001CAA  4EB8 1A24               1101      JSR     CHECK_TYPE_DATA
00001CAE  4EB8 1A16               1102      JSR     GET_NORMAL_SIZE
00001CB2  B67C 0003               1103      CMP     #%11,D3
00001CB6  6600 F4D6               1104      BNE     INVALID        * MULS only accept 11 as the size
00001CBA  3638 0200               1105      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001CBE  4EB8 19EC               1106      JSR     GET_THE_SECOND_NIBBLE
00001CC2  E14B                    1107      LSL     #8,D3      * Get the last bit of the second
00001CC4  EF4B                    1108      LSL      #7,D3
00001CC6  EE4B                    1109      LSR      #7,D3
00001CC8  E04B                    1110      LSR      #8,D3
00001CCA  B67C 0001               1111      CMP     #1,D3     * If it is 1, then it is MULS. Otherwise MULU
00001CCE  6700 F752               1112      BEQ     PRINT_OUT_MULS
00001CD2  6000 F7A2               1113      BRA     PRINT_OUT_MULU
00001CD6  4E75                    1114      RTS
00001CD8  FFFF FFFF               1115      SIMHALT
00001CDC                          1116  
00001CDC                          1117  FIRST_NIBBLE_IS_D *ADD, ADDA                        * Have no way of knowing ADDX
00001CDC  3638 0200               1118      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001CE0  4EB8 1A24               1119      JSR CHECK_TYPE_DATA
00001CE4  4EB8 1A16               1120      JSR GET_NORMAL_SIZE
00001CE8  B67C 0003               1121      CMP #%11,D3
00001CEC  6700 F836               1122      BEQ PRINT_OUT_ADDA
00001CF0  6000 F89E               1123      BRA PRINT_OUT_ADD
00001CF4  4E75                    1124      RTS
00001CF6  FFFF FFFF               1125      SIMHALT
00001CFA                          1126  
00001CFA                          1127  FIRST_NIBBLE_IS_E              * There are 2 types for every LSL,LSR,ASL,ASR,ROR,ROL. They can be seperated as LSd <ea> and other. They can be differentiate by the size 11
00001CFA  3638 0200               1128      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001CFE  4EB8 1A24               1129      JSR CHECK_TYPE_DATA
00001D02  4EB8 1A16               1130      JSR GET_NORMAL_SIZE
00001D06  B67C 0003               1131      CMP #%11,D3
00001D0A  6700 002A               1132      BEQ SPECIAL_SHIFT_INSTRUCTION * Only the instructions with 11 in the size parts deal with <ea> (shift memory)
00001D0E  3638 0200               1133      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001D12  4EB8 1A24               1134      JSR CHECK_TYPE_DATA
00001D16  4EB8 19F4               1135      JSR GET_THE_THIRD_NIBBLE         * For ASd and LSd, the lat bit is 0 of third nibble is 0
00001D1A  E14B                    1136      LSL     #8,D3      * Get the last bit of the second
00001D1C  EF4B                    1137      LSL      #7,D3
00001D1E  EE4B                    1138      LSR      #7,D3
00001D20  E04B                    1139      LSR      #8,D3
00001D22  B67C 0000               1140      CMP     #0,D3
00001D26  6700 FA80               1141      BEQ    PRINT_OUT_ASD_OR_LSD
00001D2A  6000 FABE               1142      BRA    PRINT_OUT_ROD           * Could also be ROXD. If it is then invalid
00001D2E  4E75                    1143      RTS
00001D30                          1144  
00001D30                          1145  
00001D30                          1146  FIRST_NIBBLE_IS_F * UNSUPPORTED
00001D30  4E75                    1147      RTS
00001D32  FFFF FFFF               1148      SIMHALT
00001D36                          1149  
00001D36                          1150  SPECIAL_SHIFT_INSTRUCTION *Asd, LSd,ROd with <ea>. Shift instructions
00001D36  3638 0200               1151      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001D3A  4EB8 1A24               1152      JSR     CHECK_TYPE_DATA
00001D3E  4EB8 19EC               1153      JSR     GET_THE_SECOND_NIBBLE
00001D42  E24B                    1154      LSR     #1, D3
00001D44  B67C 0001               1155      CMP     #1,D3
00001D48  6700 F9E2               1156      BEQ     PRINT_OUT_LOGICAL_SHIFT_MEM * 001
00001D4C  B67C 0000               1157      CMP     #0,D3
00001D50  6700 F9EC               1158      BEQ     PRINT_OUT_ARITH_SHIFT_MEM *000
00001D54  B67C 0003               1159      CMP     #%11,D3
00001D58  6700 FA3E               1160      BEQ     PRINT_OUT_ROTATE_MEM * 011
00001D5C  6000 F430               1161      BRA     INVALID * Must be ROXd, UNSUPPORTED
00001D60  4E75                    1162      RTS
00001D62                          1163  
00001D62                          1164  
00001D62                          1165  
00001D62                          1166  
00001D62                          1167  
00001D62                          1168  * Used to figure out what type of mode and address where used to print
00001D62                          1169  REGISTER_MODE_JUMP_TABLE
00001D62  4EF9 00001D92           1170      JMP REGISTER_MODE_000             * Data register mode Dn
00001D68  4EF9 00001D9C           1171      JMP REGISTER_MODE_001             * ADdress register mode   An
00001D6E  4EF9 00001DA6           1172      JMP REGISTER_MODE_010             * Indirect address register mode (An)
00001D74  4EF9 00001DB4           1173      JMP REGISTER_MODE_011             *  Address register with increment (An)+
00001D7A  4EF9 00001DBE           1174      JMP REGISTER_MODE_100             * Address register with decrement -(An)
00001D80  4EF9 00001DC8           1175      JMP REGISTER_MODE_101             * Not supported
00001D86  4EF9 00001DCA           1176      JMP REGISTER_MODE_110             * Not supported
00001D8C  4EF9 00001DCC           1177      JMP REGISTER_MODE_111             * This could be immediate, absolute short or absolute long
00001D92                          1178  
00001D92                          1179  REGISTER_MODE_000   * Print out data register Dn
00001D92  4EB8 197A               1180      JSR     PRINT_DATA_REGISTER
00001D96  4EB8 12EC               1181      JSR     PRINT_REGISTER_NUMBER
00001D9A  4E75                    1182      RTS
00001D9C                          1183  
00001D9C                          1184  REGISTER_MODE_001       * An
00001D9C  4EB8 196E               1185      JSR     PRINT_ADDRESS_REGISTER
00001DA0  4EB8 12EC               1186      JSR     PRINT_REGISTER_NUMBER
00001DA4  4E75                    1187      RTS
00001DA6                          1188  
00001DA6                          1189  REGISTER_MODE_010         * (An)
00001DA6  4EB8 1986               1190      JSR     PRINT_OPEN_BRACKET
00001DAA  4EB8 1D9C               1191      JSR     REGISTER_MODE_001
00001DAE  4EB8 1992               1192      JSR     PRINT_CLOSE_BRACKET
00001DB2  4E75                    1193      RTS
00001DB4                          1194  
00001DB4                          1195  REGISTER_MODE_011        *(An)+
00001DB4  4EB8 1DA6               1196      JSR REGISTER_MODE_010
00001DB8  4EB8 199E               1197      JSR PRINT_PLUS_SIGN
00001DBC  4E75                    1198      RTS
00001DBE                          1199  
00001DBE                          1200  REGISTER_MODE_100    * -(An)
00001DBE  4EB8 19AA               1201      JSR PRINT_MINUS_SIGN
00001DC2  4EB8 1DA6               1202      JSR REGISTER_MODE_010
00001DC6  4E75                    1203      RTS
00001DC8                          1204  
00001DC8                          1205  REGISTER_MODE_101 * Not supported yet. Will deal later
00001DC8  4E75                    1206      RTS
00001DCA                          1207  
00001DCA                          1208  REGISTER_MODE_110 * Not supported. Will deal later
00001DCA  4E75                    1209      RTS
00001DCC                          1210  
00001DCC                          1211  REGISTER_MODE_111  * Immediate data, absolute long or absolute short
00001DCC  49F9 00001E4C           1212      LEA REGISTER_111_JUMP_TABLE,A4    * Print out the appropriate value
00001DD2  3638 0550               1213      MOVE.W  THIRD_TEMP_VAR,D3
00001DD6  C6FC 0006               1214      MULU #6,D3
00001DDA  4EB4 3000               1215      JSR 0(A4,D3)
00001DDE                          1216  
00001DDE  49F9 00001DF2           1217      LEA SHORT_OR_LONG_PRINT,A4 * Prepare the table to print out the data
00001DE4                          1218  **    CMP #4, THIRD_TEMP_VAR      * Check if it is immediate data or Not
00001DE4                          1219  *    BEQ     IMMEDIATE_DATA        * This is immediate data, need to have specific check
00001DE4  3638 0550               1220      MOVE.W  THIRD_TEMP_VAR,D3
00001DE8  C6FC 0006               1221      MULU #6,D3        * Use THIRD_TEMP_VAR as a place holder for the data we want to print out for register mode 111.
00001DEC                          1222                            * In the code before this, we need to move the appropriate data into this address. Either the destination or the source
00001DEC                          1223                            *   REMEMBER TO IMPLEMENT This
00001DEC                          1224  
00001DEC  4EB4 3000               1225      JSR  0(A4,D3)     * Print out the appropriate long or short value
00001DF0  4E75                    1226      RTS
00001DF2                          1227  
00001DF2                          1228              * Third table that deal with printing out short .W or .L value
00001DF2                          1229  SHORT_OR_LONG_PRINT                     * Will jump to this when the register mode is 111 and not immediate data
00001DF2  4EF9 00001E10           1230      JMP ABSOLUTE_SHORT                  * Xn index for this is 000
00001DF8  4EF9 00001E22           1231      JMP ABSOLUTE_LONG                   * Xn index for this is 001
00001DFE  4EF9 00001E30           1232      JMP COUNTER_DISPLACEMENT
00001E04  4EF9 00001E34           1233      JMP COUNTER_INDEX
00001E0A  4EF9 00001E38           1234      JMP IMMEDIATE_DATA
00001E10                          1235  
00001E10                          1236  
00001E10                          1237  
00001E10                          1238  ABSOLUTE_SHORT     *We need to get the next 4 bytes as the address to print out
00001E10  4EB8 1A06               1239      JSR     GET_NEXT_FOUR_NIBBLE * Got next 4 nibbles to print out as address
00001E14  4EB8 10AA               1240      JSR     CONVERT_HEX_TO_ASCII
00001E18  4278 0500               1241      CLR.W   SECOND_TEMP_VAR * Reset the variables after displaying
00001E1C  4E75                    1242      RTS
00001E1E  FFFF FFFF               1243      SIMHALT
00001E22                          1244  
00001E22                          1245  ABSOLUTE_LONG       * Print the next 8 bytes as the address
00001E22  4EB8 1E10               1246      JSR ABSOLUTE_SHORT        * PRinted 4 bytes
00001E26  4EB8 1E10               1247      JSR ABSOLUTE_SHORT         * Printed 4 more
00001E2A  4E75                    1248      RTS
00001E2C  FFFF FFFF               1249      SIMHALT
00001E30                          1250  
00001E30                          1251  COUNTER_DISPLACEMENT           * Not SUPPORTED
00001E30  FFFF FFFF               1252      SIMHALT
00001E34                          1253  
00001E34                          1254  COUNTER_INDEX                  * Not SUPPORTED
00001E34  FFFF FFFF               1255      SIMHALT
00001E38                          1256  
00001E38                          1257      * Immediate data is also like absolute short and long. Will take advantage of that
00001E38                          1258  IMMEDIATE_DATA
00001E38  4EB8 1A16               1259      JSR     GET_NORMAL_SIZE  * Now the first 2 bit of third nibble is on the right most
00001E3C  E24B                    1260      LSR     #1, D3           * Byte aand word are mapped to absolute short => 00 and 01 after shift will go to 00
00001E3E                          1261                                  * If the size is long, the it will go to absolute long 10 => 01
00001E3E  49F8 1DF2               1262      LEA SHORT_OR_LONG_PRINT,A4 * Prepare the table to print out the data
00001E42  C6FC 0006               1263      MULU #6,D3        * Use THIRD_TEMP_VAR as a place holder for the data we want to print out for register mode 111.
00001E46                          1264                                * In the code before this, we need to move the appropriate data into this address. Either the destination or the source
00001E46                          1265                                *   REMEMBER TO IMPLEMENT This
00001E46  4EB4 3000               1266      JSR  0(A4,D3)     * Print out the appropriate long or short value
00001E4A  4E75                    1267      RTS
00001E4C                          1268  
00001E4C                          1269  REGISTER_111_JUMP_TABLE
00001E4C  4EF9 00001E6A           1270      JMP PRINT_SHORT_SYMBOL
00001E52  4EF9 00001E70           1271      JMP PRINT_LONG_SYMBOL
00001E58  4EF9 00001E76           1272      JMP PLACE_HOLDER_3
00001E5E  4EF9 00001E7A           1273      JMP PLACE_HOLDER_4
00001E64  4EF9 00001E7E           1274      JMP PRINT_IMMEDIATE_DATA_AND_HEX
00001E6A                          1275  
00001E6A                          1276  PRINT_SHORT_SYMBOL
00001E6A  4EB8 19B6               1277      JSR PRINT_HEX_SYMBOL
00001E6E  4E75                    1278      RTS
00001E70                          1279  
00001E70                          1280  PRINT_LONG_SYMBOL
00001E70  4EB8 19B6               1281      JSR PRINT_HEX_SYMBOL
00001E74  4E75                    1282      RTS
00001E76                          1283  
00001E76                          1284  PLACE_HOLDER_3
00001E76  FFFF FFFF               1285      SIMHALT
00001E7A                          1286  
00001E7A                          1287  PLACE_HOLDER_4
00001E7A  FFFF FFFF               1288      SIMHALT
00001E7E                          1289  
00001E7E                          1290  PRINT_IMMEDIATE_DATA_AND_HEX
00001E7E  4EB8 19DA               1291      JSR PRINT_IMMEDIATE_DATA_SYMBOL
00001E82  4EB8 19B6               1292      JSR PRINT_HEX_SYMBOL
00001E86  4E75                    1293      RTS
00001E88                          1294  
00001E88                          1295  HEX_CHARACTER_JUMP_TABLE
00001E88  4EF9 00001EE8           1296      JMP     PRINT_HEX_0
00001E8E  4EF9 00001EF4           1297      JMP     PRINT_HEX_1
00001E94  4EF9 00001F00           1298      JMP     PRINT_HEX_2
00001E9A  4EF9 00001F0C           1299      JMP     PRINT_HEX_3
00001EA0  4EF9 00001F18           1300      JMP     PRINT_HEX_4
00001EA6  4EF9 00001F24           1301      JMP     PRINT_HEX_5
00001EAC  4EF9 00001F30           1302      JMP     PRINT_HEX_6
00001EB2  4EF9 00001F3C           1303      JMP     PRINT_HEX_7
00001EB8  4EF9 00001F48           1304      JMP     PRINT_HEX_8
00001EBE  4EF9 00001F54           1305      JMP     PRINT_HEX_9
00001EC4  4EF9 00001F60           1306      JMP     PRINT_HEX_A
00001ECA  4EF9 00001F6C           1307      JMP     PRINT_HEX_B
00001ED0  4EF9 00001F78           1308      JMP     PRINT_HEX_C
00001ED6  4EF9 00001F84           1309      JMP     PRINT_HEX_D
00001EDC  4EF9 00001F90           1310      JMP     PRINT_HEX_E
00001EE2  4EF9 00001F9C           1311      JMP     PRINT_HEX_F
00001EE8                          1312  
00001EE8                          1313  PRINT_HEX_0
00001EE8  43F9 000022FC           1314          LEA ZERO,A1
00001EEE  4EB8 1906               1315          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001EF2  4E75                    1316          RTS
00001EF4                          1317  PRINT_HEX_1
00001EF4  43F9 00002300           1318          LEA ONE,A1
00001EFA  4EB8 1906               1319          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001EFE  4E75                    1320          RTS
00001F00                          1321  
00001F00                          1322  PRINT_HEX_2
00001F00  43F9 00002304           1323          LEA TWO,A1
00001F06  4EB8 1906               1324          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F0A  4E75                    1325          RTS
00001F0C                          1326  
00001F0C                          1327  PRINT_HEX_3
00001F0C  43F9 00002308           1328          LEA THREE,A1
00001F12  4EB8 1906               1329          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F16  4E75                    1330          RTS
00001F18                          1331  
00001F18                          1332  PRINT_HEX_4
00001F18  43F9 0000230C           1333          LEA FOUR,A1
00001F1E  4EB8 1906               1334          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F22  4E75                    1335          RTS
00001F24                          1336  
00001F24                          1337  PRINT_HEX_5
00001F24  43F9 00002310           1338          LEA FIVE,A1
00001F2A  4EB8 1906               1339          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F2E  4E75                    1340          RTS
00001F30                          1341  
00001F30                          1342  PRINT_HEX_6
00001F30  43F9 00002314           1343          LEA SIX,A1
00001F36  4EB8 1906               1344          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F3A  4E75                    1345          RTS
00001F3C                          1346  
00001F3C                          1347  PRINT_HEX_7
00001F3C  43F9 00002318           1348          LEA SEVEN,A1
00001F42  4EB8 1906               1349          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F46  4E75                    1350          RTS
00001F48                          1351  
00001F48                          1352  PRINT_HEX_8
00001F48  43F9 0000231C           1353          LEA EIGHT,A1
00001F4E  4EB8 1906               1354          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F52  4E75                    1355          RTS
00001F54                          1356  
00001F54                          1357  PRINT_HEX_9
00001F54  43F9 00002320           1358          LEA NINE,A1
00001F5A  4EB8 1906               1359          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F5E  4E75                    1360          RTS
00001F60                          1361  
00001F60                          1362  PRINT_HEX_A
00001F60  43F9 00002324           1363          LEA A,A1
00001F66  4EB8 1906               1364          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F6A  4E75                    1365          RTS
00001F6C                          1366  
00001F6C                          1367  PRINT_HEX_B
00001F6C  43F9 00002328           1368          LEA B,A1
00001F72  4EB8 1906               1369          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F76  4E75                    1370          RTS
00001F78                          1371  
00001F78                          1372  PRINT_HEX_C
00001F78  43F9 0000232C           1373          LEA C,A1
00001F7E  4EB8 1906               1374          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F82  4E75                    1375          RTS
00001F84                          1376  
00001F84                          1377  PRINT_HEX_D
00001F84  43F9 00002330           1378          LEA D,A1
00001F8A  4EB8 1906               1379          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F8E  4E75                    1380          RTS
00001F90                          1381  
00001F90                          1382  PRINT_HEX_E
00001F90  43F9 00002334           1383          LEA E,A1
00001F96  4EB8 1906               1384          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F9A  4E75                    1385          RTS
00001F9C                          1386  
00001F9C                          1387  PRINT_HEX_F
00001F9C  43F9 00002338           1388          LEA F,A1
00001FA2  4EB8 1906               1389          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001FA6  4E75                    1390          RTS
00001FA8                          1391  
00001FA8                          1392  MOVE_SIZE_PRINT_JUMP_TABLE
00001FA8  4EF9 00001FC0           1393      JMP UNSUPPORTED_MOVE_SIZE
00001FAE  4EF9 00001FC6           1394      JMP MOVE_BYTE_SUFFIX
00001FB4  4EF9 00001FD6           1395      JMP MOVE_LONG_SUFFIX
00001FBA  4EF9 00001FE6           1396      JMP MOVE_WORD_SUFFIX
00001FC0                          1397  
00001FC0                          1398  UNSUPPORTED_MOVE_SIZE
00001FC0  6000 F1CC               1399      BRA INVALID
00001FC4  4E75                    1400      RTS
00001FC6                          1401  
00001FC6                          1402  MOVE_BYTE_SUFFIX
00001FC6  43F9 000022F0           1403      LEA BYTE_SUFFIX,A1
00001FCC  4EB8 1906               1404      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001FD0  4EB8 19CE               1405      JSR PRINT_EMPTY_SPACE
00001FD4  4E75                    1406      RTS
00001FD6                          1407  
00001FD6                          1408  MOVE_LONG_SUFFIX
00001FD6  43F9 000022F8           1409      LEA LONG_SUFFIX,A1
00001FDC  4EB8 1906               1410      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001FE0  4EB8 19CE               1411      JSR PRINT_EMPTY_SPACE
00001FE4  4E75                    1412      RTS
00001FE6                          1413  
00001FE6                          1414  MOVE_WORD_SUFFIX
00001FE6  43F9 000022F4           1415      LEA WORD_SUFFIX,A1
00001FEC  4EB8 1906               1416      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001FF0  4EB8 19CE               1417      JSR PRINT_EMPTY_SPACE
00001FF4  4E75                    1418      RTS
00001FF6                          1419  
00001FF6                          1420  
00001FF6                          1421  NORMAL_SIZE_PRINT_JUMP_TABLE
00001FF6  4EF9 0000200E           1422      JMP PRINT_NORMAL_BYTE_SUFFIX
00001FFC  4EF9 0000201E           1423      JMP PRINT_NORMAL_WORD_SUFFIX
00002002  4EF9 0000202E           1424      JMP PRINT_NORMAL_LONG_SUFFIX
00002008  4EF9 0000203E           1425      JMP UNSUPPORTED_NORMAL_SUFFIX         * Could be move
0000200E                          1426  
0000200E                          1427  PRINT_NORMAL_BYTE_SUFFIX
0000200E  43F9 000022F0           1428      LEA BYTE_SUFFIX,A1
00002014  4EB8 1906               1429      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00002018  4EB8 19CE               1430      JSR PRINT_EMPTY_SPACE
0000201C  4E75                    1431      RTS
0000201E                          1432  
0000201E                          1433  PRINT_NORMAL_WORD_SUFFIX
0000201E  43F9 000022F4           1434      LEA WORD_SUFFIX,A1
00002024  4EB8 1906               1435      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00002028  4EB8 19CE               1436      JSR PRINT_EMPTY_SPACE
0000202C  4E75                    1437      RTS
0000202E                          1438  
0000202E                          1439  PRINT_NORMAL_LONG_SUFFIX
0000202E  43F9 000022F8           1440      LEA LONG_SUFFIX,A1
00002034  4EB8 1906               1441      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00002038  4EB8 19CE               1442      JSR PRINT_EMPTY_SPACE
0000203C  4E75                    1443      RTS
0000203E                          1444  
0000203E                          1445  UNSUPPORTED_NORMAL_SUFFIX * Could be Move to CCR 11
0000203E  6000 F14E               1446      BRA INVALID
00002042  4E75                    1447      RTS
00002044                          1448  
00002044                          1449  
00002044                          1450  *This jump table depends on the condition of Bcc
00002044                          1451  CONDITION_JUMP_TABLE
00002044  4EF9 000020A4           1452      JMP    CONDITION_TRUE
0000204A  4EF9 000020A8           1453      JMP    CONDITION_FALSE
00002050  4EF9 000020AC           1454      JMP    CONDITION_HIGHER
00002056  4EF9 000020B0           1455      JMP    CONDITION_LOWER_OR_SAME
0000205C  4EF9 000020B4           1456      JMP    CONDITION_CARRY_CLEAR
00002062  4EF9 000020B8           1457      JMP    CONDITION_CARRY_SET                * Supported
00002068  4EF9 000020C8           1458      JMP    CONDITION_NOT_EQUAL
0000206E  4EF9 000020CC           1459      JMP    CONDITION_EQUAL
00002074  4EF9 000020D0           1460      JMP    CONDITION_OVERFLOW_CLEAR            * Supported
0000207A  4EF9 000020E0           1461      JMP    CONDITION_OVERFLOW_SET
00002080  4EF9 000020E4           1462      JMP    CONDITION_PLUS
00002086  4EF9 000020E8           1463      JMP    CONDITION_MINUS
0000208C  4EF9 000020EC           1464      JMP    CONDITION_GREATER_OR_EQUAL         * Supported
00002092  4EF9 000020FC           1465      JMP    CONDITION_LESS_THAN                * SUPPORTED
00002098  4EF9 0000210C           1466      JMP    CONDITION_GREATER_THAN
0000209E  4EF9 00002110           1467      JMP    CONDITION_LESS_OR_EQUAL
000020A4                          1468  
000020A4                          1469  
000020A4                          1470  CONDITION_TRUE
000020A4  6000 F0E8               1471      BRA     INVALID
000020A8                          1472  CONDITION_FALSE
000020A8  6000 F0E4               1473      BRA     INVALID
000020AC                          1474  CONDITION_HIGHER
000020AC  6000 F0E0               1475      BRA     INVALID
000020B0                          1476  CONDITION_LOWER_OR_SAME
000020B0  6000 F0DC               1477      BRA     INVALID
000020B4                          1478  CONDITION_CARRY_CLEAR
000020B4  6000 F0D8               1479      BRA     INVALID
000020B8                          1480  
000020B8                          1481  
000020B8                          1482  
000020B8                          1483  CONDITION_CARRY_SET
000020B8  43F9 000022B6           1484      LEA     CARRY_SET_VALUE,A1
000020BE  4EB8 1906               1485      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
000020C2  4EB8 19CE               1486      JSR    PRINT_EMPTY_SPACE
000020C6  4E75                    1487      RTS
000020C8                          1488  
000020C8                          1489  
000020C8                          1490  
000020C8                          1491  
000020C8                          1492  
000020C8                          1493  
000020C8                          1494  
000020C8                          1495  CONDITION_NOT_EQUAL
000020C8  6000 F0C4               1496      BRA     INVALID
000020CC                          1497  CONDITION_EQUAL
000020CC  6000 F0C0               1498      BRA     INVALID
000020D0                          1499  
000020D0                          1500  CONDITION_OVERFLOW_CLEAR
000020D0  43F9 000022AA           1501      LEA    OVERFLOW_CLEAR_VALUE,A1
000020D6  4EB8 1906               1502      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
000020DA  4EB8 19CE               1503      JSR    PRINT_EMPTY_SPACE
000020DE  4E75                    1504      RTS
000020E0                          1505  
000020E0                          1506  
000020E0                          1507  
000020E0                          1508  CONDITION_OVERFLOW_SET
000020E0  6000 F0AC               1509      BRA     INVALID
000020E4                          1510  CONDITION_PLUS
000020E4  6000 F0A8               1511      BRA     INVALID
000020E8                          1512  CONDITION_MINUS
000020E8  6000 F0A4               1513      BRA     INVALID
000020EC                          1514  
000020EC                          1515  
000020EC                          1516  CONDITION_GREATER_OR_EQUAL
000020EC  43F9 000022AE           1517      LEA    GREATER_OR_EQUAL_VALUE,A1
000020F2  4EB8 1906               1518      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
000020F6  4EB8 19CE               1519      JSR    PRINT_EMPTY_SPACE
000020FA  4E75                    1520      RTS
000020FC                          1521  
000020FC                          1522  
000020FC                          1523  
000020FC                          1524  
000020FC                          1525  CONDITION_LESS_THAN
000020FC  43F9 000022B2           1526      LEA   LESS_THAN_VALUE,A1
00002102  4EB8 1906               1527      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
00002106  4EB8 19CE               1528      JSR   PRINT_EMPTY_SPACE
0000210A  4E75                    1529      RTS
0000210C                          1530  
0000210C                          1531  
0000210C                          1532  
0000210C                          1533  
0000210C                          1534  CONDITION_GREATER_THAN
0000210C  6000 F080               1535      BRA     INVALID
00002110                          1536  CONDITION_LESS_OR_EQUAL
00002110  6000 F07C               1537      BRA     INVALID
00002114                          1538  
00002114                          1539  RIGHT_OR_LEFT_JUMP_TABLE
00002114  4EF9 00002120           1540      JMP   RIGHT_DIRECTION_PRINT
0000211A  4EF9 0000212C           1541      JMP   LEFT_DIRECTION_PRINT
00002120                          1542  
00002120                          1543  
00002120                          1544  RIGHT_DIRECTION_PRINT
00002120  43F9 00002286           1545      LEA RIGHT_DIRECTION,A1
00002126  4EB8 1906               1546      JSR PRINT_TO_SCREEN_ENTIRE_STRING
0000212A  4E75                    1547      RTS
0000212C                          1548  
0000212C                          1549  LEFT_DIRECTION_PRINT
0000212C  43F9 00002282           1550      LEA LEFT_DIRECTION,A1
00002132  4EB8 1906               1551      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00002136  4E75                    1552      RTS
00002138                          1553  
00002138                          1554  
00002138                          1555  IMMEDIATE_OR_REGISTER_JUMP_TABLE       * Use for ASd, LSd, ROd operations
00002138  4EF9 00002144           1556      JMP   IMMEDIATE_ROTATION
0000213E  4EF9 00002172           1557      JMP   REGISTER_ROTATION
00002144                          1558  
00002144                          1559  IMMEDIATE_ROTATION
00002144  43F9 000022EC           1560      LEA IMMEDIATE_DATA_SYMBOL,A1
0000214A  4EB8 1906               1561      JSR PRINT_TO_SCREEN_ENTIRE_STRING
0000214E  3638 0200               1562      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00002152  4EB8 19EC               1563      JSR  GET_THE_SECOND_NIBBLE
00002156  E24B                    1564      LSR #1,D3
00002158  B67C 0000               1565      CMP #0,D3
0000215C  6700 003A               1566      BEQ IMMEDIATE_ROTATION_HELPER  * For cases where the immediate is 0, make it 8
00002160  31C3 0550               1567      MOVE.W D3, THIRD_TEMP_VAR * Save the immediate data 1-8 we want to print
00002164  4EB8 12EC               1568      JSR PRINT_REGISTER_NUMBER
00002168  4EB8 1962               1569      JSR PRINT_COMMA
0000216C  4EB8 19CE               1570      JSR PRINT_EMPTY_SPACE
00002170  4E75                    1571      RTS
00002172                          1572  
00002172                          1573  REGISTER_ROTATION
00002172  43F9 000022D4           1574      LEA DATA_REGISTER,A1
00002178  4EB8 1906               1575      JSR PRINT_TO_SCREEN_ENTIRE_STRING
0000217C  3638 0200               1576      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00002180  4EB8 19EC               1577      JSR GET_THE_SECOND_NIBBLE
00002184  E24B                    1578      LSR #1,D3
00002186  31C3 0550               1579      MOVE.W D3,THIRD_TEMP_VAR
0000218A  4EB8 12EC               1580      JSR PRINT_REGISTER_NUMBER
0000218E  4EB8 1962               1581      JSR PRINT_COMMA
00002192  4EB8 19CE               1582      JSR PRINT_EMPTY_SPACE
00002196  4E75                    1583      RTS
00002198                          1584  
00002198                          1585  IMMEDIATE_ROTATION_HELPER
00002198  31FC 0008 0550          1586      MOVE.W #8,THIRD_TEMP_VAR
0000219E  4EB8 12EC               1587      JSR PRINT_REGISTER_NUMBER
000021A2  4EB8 1962               1588      JSR PRINT_COMMA
000021A6  4EB8 19CE               1589      JSR PRINT_EMPTY_SPACE
000021AA  4E75                    1590      RTS
000021AC                          1591  
000021AC                          1592  
000021AC                          1593  
000021AC                          1594  ******************************************************************
000021AC                          1595  * Constant String that is used to print out the data is stored here
000021AC                          1596  ******************************************************************
000021AC= 506C 6561 7365 2...     1597  INTRO_STARTING   DC.W   'Please enter starting address',0
000021CC= 506C 6561 7365 2...     1598  INTRO_ENDING     DC.W   'Please enter ending address',0
000021EA= 494E 5641 4C49 4...     1599  INVALID_INPUT    DC.W   'INVALID ADDRESS ENTERED',0
00002204= 4E4F 5000 0000          1600  NOP_VALUE        DC.W   'NOP',0
0000220A= 5254 5300 0000          1601  RTS_VALUE        DC.W   'RTS',0
00002210= 4F52 4900 0000          1602  ORI_VALUE        DC.W   'ORI',0
00002216= 4A53 5200 0000          1603  JSR_VALUE        DC.W   'JSR',0
0000221C= 4C45 4100 0000          1604  LEA_VALUE        DC.W    'LEA',0
00002222= 4E45 4700 0000          1605  NEG_VALUE        DC.W    'NEG',0
00002228= 434D 5049 0000          1606  CMPI_VALUE      DC.W     'CMPI',0
0000222E= 434D 5000 0000          1607  CMP_VALUE        DC.W     'CMP',0
00002234= 5355 4200 0000          1608  SUB_VALUE        DC.W     'SUB',0
0000223A= 5355 4241 0000          1609  SUBA_VALUE       DC.W     'SUBA',0
00002240= 5355 4251 0000          1610  SUBQ_VALUE       DC.W    'SUBQ',0
00002246= 4449 5653 0000          1611  DIVS_VALUE       DC.W     'DIVS',0
0000224C= 4252 4100 0000          1612  BRA_VALUE        DC.W      'BRA',0
00002252= 4253 5200 0000          1613  BSR_VALUE        DC.W     'BSR',0
00002258= 4D55 4C53 0000          1614  MULS_VALUE       DC.W       'MULS',0
0000225E= 4D55 4C55 0000          1615  MULU_VALUE       DC.W       'MULU',0
00002264= 4144 4400 0000          1616  ADD_VALUE        DC.W     'ADD',0
0000226A= 4144 4441 0000          1617  ADDA_VALUE        DC.W      'ADDA',0
00002270= 4144 4451 0000          1618  ADDQ_VALUE       DC.W     'ADDQ',0
00002276= 4153 0000               1619  AS_VALUE         DC.W     'AS',0
0000227A= 4C53 0000               1620  LS_VALUE         DC.W     'LS',0
0000227E= 524F 0000               1621  RO_VALUE         DC.W     'RO',0
00002282= 4C00 0000               1622  LEFT_DIRECTION   DC.W     'L',0
00002286= 5200 0000               1623  RIGHT_DIRECTION  DC.W     'R',0
0000228A= 4F52 0000               1624  OR_VALUE         DC.W     'OR',0
0000228E= 4D4F 5645 4100 0000     1625  MOVEA_VALUE      DC.W    'MOVEA',0
00002296= 4D4F 5645 0000          1626  MOVE_VALUE       DC.W    'MOVE',0
0000229C= 4D4F 5645 5100 0000     1627  MOVEQ_VALUE      DC.W    'MOVEQ',0
000022A4= 4441 5441 0000          1628  DATA_VALUE       DC.W    'DATA',0
000022AA= 5643 0000               1629  OVERFLOW_CLEAR_VALUE     DC.W    'VC',0
000022AE= 4745 0000               1630  GREATER_OR_EQUAL_VALUE   DC.W    'GE',0
000022B2= 4C54 0000               1631  LESS_THAN_VALUE          DC.W     'LT',0
000022B6= 4353 0000               1632  CARRY_SET_VALUE          DC.W     'CS',0
000022BA= 5352 0000               1633  SR_VALUE         DC.W   'SR',0
000022BE= 4343 5200 0000          1634  CCR_VALUE        DC.W   'CCR',0
000022C4= 2800 0000               1635  OPENING_BRACKET  DC.W   '(',0
000022C8= 2900 0000               1636  CLOSING_BRACKET  DC.W   ')',0
000022CC= 2B00 0000               1637  PLUS_SIGN        DC.W   '+',0
000022D0= 2D00 0000               1638  MINUS_SIGN       DC.W   '-',0
000022D4= 4400 0000               1639  DATA_REGISTER    DC.W   'D',0
000022D8= 4100 0000               1640  ADDRESS_REGISTER DC.W   'A',0
000022DC= 2C00 0000               1641  COMMA            DC.W   ',',0
000022E0= 2000 0000               1642  SPACE            DC.W    ' ',0
000022E4= 2500 0000               1643  BINARY_SYMBOL    DC.W   '%',0
000022E8= 2400 0000               1644  HEX_SYMBOL      DC.W    '$',0
000022EC= 2300 0000               1645  IMMEDIATE_DATA_SYMBOL   DC.W    '#',0
000022F0= 2E42 0000               1646  BYTE_SUFFIX      DC.W   '.B',0
000022F4= 2E57 0000               1647  WORD_SUFFIX      DC.W    '.W',0
000022F8= 2E4C 0000               1648  LONG_SUFFIX      DC.W    '.L',0
000022FC                          1649  
000022FC= 3000 0000               1650  ZERO            DC.W    '0',0
00002300= 3100 0000               1651  ONE            DC.W     '1',0
00002304= 3200 0000               1652  TWO            DC.W     '2',0
00002308= 3300 0000               1653  THREE            DC.W   '3',0
0000230C= 3400 0000               1654  FOUR            DC.W    '4',0
00002310= 3500 0000               1655  FIVE            DC.W     '5',0
00002314= 3600 0000               1656  SIX             DC.W    '6',0
00002318= 3700 0000               1657  SEVEN           DC.W    '7',0
0000231C= 3800 0000               1658  EIGHT          DC.W     '8',0
00002320= 3900 0000               1659  NINE           DC.W     '9',0
00002324= 4100 0000               1660  A             DC.W      'A',0
00002328= 4200 0000               1661  B             DC.W      'B',0
0000232C= 4300 0000               1662  C             DC.W      'C',0
00002330= 4400 0000               1663  D            DC.W       'D',0
00002334= 4500 0000               1664  E            DC.W       'E',0
00002338= 4600 0000               1665  F            DC.W       'F',0
0000233C                          1666  
0000233C                          1667  
0000233C                          1668  
0000233C                          1669  
0000233C                          1670  
0000233C                          1671  
0000233C                          1672  
0000233C                          1673  
0000233C                          1674  
0000233C                          1675  
0000233C                          1676  
0000233C                          1677  
0000233C                          1678  
0000233C                          1679  
0000233C                          1680      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   2324
ABSOLUTE_LONG       1E22
ABSOLUTE_SHORT      1E10
ADDA_VALUE          226A
ADDQ_AND_SUBQ_HELPER  136A
ADDQ_VALUE          2270
ADDRESS_REGISTER    22D8
ADD_AND_SUB_HELPER  15AC
ADD_VALUE           2264
ASD_LSD_ROD_HELPER_FUNCTION  1810
ASD_LSD_ROD_SHIFT_HELPER  1750
AS_VALUE            2276
B                   2328
BINARY_SYMBOL       22E4
BRA_VALUE           224C
BSR_VALUE           2252
BYTE_SUFFIX         22F0
C                   232C
CARRY_SET_VALUE     22B6
CCR_VALUE           22BE
CHECK_TYPE_DATA     1A24
CHECK_VALID_ADDRESS  1024
CLOSING_BRACKET     22C8
CMPI_VALUE          2228
CMP_VALUE           222E
COMMA               22DC
CONDITION_CARRY_CLEAR  20B4
CONDITION_CARRY_SET  20B8
CONDITION_EQUAL     20CC
CONDITION_FALSE     20A8
CONDITION_GREATER_OR_EQUAL  20EC
CONDITION_GREATER_THAN  210C
CONDITION_HIGHER    20AC
CONDITION_JUMP_TABLE  2044
CONDITION_LESS_OR_EQUAL  2110
CONDITION_LESS_THAN  20FC
CONDITION_LOWER_OR_SAME  20B0
CONDITION_MINUS     20E8
CONDITION_NOT_EQUAL  20C8
CONDITION_OVERFLOW_CLEAR  20D0
CONDITION_OVERFLOW_SET  20E0
CONDITION_PLUS      20E4
CONDITION_TRUE      20A4
CONVERT_ASCII_TO_HEX  1060
CONVERT_CHARACTER_ASCII_TO_HEX  1086
CONVERT_HEX_TO_ASCII  10AA
COUNTER_DISPLACEMENT  1E30
COUNTER_INDEX       1E34
D                   2330
DATA_REGISTER       22D4
DATA_VALUE          22A4
DESTINATION_MODE    300
DESTINATION_VAR     250
DIVS_VALUE          2246
E                   2334
EIGHT               231C
ENDING_ADDRESS      150
ERROR_INVALID_INPUT  1186
F                   2338
FIFTH_TEMP_VAR      650
FINISH_CONVERT_ENDING_ADDRESS  1128
FINISH_CONVERT_STARTING_ADDRESS  110E
FIRST_NIBBLE_4_SECOND_NIBBLE_E  1A6A
FIRST_NIBBLE_IS_0   1B22
FIRST_NIBBLE_IS_1   1B34
FIRST_NIBBLE_IS_2   1B3C
FIRST_NIBBLE_IS_3   1B44
FIRST_NIBBLE_IS_4   1B4C
FIRST_NIBBLE_IS_5   1B78
FIRST_NIBBLE_IS_6   1BAE
FIRST_NIBBLE_IS_7   1BD0
FIRST_NIBBLE_IS_8   1C2A
FIRST_NIBBLE_IS_9   1C50
FIRST_NIBBLE_IS_A   1C6C
FIRST_NIBBLE_IS_B   1C72
FIRST_NIBBLE_IS_C   1CA6
FIRST_NIBBLE_IS_D   1CDC
FIRST_NIBBLE_IS_E   1CFA
FIRST_NIBBLE_IS_F   1D30
FIRST_NIBBLE_JUMP_TABLE  1AC2
FIVE                2310
FOUR                230C
FOURTH_TEMP_VAR     600
GET_END_ADDRESS     1024
GET_NEXT_FOUR_NIBBLE  1A06
GET_NEXT_TWO_NIBBLE  1A0E
GET_NORMAL_SIZE     1A16
GET_START_ADDRESS   1000
GET_THE_FIRST_NIBBLE  19E6
GET_THE_FOURTH_NIBBLE  19FC
GET_THE_SECOND_NIBBLE  19EC
GET_THE_THIRD_NIBBLE  19F4
GREATER_OR_EQUAL_VALUE  22AE
HEX_CHARACTER_JUMP_TABLE  1E88
HEX_SYMBOL          22E8
IMMEDIATE_DATA      1E38
IMMEDIATE_DATA_SYMBOL  22EC
IMMEDIATE_OR_REGISTER_JUMP_TABLE  2138
IMMEDIATE_ROTATION  2144
IMMEDIATE_ROTATION_HELPER  2198
INTRO_ENDING        21CC
INTRO_STARTING      21AC
INVALID             118E
INVALID_ENDING_ADDRESS  1168
INVALID_INPUT       21EA
INVALID_STARTING_ADDRESS  1152
JSR_VALUE           2216
LEA_VALUE           221C
LEFT_DIRECTION      2282
LEFT_DIRECTION_PRINT  212C
LESS_THAN_VALUE     22B2
LONG_SUFFIX         22F8
LS_VALUE            227A
MINUS_SIGN          22D0
MOVEA_VALUE         228E
MOVEQ_VALUE         229C
MOVE_BYTE_SUFFIX    1FC6
MOVE_LONG_SUFFIX    1FD6
MOVE_OPCODE_HELPER  1888
MOVE_SECOND_OPCODE_HELPER  18C6
MOVE_SIZE_PRINT_JUMP_TABLE  1FA8
MOVE_VALUE          2296
MOVE_WORD_SUFFIX    1FE6
MULS_VALUE          2258
MULU_VALUE          225E
NEG_VALUE           2222
NINE                2320
NOP_VALUE           2204
NORMAL_SIZE_PRINT_JUMP_TABLE  1FF6
ONE                 2300
OPENING_BRACKET     22C4
ORI_VALUE           2210
OR_VALUE            228A
OVERFLOW_CLEAR_VALUE  22AA
PARSING_OP_CODE     103E
PLACE_HOLDER_3      1E76
PLACE_HOLDER_4      1E7A
PLUS_SIGN           22CC
PREPARE_START_AND_END_ADDRESS  10FC
PRINT_ADDRESS_LOCATION  1942
PRINT_ADDRESS_REGISTER  196E
PRINT_BINARY_SYMBOL  19C2
PRINT_CLOSE_BRACKET  1992
PRINT_COMMA         1962
PRINT_DATA_MODE_DESTINATION  1928
PRINT_DATA_MODE_SOURCE  190E
PRINT_DATA_REGISTER  197A
PRINT_EMPTY_SPACE   19CE
PRINT_HEX_0         1EE8
PRINT_HEX_1         1EF4
PRINT_HEX_2         1F00
PRINT_HEX_3         1F0C
PRINT_HEX_4         1F18
PRINT_HEX_5         1F24
PRINT_HEX_6         1F30
PRINT_HEX_7         1F3C
PRINT_HEX_8         1F48
PRINT_HEX_9         1F54
PRINT_HEX_A         1F60
PRINT_HEX_B         1F6C
PRINT_HEX_C         1F78
PRINT_HEX_D         1F84
PRINT_HEX_E         1F90
PRINT_HEX_F         1F9C
PRINT_HEX_SYMBOL    19B6
PRINT_IMMEDIATE_DATA_AND_HEX  1E7E
PRINT_IMMEDIATE_DATA_SYMBOL  19DA
PRINT_LONG_SYMBOL   1E70
PRINT_MINUS_SIGN    19AA
PRINT_NORMAL_BYTE_SUFFIX  200E
PRINT_NORMAL_LONG_SUFFIX  202E
PRINT_NORMAL_SUFFIX  12CE
PRINT_NORMAL_WORD_SUFFIX  201E
PRINT_OPEN_BRACKET  1986
PRINT_OUT_ADD       1590
PRINT_OUT_ADDA      1524
PRINT_OUT_ADDQ      134E
PRINT_OUT_ARITH_SHIFT_MEM  173E
PRINT_OUT_ASD       17C6
PRINT_OUT_ASD_OR_LSD  17A8
PRINT_OUT_BCC       16DE
PRINT_OUT_BRA       1672
PRINT_OUT_BSR       16A8
PRINT_OUT_CMP       14CA
PRINT_OUT_CMPI      1272
PRINT_OUT_DIVS      13DA
PRINT_OUT_JSR       1248
PRINT_OUT_LEA       1306
PRINT_OUT_LOGICAL_SHIFT_MEM  172C
PRINT_OUT_LSD       17D8
PRINT_OUT_MOVE      18B6
PRINT_OUT_MOVEA     18A2
PRINT_OUT_MULS      1422
PRINT_OUT_MULU      1476
PRINT_OUT_NEG       11CC
PRINT_OUT_NOP       11F6
PRINT_OUT_OR        1582
PRINT_OUT_ORI_TO_SR  122E
PRINT_OUT_ROD       17EA
PRINT_OUT_ROTATE_MEM  1798
PRINT_OUT_RTS       1212
PRINT_OUT_SUB       159E
PRINT_OUT_SUBA      1516
PRINT_OUT_SUBQ      135C
PRINT_PLUS_SIGN     199E
PRINT_REGISTER_NUMBER  12EC
PRINT_SHORT_SYMBOL  1E6A
PRINT_TO_SCREEN_ENTIRE_STRING  1906
REGISTER_111_JUMP_TABLE  1E4C
REGISTER_MODE_000   1D92
REGISTER_MODE_001   1D9C
REGISTER_MODE_010   1DA6
REGISTER_MODE_011   1DB4
REGISTER_MODE_100   1DBE
REGISTER_MODE_101   1DC8
REGISTER_MODE_110   1DCA
REGISTER_MODE_111   1DCC
REGISTER_MODE_JUMP_TABLE  1D62
REGISTER_NUMBER_TO_PRINT  700
REGISTER_ROTATION   2172
RESET_INVALID_COUNTER  11C6
RIGHT_DIRECTION     2286
RIGHT_DIRECTION_PRINT  2120
RIGHT_OR_LEFT_JUMP_TABLE  2114
RO_VALUE            227E
RTS_VALUE           220A
SECOND_NIBBLE_IS_0  1A9E
SECOND_NIBBLE_IS_E  1AAC
SECOND_TEMP_VAR     500
SEVEN               2318
SHORT_OR_LONG_PRINT  1DF2
SIX                 2314
SIZE                450
SOURCE_MODE         350
SOURCE_VAR          400
SPACE               22E0
SPECIAL_SHIFT_INSTRUCTION  1D36
SR_VALUE            22BA
START               1000
STARTING_ADDRESS    100
SUBA_AND_ADDA_HELPER  1532
SUBA_VALUE          223A
SUBQ_HELPER_FUNCTION  13B6
SUBQ_VALUE          2240
SUB_HELPER_FUNCTION  15F8
SUB_HELPER_REGISTER_TO_MEM  1650
SUB_VALUE           2234
TEMP_CURRENT_2_NIBBLES  750
TEMP_CURRENT_4_NIBBLES  200
THIRD_TEMP_VAR      550
THREE               2308
TWO                 2304
UNSUPPORTED_MOVE_SIZE  1FC0
UNSUPPORTED_NORMAL_SUFFIX  203E
USER_INPUT_ENTER    117E
WORD_SUFFIX         22F4
ZERO                22FC
