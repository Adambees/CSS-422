00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/10/2018 1:35:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : First simple implementation of printing out NOP
00000000                             3  * Written by : Thuan Tran
00000000                             4  * Date       : Feb 25th,2018
00000000                             5  * Description: Load the test program in prototype, testNop. Enter starting and ending address. Expected to print out NOP
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  *** A2 will be used as the address in which it will iterate through all the way until ending adrress
00000000                             9  
00000000  =00000100                 10  STARTING_ADDRESS            EQU    $100 * User input starting address
00000000  =00000150                 11  ENDING_ADDRESS              EQU    $150 * User input ending address
00000000  =00000200                 12  TEMP_CURRENT_4_NIBBLES      EQU    $200 * Temporary variables to start decode
00000000  =00000250                 13  DESTINATION_VAR             EQU    $250 * Used to hold the Address number
00000000  =00000300                 14  DESTINATION_MODE            EQU    $300 * Used to hold the mode of destination
00000000  =00000350                 15  SOURCE_MODE                 EQU    $350 * used to hold the mode of the source
00000000  =00000400                 16  SOURCE_VAR                  EQU    $400 * Used to hold the address number of source
00000000  =00000450                 17  SIZE                        EQU    $450 * Used to hold the size: 00,01 or 10 stuff
00000000  =00000500                 18  SECOND_TEMP_VAR             EQU    $500 * Can either be used to hold source var or destination var for print out
00000000  =00000550                 19  THIRD_TEMP_VAR              EQU    $550
00000000  =00000600                 20  FOURTH_TEMP_VAR             EQU    $600
00000000  =00000650                 21  FIFTH_TEMP_VAR              EQU    $650
00000000  =00000700                 22  REGISTER_NUMBER_TO_PRINT    EQU    $700
00000000  =00000750                 23  TEMP_CURRENT_2_NIBBLES      EQU    $750
00000000                            24  
00001000                            25      ORG    $1000
00001000                            26  START:                  ; first instruction of program
00001000                            27  
00001000                            28  
00001000                            29  *************************
00001000                            30  * Input and parsing op code section
00001000                            31  *************************
00001000                            32  
00001000                            33  GET_START_ADDRESS
00001000  43F9 000020EE             34      LEA INTRO_STARTING,A1  * Welcome the user
00001006  103C 000D                 35      MOVE.B  #13,D0         * Nice to have carry and line feed
0000100A  4E4F                      36      TRAP    #15
0000100C                            37  
0000100C  227C 00000000             38      MOVEA.L   #0,A1         * Clear what is in A1
00001012  43F8 0650                 39      LEA FIFTH_TEMP_VAR,A1
00001016  4240                      40      CLR     D0
00001018  4241                      41      CLR     D1
0000101A  103C 0002                 42      MOVE.B  #2,D0          * Get a string input that represent the user
0000101E  4E4F                      43      TRAP    #15
00001020                            44  
00001020  6000 003E                 45      BRA     CONVERT_ASCII_TO_HEX
00001024                            46  
00001024                            47  CHECK_VALID_ADDRESS
00001024                            48  
00001024                            49  
00001024                            50  
00001024                            51  GET_END_ADDRESS
00001024  43F9 0000210E             52      LEA INTRO_ENDING,A1         * Now time to get the ending address
0000102A  103C 000D                 53      MOVE.B  #13,D0
0000102E  4E4F                      54      TRAP    #15
00001030                            55  
00001030  43F8 0600                 56      LEA     FOURTH_TEMP_VAR,A1
00001034  103C 0002                 57      MOVE.B  #2,D0
00001038  4E4F                      58      TRAP    #15
0000103A                            59  
0000103A  6000 0024                 60      BRA     CONVERT_ASCII_TO_HEX
0000103E                            61  
0000103E                            62  PARSING_OP_CODE * Decode the first four byte. Will go throug each 2 bytes at a time
0000103E  4EB9 00001884             63      JSR       PRINT_ADDRESS_LOCATION
00001044  4EB9 00001948             64      JSR       GET_NEXT_FOUR_NIBBLE
0000104A  3638 0200                 65      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
0000104E  4EB9 00001928             66      JSR       GET_THE_FIRST_NIBBLE
00001054                            67  
00001054  C6FC 0006                 68      MULU      #6,D3
00001058  4EB0 3000                 69      JSR       0(A0,D3)          * Jump to the table depemding on first nibble
0000105C  FFFF FFFF                 70      SIMHALT
00001060                            71  
00001060                            72  
00001060                            73  CONVERT_ASCII_TO_HEX            * ascii table http://www.asciitable.com/
00001060  1019                      74      MOVE.B (A1)+,D0       * Go through each byte of the address
00001062  B03C 0030                 75      CMP.B   #$30,D0       * Valid data are from $30 - $39 ( 0-9) and $41 - $46 (A-F)
00001066  6D00 011E                 76      BLT    ERROR_INVALID_INPUT
0000106A  B03C 0039                 77      CMP.B   #$39,D0          * check if in the range number of hex character
0000106E  6E00 0016                 78      BGT    CONVERT_CHARACTER_ASCII_TO_HEX
00001072  0400 0030                 79      SUB.B   #$30,D0     * Get the hex range from '0-9'
00001076  D680                      80      ADD.L   D0,D3
00001078  5341                      81      SUBI    #1,D1          * Decrement the counter for length of address
0000107A  B23C 0000                 82      CMP.B   #0,D1
0000107E  6700 008E                 83      BEQ     FINISH_CONVERT_STARTING_ADDRESS
00001082  E98B                      84      LSL.L   #4,D3
00001084  60DA                      85      BRA     CONVERT_ASCII_TO_HEX
00001086                            86  
00001086                            87  CONVERT_CHARACTER_ASCII_TO_HEX
00001086  B03C 0041                 88      CMP.B   #$41,D0                        * At this point, the data must be larger than number
0000108A  6D00 00FA                 89      BLT     ERROR_INVALID_INPUT            * Only $41 - 46 are valid
0000108E  B03C 0046                 90      CMP.B   #$46,D0
00001092  6E00 00F2                 91      BGT     ERROR_INVALID_INPUT             * Greater than $46, nope
00001096  0400 0037                 92      SUB.B   #$37,D0                         * Get the A-F value
0000109A  D680                      93      ADD.L   D0,D3                           * Save the value
0000109C  5341                      94      SUBI    #1,D1                           * Decrement the counter
0000109E  B23C 0000                 95      CMP.B   #0,D1
000010A2  6700 006A                 96      BEQ     FINISH_CONVERT_STARTING_ADDRESS
000010A6  E98B                      97      LSL.L   #4,D3                           * Shift the value to the left 4 bits to save room for another byte
000010A8  60B6                      98      BRA     CONVERT_ASCII_TO_HEX
000010AA                            99  
000010AA                           100  
000010AA                           101  CONVERT_HEX_TO_ASCII                       * Usually call when printing out address in memory to console
000010AA                           102                                             * Convert 4 nibblees (2 bytes at a time). Each 1 nibble
000010AA                           103                                             * Variables: TEMP_CURRENT_4_NIBBLES
000010AA                           104                 * Reset the index that is used to jump table
000010AA  49F9 00001DCA            105      LEA      HEX_CHARACTER_JUMP_TABLE,A4            * Load the table to print out ascii charracter
000010B0  3638 0200                106      MOVE.W   TEMP_CURRENT_4_NIBBLES,D3
000010B4  4EB9 00001928            107      JSR     GET_THE_FIRST_NIBBLE * Get the left most hex value and convert
000010BA  C6FC 0006                108      MULU    #6,D3
000010BE  4EB4 3000                109      JSR     0(A4,D3)
000010C2  3638 0200                110      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000010C6  4EB9 0000192E            111      JSR     GET_THE_SECOND_NIBBLE
000010CC  C6FC 0006                112      MULU    #6,D3
000010D0  4EB4 3000                113      JSR     0(A4,D3)
000010D4  3638 0200                114      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000010D8  4EB9 00001936            115      JSR     GET_THE_THIRD_NIBBLE
000010DE  C6FC 0006                116      MULU    #6,D3
000010E2  4EB4 3000                117      JSR     0(A4,D3)
000010E6  3638 0200                118      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000010EA  4EB9 0000193E            119      JSR     GET_THE_FOURTH_NIBBLE
000010F0  C6FC 0006                120      MULU    #6,D3
000010F4  4EB4 3000                121      JSR     0(A4,D3)
000010F8  4243                     122      CLR.W   D3
000010FA  4E75                     123      RTS
000010FC                           124  
000010FC                           125  
000010FC                           126  
000010FC                           127  PREPARE_START_AND_END_ADDRESS * When finish getting the ending adress, will load data into address regist
000010FC  41F9 00001A04            128      LEA         FIRST_NIBBLE_JUMP_TABLE,A0
00001102  2478 0100                129      MOVE.L      STARTING_ADDRESS,A2
00001106  2678 0150                130      MOVE.L      ENDING_ADDRESS,A3
0000110A  6000 FF32                131      BRA         PARSING_OP_CODE * Start parsing the opcode now
0000110E                           132  
0000110E                           133  FINISH_CONVERT_STARTING_ADDRESS
0000110E  0803 0000                134      BTST    #0,D3 * The the last bit of the address to see if it is even or odd
00001112  6600 003E                135      BNE     INVALID_STARTING_ADDRESS
00001116  B47C 0001                136      CMP     #1,D2                      * Check if we are doing starting or ending address
0000111A  6700 000C                137      BEQ     FINISH_CONVERT_ENDING_ADDRESS
0000111E  5242                     138      ADDI    #1,D2 * Counter to make sure that we are doing the ending address
00001120  21C3 0100                139      MOVE.L  D3,STARTING_ADDRESS
00001124  6000 FEFE                140      BRA     GET_END_ADDRESS
00001128                           141  
00001128                           142  FINISH_CONVERT_ENDING_ADDRESS
00001128  0803 0000                143      BTST    #0,D3        * Check for odd address
0000112C  6600 003A                144      BNE     INVALID_ENDING_ADDRESS
00001130  B678 0100                145      CMP     STARTING_ADDRESS, D3       * Check if the ending address is less than or equal starting address
00001134  6C00 0032                146      BGE     INVALID_ENDING_ADDRESS
00001138  4242                     147      CLR.W   D2       * Clear the second data register for future use
0000113A  21C3 0150                148      MOVE.L  D3,ENDING_ADDRESS
0000113E  4243                     149      CLR.W   D3
00001140  43F9 0000221C            150      LEA     SPACE,A1
00001146  103C 000D                151      MOVE.B  #13,D0
0000114A  4E4F                     152      TRAP    #15
0000114C  60AE                     153      BRA     PREPARE_START_AND_END_ADDRESS
0000114E  FFFF FFFF                154      SIMHALT
00001152                           155  
00001152                           156  INVALID_STARTING_ADDRESS
00001152  227C 00000000            157      MOVEA.L   #0,A1
00001158  43F9 0000212C            158      LEA INVALID_INPUT,A1
0000115E  103C 000D                159      MOVE.B #13,D0
00001162  4E4F                     160      TRAP #15
00001164  6000 FE9A                161      BRA GET_START_ADDRESS
00001168                           162  
00001168                           163  INVALID_ENDING_ADDRESS
00001168  227C 00000000            164      MOVEA.L   #0,A1
0000116E  43F9 0000212C            165      LEA INVALID_INPUT,A1
00001174  103C 000D                166      MOVE.B #13,D0
00001178  4E4F                     167      TRAP #15
0000117A  6000 FEA8                168      BRA GET_END_ADDRESS
0000117E                           169  
0000117E                           170  USER_INPUT_ENTER  * Wait for the user to press enter to continue
0000117E  103C 0005                171      MOVE.B  #5,D0
00001182  4E4F                     172      TRAP #15
00001184  4E75                     173      RTS
00001186                           174  
00001186                           175  
00001186                           176  *************************************************
00001186                           177  * Print to console section
00001186                           178  *************************************************
00001186                           179  
00001186                           180  
00001186                           181  
00001186                           182  
00001186                           183  
00001186                           184  
00001186                           185  
00001186                           186  * Could be used to detect non aligned starting address and ending address
00001186                           187  ERROR_INVALID_INPUT
00001186  B47C 0001                188      CMP #1,D2
0000118A  67DC                     189      BEQ INVALID_ENDING_ADDRESS
0000118C  60C4                     190      BRA INVALID_STARTING_ADDRESS
0000118E                           191  
0000118E                           192  INVALID                         * UNSUPPORTED OR INVALID INSTRUCTION. PRINT OUT LOCATIO AND DATA
0000118E  4E75                     193      RTS
00001190                           194  
00001190                           195  PRINT_OUT_NEG                     * Check the 8-6 bits of NEG and LEA. For NEG, the 8-6 bits are 0S where S is the size. For LEA, it is 111
00001190  43F9 00002164            196      LEA      NEG_VALUE,A1            * Print NEG to screen
00001196  4EB9 00001848            197      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
0000119C  4EB9 00001274            198      JSR     PRINT_NORMAL_SUFFIX
000011A2                           199                                              * Now print the source mode and data mode
000011A2  4EB9 00001966            200      JSR     CHECK_TYPE_DATA             * Extract the mode and register
000011A8  4EB9 00001850            201      JSR     PRINT_DATA_MODE_SOURCE
000011AE  61CE                     202      BSR     USER_INPUT_ENTER
000011B0  6000 FE8C                203      BRA     PARSING_OP_CODE
000011B4  4E75                     204      RTS
000011B6                           205  
000011B6                           206  PRINT_OUT_NOP
000011B6  43F9 00002146            207      LEA     NOP_VALUE,A1 * Display the NOP message
000011BC  4EB9 00001848            208      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
000011C2  61BA                     209      BSR     USER_INPUT_ENTER
000011C4  6000 FE78                210      BRA     PARSING_OP_CODE
000011C8  FFFF FFFF                211      SIMHALT             ; halt simulator
000011CC                           212  
000011CC                           213  PRINT_OUT_RTS
000011CC  43F9 0000214C            214      LEA     RTS_VALUE,A1
000011D2  4EB9 00001848            215      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
000011D8  61A4                     216      BSR     USER_INPUT_ENTER
000011DA  6000 FE62                217      BRA     PARSING_OP_CODE
000011DE  FFFF FFFF                218      SIMHALT
000011E2                           219  
000011E2                           220  PRINT_OUT_ORI_TO_SR
000011E2  43F9 00002152            221      LEA     ORI_VALUE,A1
000011E8  4EB9 00001848            222      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
000011EE  618E                     223      BSR     USER_INPUT_ENTER
000011F0  6000 FE4C                224      BRA     PARSING_OP_CODE
000011F4  4E75                     225      RTS
000011F6                           226  
000011F6                           227  PRINT_OUT_JSR
000011F6  43F9 00002158            228      LEA      JSR_VALUE,A1
000011FC  4EB9 00001848            229      JSR      PRINT_TO_SCREEN_ENTIRE_STRING * Now query what type of data to print out, source or destination
00001202  4EB9 00001910            230      JSR      PRINT_EMPTY_SPACE
00001208  4EB9 00001966            231      JSR     CHECK_TYPE_DATA
0000120E  4EB9 00001850            232      JSR     PRINT_DATA_MODE_SOURCE          * Print the M and N of the last 6 bits
00001214  6100 FF68                233      BSR     USER_INPUT_ENTER
00001218  6000 FE24                234      BRA     PARSING_OP_CODE
0000121C                           235  
0000121C                           236  
0000121C                           237  
0000121C                           238  PRINT_OUT_CMPI                             * Dtermine the size to print out CMPI
0000121C  43F9 0000216A            239      LEA     CMPI_VALUE,A1                  * Print out the literal value
00001222  4EB9 00001848            240      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001228  4EB9 00001966            241      JSR     CHECK_TYPE_DATA
0000122E  4EB9 00001274            242      JSR     PRINT_NORMAL_SUFFIX
00001234  4EB9 00001910            243      JSR     PRINT_EMPTY_SPACE
0000123A  4EB9 0000191C            244      JSR     PRINT_IMMEDIATE_DATA_SYMBOL
00001240  4EB9 00001958            245      JSR     GET_NORMAL_SIZE               * Get the size of the operation to know how much byte should we advance forward
00001246  E24B                     246      LSR     #1, D3                        * For cmpi.b and cmpi.w, they all map to absolute short in which print only 4
00001248  31C3 0550                247      MOVE.W  D3, THIRD_TEMP_VAR
0000124C  4EB9 00001966            248      JSR     CHECK_TYPE_DATA              * Now byte and word will be printed 4 space where as long will be printed 5 space
00001252  4EB9 00001D0E            249      JSR     REGISTER_MODE_111            * Print out the immediate value
00001258  4EB9 000018A4            250      JSR     PRINT_COMMA
0000125E  4EB9 00001910            251      JSR     PRINT_EMPTY_SPACE
00001264  4EB9 00001850            252      JSR     PRINT_DATA_MODE_SOURCE
0000126A  6100 FF12                253      BSR     USER_INPUT_ENTER
0000126E  6000 FDCE                254      BRA     PARSING_OP_CODE
00001272  4E75                     255      RTS
00001274                           256  
00001274                           257  
00001274                           258  
00001274                           259  PRINT_NORMAL_SUFFIX                       * For normal size, the size is on the first 2 bit of the third nibble
00001274                           260                                  * Get rid of the 2 right most bit of the third nibble
00001274  4EB9 00001958            261      JSR     GET_NORMAL_SIZE
0000127A  49F9 00001F38            262      LEA     NORMAL_SIZE_PRINT_JUMP_TABLE,A4
00001280  B67C 0003                263      CMP     #%11,D3                      * For normal size, does not take 11
00001284  6700 FF08                264      BEQ     INVALID
00001288  C6FC 0006                265      MULU    #6,D3
0000128C  4EB4 3000                266      JSR     0(A4,D3)                       * Print out appropriate suffix
00001290  4E75                     267      RTS
00001292                           268  
00001292                           269  
00001292                           270  ** STORE DATA INTO THIRD_TEMP_VAR FIRST.DEPENDING ON SOURCE OR DESTINATION REGISTER
00001292                           271  
00001292                           272  PRINT_REGISTER_NUMBER           * This is used to print the register number Dn or An where it will print n
00001292                           273                                  * Expected to store the data into D3 first
00001292  49F9 00001DCA            274      LEA  HEX_CHARACTER_JUMP_TABLE,A4
00001298  3638 0550                275      MOVE.W  THIRD_TEMP_VAR,D3
0000129C  C6FC 0006                276      MULU    #6,D3
000012A0  4EB4 3000                277      JSR     0(A4,D3)
000012A4  4278 0550                278      CLR.W THIRD_TEMP_VAR
000012A8  4243                     279      CLR.W D3
000012AA  4E75                     280      RTS
000012AC                           281  
000012AC                           282  PRINT_OUT_LEA
000012AC  43F9 0000215E            283      LEA LEA_VALUE,A1
000012B2  4EB9 00001848            284      JSR PRINT_TO_SCREEN_ENTIRE_STRING
000012B8  4EB9 00001910            285      JSR PRINT_EMPTY_SPACE
000012BE  4EB9 00001966            286      JSR CHECK_TYPE_DATA
000012C4  4EB9 00001850            287      JSR PRINT_DATA_MODE_SOURCE
000012CA  4EB9 000018A4            288      JSR PRINT_COMMA
000012D0  4EB9 00001910            289      JSR PRINT_EMPTY_SPACE
000012D6  4EB9 000018B0            290      JSR PRINT_ADDRESS_REGISTER
000012DC  31F8 0250 0550           291      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR * Store the register number to print
000012E2  4EB8 1292                292      JSR PRINT_REGISTER_NUMBER
000012E6  6100 FE96                293      BSR USER_INPUT_ENTER
000012EA  6000 FD52                294      BRA PARSING_OP_CODE
000012EE  4E75                     295      RTS
000012F0                           296  
000012F0                           297  PRINT_OUT_ADDQ             * ADDQ is the same as SUBQ
000012F0  43F9 000021B2            298      LEA ADDQ_VALUE,A1
000012F6  6000 000C                299      BRA ADDQ_AND_SUBQ_HELPER
000012FA                           300  
000012FA                           301  PRINT_OUT_SUBQ                              * SUBQ does not accept 0. working on a way to print out 8
000012FA  43F9 00002182            302      LEA SUBQ_VALUE,A1
00001300  6000 0002                303      BRA ADDQ_AND_SUBQ_HELPER
00001304                           304  
00001304                           305  ADDQ_AND_SUBQ_HELPER
00001304  4EB9 00001848            306      JSR PRINT_TO_SCREEN_ENTIRE_STRING
0000130A  4EB8 1274                307      JSR PRINT_NORMAL_SUFFIX
0000130E  4EB9 00001910            308      JSR PRINT_EMPTY_SPACE
00001314  4EB9 0000191C            309      JSR PRINT_IMMEDIATE_DATA_SYMBOL
0000131A  4EB9 00001966            310      JSR CHECK_TYPE_DATA
00001320  0C78 0000 0250           311      CMP #0, DESTINATION_VAR                * In the case of 8, the destination var is 000. But we want to print out 8
00001326  6700 0028                312      BEQ SUBQ_HELPER_FUNCTION
0000132A  31F8 0250 0550           313      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR     * Save the value to print out from print register number
00001330  4EB8 1292                314      JSR PRINT_REGISTER_NUMBER              * Print out the data from 1-8
00001334  4EB9 000018A4            315      JSR PRINT_COMMA
0000133A  4EB9 00001910            316      JSR PRINT_EMPTY_SPACE
00001340  4EB9 00001850            317      JSR PRINT_DATA_MODE_SOURCE
00001346  6100 FE36                318      BSR USER_INPUT_ENTER
0000134A  6000 FCF2                319      BRA PARSING_OP_CODE
0000134E  4E75                     320      RTS
00001350                           321  
00001350                           322  SUBQ_HELPER_FUNCTION                         * Single function that exist to help with printing oout the data in SUBQ
00001350  31FC 0008 0550           323      MOVE.W #8, THIRD_TEMP_VAR
00001356  4EB8 1292                324      JSR PRINT_REGISTER_NUMBER
0000135A  4EB9 000018A4            325      JSR PRINT_COMMA
00001360  4EB9 00001910            326      JSR PRINT_EMPTY_SPACE
00001366  4EB9 00001850            327      JSR PRINT_DATA_MODE_SOURCE
0000136C  6100 FE10                328      BSR USER_INPUT_ENTER
00001370  6000 FCCC                329      BRA PARSING_OP_CODE
00001374                           330  
00001374                           331  PRINT_OUT_DIVS
00001374  43F9 00002188            332      LEA DIVS_VALUE,A1
0000137A  4EB9 00001848            333      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001380  4EB9 00001F60            334      JSR PRINT_NORMAL_WORD_SUFFIX
00001386  4EB9 00001910            335      JSR PRINT_EMPTY_SPACE
0000138C  4EB9 00001850            336      JSR PRINT_DATA_MODE_SOURCE
00001392  4EB9 000018A4            337      JSR PRINT_COMMA
00001398  4EB9 00001910            338      JSR PRINT_EMPTY_SPACE
0000139E  4EB9 000018BC            339      JSR PRINT_DATA_REGISTER
000013A4  31F8 0250 0550           340      MOVE.W DESTINATION_VAR, THIRD_TEMP_VAR      * Store the register number Dn to print out
000013AA  4EB8 1292                341      JSR PRINT_REGISTER_NUMBER
000013AE  6100 FDCE                342      BSR USER_INPUT_ENTER
000013B2  6000 FC8A                343      BRA PARSING_OP_CODE
000013B6  4E75                     344      RTS
000013B8                           345  
000013B8                           346  PRINT_OUT_MULS                      * MULS also act like sub for <ea>,Dn * FIX
000013B8  43F9 0000219A            347      LEA   MULS_VALUE,A1
000013BE  4EB9 00001848            348      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
000013C4  4EB9 00001F60            349      JSR   PRINT_NORMAL_WORD_SUFFIX
000013CA  4EB9 00001910            350      JSR   PRINT_EMPTY_SPACE
000013D0  4EB9 00001966            351      JSR     CHECK_TYPE_DATA
000013D6  31FC 0001 0300           352    MOVE.W  #%01, DESTINATION_MODE      * Change the size of the 2 size bit to print out
000013DC  4EB9 00001850            353      JSR  PRINT_DATA_MODE_SOURCE
000013E2  4EB9 000018A4            354      JSR     PRINT_COMMA
000013E8  4EB9 00001910            355      JSR     PRINT_EMPTY_SPACE
000013EE                           356  
000013EE  4EB9 000018BC            357      JSR     PRINT_DATA_REGISTER
000013F4  31F8 0250 0550           358      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR
000013FA  4EB8 1292                359      JSR     PRINT_REGISTER_NUMBER
000013FE  6100 FD7E                360      BSR     USER_INPUT_ENTER
00001402  6000 FC3A                361      BRA     PARSING_OP_CODE
00001406  4E75                     362      RTS
00001408                           363  
00001408                           364  
00001408                           365  PRINT_OUT_MULU
00001408  43F9 000021A0            366      LEA     MULU_VALUE,A1
0000140E  4EB9 00001848            367      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001414  4EB9 00001F60            368      JSR     PRINT_NORMAL_WORD_SUFFIX
0000141A  4EB9 00001910            369      JSR     PRINT_EMPTY_SPACE
00001420  4EB9 00001966            370      JSR     CHECK_TYPE_DATA
00001426  31FC 0001 0300           371      MOVE.W  #%01, DESTINATION_MODE
0000142C  4EB9 00001850            372      JSR     PRINT_DATA_MODE_SOURCE
00001432  4EB9 000018A4            373      JSR     PRINT_COMMA
00001438  4EB9 00001910            374      JSR     PRINT_EMPTY_SPACE
0000143E                           375  
0000143E  4EB9 000018BC            376      JSR     PRINT_DATA_REGISTER
00001444  31F8 0250 0550           377      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR
0000144A  4EB8 1292                378      JSR     PRINT_REGISTER_NUMBER
0000144E  6100 FD2E                379      BSR     USER_INPUT_ENTER
00001452  6000 FBEA                380      BRA     PARSING_OP_CODE
00001456  4E75                     381      RTS
00001458                           382  
00001458                           383  PRINT_OUT_CMP
00001458  43F9 00002170            384      LEA CMP_VALUE,A1
0000145E  4EB9 00001848            385      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001464  4EB8 1274                386      JSR PRINT_NORMAL_SUFFIX
00001468  4EB9 00001910            387      JSR PRINT_EMPTY_SPACE
0000146E  4EB9 00001966            388      JSR CHECK_TYPE_DATA
00001474  4EB9 00001850            389      JSR PRINT_DATA_MODE_SOURCE
0000147A  4EB9 000018A4            390      JSR PRINT_COMMA
00001480  4EB9 00001910            391      JSR PRINT_EMPTY_SPACE
00001486  4EB9 000018BC            392      JSR PRINT_DATA_REGISTER
0000148C  31F8 0250 0550           393      MOVE.W DESTINATION_VAR,THIRD_TEMP_VAR
00001492  4EB8 1292                394      JSR PRINT_REGISTER_NUMBER
00001496  6100 FCE6                395      BSR USER_INPUT_ENTER
0000149A  6000 FBA2                396      BRA PARSING_OP_CODE
0000149E                           397  
0000149E  4E75                     398      RTS
000014A0                           399  
000014A0                           400  
000014A0                           401  PRINT_OUT_SUBA
000014A0  43F9 0000217C            402      LEA     SUBA_VALUE,A1
000014A6  6000 000C                403      BRA     SUBA_AND_ADDA_HELPER
000014AA                           404  
000014AA                           405  PRINT_OUT_ADDA
000014AA  43F9 000021AC            406      LEA     ADDA_VALUE,A1
000014B0  6000 0002                407      BRA     SUBA_AND_ADDA_HELPER
000014B4                           408  
000014B4                           409  SUBA_AND_ADDA_HELPER
000014B4  4EB9 00001848            410      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
000014BA  4EB9 00001966            411      JSR     CHECK_TYPE_DATA
000014C0  4EB9 0000192E            412      JSR     GET_THE_SECOND_NIBBLE
000014C6  E14B                     413      LSL     #8,D3                      * Get the special one bit size of ADDA
000014C8  EF4B                     414      LSL     #7,D3
000014CA  EE4B                     415      LSR     #7,D3
000014CC  E04B                     416      LSR     #8,D3
000014CE  5243                     417      ADD     #1,D3                      * 0 is word and 1 is long. Add 1 will be 01 and 10, word and long
000014D0  31C3 0300                418      MOVE.W  D3,DESTINATION_MODE
000014D4  4EB8 1274                419      JSR     PRINT_NORMAL_SUFFIX        * Now print .W or .L only
000014D8  4EB9 00001850            420      JSR     PRINT_DATA_MODE_SOURCE
000014DE  4EB9 000018A4            421      JSR     PRINT_COMMA
000014E4  4EB9 00001910            422      JSR     PRINT_EMPTY_SPACE
000014EA  4EB9 000018B0            423      JSR     PRINT_ADDRESS_REGISTER
000014F0  31F8 0250 0550           424      MOVE.W  DESTINATION_VAR, THIRD_TEMP_VAR       * Save the variable to print out the number of address register
000014F6  4EB8 1292                425      JSR     PRINT_REGISTER_NUMBER
000014FA  6100 FC82                426      BSR     USER_INPUT_ENTER
000014FE  6000 FB3E                427      BRA     PARSING_OP_CODE
00001502  4E75                     428      RTS
00001504                           429  
00001504                           430  PRINT_OUT_OR
00001504  43F9 000021CC            431      LEA     OR_VALUE,A1
0000150A  6000 0016                432      BRA     ADD_AND_SUB_HELPER           * Take advantage of the similar structure like add and sub
0000150E                           433  
0000150E                           434  PRINT_OUT_ADD                           * Function similar like SUB
0000150E  43F9 000021A6            435      LEA     ADD_VALUE,A1
00001514  6000 000C                436      BRA     ADD_AND_SUB_HELPER
00001518                           437  
00001518                           438  PRINT_OUT_SUB                      * The SUB function is odd is that the Dn is always in front
00001518                           439                                     * So to distinguish it, we need to check the source mode and compare with
00001518                           440                                     *000
00001518  43F9 00002176            441      LEA SUB_VALUE,A1                       * Only time where the source and dstiantion are in correct position
0000151E  6000 0002                442      BRA     ADD_AND_SUB_HELPER
00001522                           443  
00001522                           444  
00001522                           445  ADD_AND_SUB_HELPER
00001522  4EB9 00001848            446      JSR PRINT_TO_SCREEN_ENTIRE_STRING       * Is when both are data register
00001528  4EB8 1274                447      JSR PRINT_NORMAL_SUFFIX
0000152C  4EB9 00001910            448      JSR PRINT_EMPTY_SPACE
00001532  4EB9 00001966            449      JSR CHECK_TYPE_DATA
00001538  0C78 0000 0350           450      CMP #0, SOURCE_MODE               *
0000153E  6600 002E                451      BNE SUB_HELPER_FUNCTION         * Utilize the not normal approach
00001542  4EB9 00001850            452      JSR PRINT_DATA_MODE_SOURCE
00001548  4EB9 000018A4            453      JSR PRINT_COMMA
0000154E  4EB9 00001910            454      JSR PRINT_EMPTY_SPACE
00001554  4EB9 000018BC            455      JSR PRINT_DATA_REGISTER
0000155A  31F8 0250 0550           456      MOVE.W DESTINATION_VAR, THIRD_TEMP_VAR
00001560  4EB8 1292                457      JSR PRINT_REGISTER_NUMBER
00001564  6100 FC18                458      BSR USER_INPUT_ENTER
00001568  6000 FAD4                459      BRA PARSING_OP_CODE
0000156C  4E75                     460      RTS
0000156E                           461  
0000156E                           462  SUB_HELPER_FUNCTION       * For whatever the data register is always the first 3 bit of the second nibble
0000156E                           463                                             * Even though it can either be in the source or destination when write it
0000156E  4EB9 00001966            464      JSR CHECK_TYPE_DATA
00001574                           465  
00001574                           466  
00001574  3638 0250                467      MOVE.W DESTINATION_VAR,D3
00001578  31F8 0400 0250           468      MOVE.W SOURCE_VAR,DESTINATION_VAR
0000157E  31C3 0400                469      MOVE.W D3,SOURCE_VAR
00001582  3638 0300                470      MOVE.W DESTINATION_MODE,D3
00001586  31F8 0350 0300           471      MOVE.W SOURCE_MODE,DESTINATION_MODE
0000158C  31C3 0350                472      MOVE.W D3,SOURCE_MODE
00001590  3638 0350                473      MOVE.W SOURCE_MODE, D3
00001594  31F8 0400 0550           474      MOVE.W SOURCE_VAR, THIRD_TEMP_VAR         * Save the variable to print out from register
0000159A  E44B                     475      LSR #2,D3
0000159C  B67C 0000                476      CMP #0,D3         * Check direction to know which order we should be printing
000015A0  6700 0024                477      BEQ SUB_HELPER_REGISTER_TO_MEM
000015A4                           478  
000015A4  4EB9 00001CD4            479      JSR REGISTER_MODE_000                  * Need to find a way to switch the places
000015AA  4EB9 000018A4            480      JSR PRINT_COMMA
000015B0  4EB9 00001910            481      JSR PRINT_EMPTY_SPACE
000015B6  4EB9 0000186A            482      JSR PRINT_DATA_MODE_DESTINATION
000015BC  6100 FBC0                483      BSR USER_INPUT_ENTER
000015C0  6000 FA7C                484      BRA PARSING_OP_CODE
000015C4  4E75                     485      RTS
000015C6                           486  
000015C6                           487  SUB_HELPER_REGISTER_TO_MEM            * Helper function to help with printing fro register to memory
000015C6  4EB9 0000186A            488      JSR PRINT_DATA_MODE_DESTINATION
000015CC  4EB9 000018A4            489      JSR PRINT_COMMA
000015D2  4EB9 00001910            490      JSR PRINT_EMPTY_SPACE
000015D8  4EB9 00001CD4            491      JSR REGISTER_MODE_000
000015DE  6100 FB9E                492      BSR USER_INPUT_ENTER
000015E2  6000 FA5A                493      BRA PARSING_OP_CODE
000015E6  4E75                     494      RTS
000015E8                           495  
000015E8                           496  PRINT_OUT_BRA                         * Current limitation: Only can print out branch to a word address (4bytes).No support for 8 bytes
000015E8  43F9 0000218E            497      LEA     BRA_VALUE,A1
000015EE  4EB9 00001848            498      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
000015F4  4EB9 00001910            499      JSR     PRINT_EMPTY_SPACE
000015FA  4EB9 000018F8            500      JSR     PRINT_HEX_SYMBOL
00001600  380A                     501      MOVE.W  A2,D4           * Save the current address we are at
00001602  4EB9 00001948            502      JSR     GET_NEXT_FOUR_NIBBLE       * GEt the displacement we are suppose to branch to
00001608  D843                     503      ADD     D3,D4             * Current address + displacement => address we are suppose to jump to
0000160A  31C4 0200                504      MOVE.W  D4, TEMP_CURRENT_4_NIBBLES     * Prepare the address to print out in hex
0000160E  4EB8 10AA                505      JSR     CONVERT_HEX_TO_ASCII
00001612  6100 FB6A                506      BSR     USER_INPUT_ENTER
00001616  6000 FA26                507      BRA     PARSING_OP_CODE
0000161A                           508  
0000161A                           509  PRINT_OUT_BSR
0000161A  43F9 00002194            510      LEA    BSR_VALUE,A1
00001620  4EB9 00001848            511      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
00001626  4EB9 00001910            512      JSR    PRINT_EMPTY_SPACE
0000162C  4EB9 000018F8            513      JSR    PRINT_HEX_SYMBOL
00001632  380A                     514      MOVE.W  A2,D4
00001634  4EB9 00001948            515      JSR    GET_NEXT_FOUR_NIBBLE
0000163A  D843                     516      ADD    D3,D4
0000163C  31C4 0200                517      MOVE.W D4,TEMP_CURRENT_4_NIBBLES
00001640  4EB8 10AA                518      JSR    CONVERT_HEX_TO_ASCII
00001644  6100 FB38                519      BSR    USER_INPUT_ENTER
00001648  6000 F9F4                520      BRA    PARSING_OP_CODE
0000164C                           521  
0000164C                           522  PRINT_OUT_Bcc
0000164C  43F9 00002264            523      LEA    B,A1
00001652  4EB9 00001848            524      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
00001658  4DF9 00001F86            525      LEA    CONDITION_JUMP_TABLE,A6            * Load the jump table to know which condition code to print
0000165E  3638 0200                526      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001662  4EB9 0000192E            527      JSR     GET_THE_SECOND_NIBBLE
00001668  C6FC 0006                528      MULU    #6,D3
0000166C  4EB6 3000                529      JSR     0(A6,D3)            * Now print out the suffix of B
00001670  4EB9 00001910            530      JSR     PRINT_EMPTY_SPACE
00001676  4EB9 000018F8            531      JSR     PRINT_HEX_SYMBOL
0000167C  380A                     532      MOVE.W  A2,D4
0000167E  4EB9 00001948            533      JSR     GET_NEXT_FOUR_NIBBLE
00001684  D843                     534      ADD     D3,D4
00001686  31C4 0200                535      MOVE.W  D4,TEMP_CURRENT_4_NIBBLES
0000168A  4EB8 10AA                536      JSR     CONVERT_HEX_TO_ASCII
0000168E  6100 FAEE                537      BSR     USER_INPUT_ENTER
00001692  6000 F9AA                538      BRA     PARSING_OP_CODE
00001696                           539  
00001696                           540  PRINT_OUT_LOGICAL_SHIFT_MEM           * Lsd with <ea>
00001696  43F9 000021BC            541      LEA    LS_VALUE,A1
0000169C  4EB9 000016B2            542      JSR    ASD_LSD_ROD_SHIFT_HELPER
000016A2  4E75                     543      RTS
000016A4                           544  
000016A4                           545  PRINT_OUT_ARITH_SHIFT_MEM
000016A4  43F9 000021B8            546      LEA    AS_VALUE,A1
000016AA  4EB9 000016B2            547      JSR    ASD_LSD_ROD_SHIFT_HELPER
000016B0  4E75                     548      RTS
000016B2                           549  
000016B2                           550  ASD_LSD_ROD_SHIFT_HELPER
000016B2  4EB9 00001848            551      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
000016B8  4DF9 00002056            552      LEA     RIGHT_OR_LEFT_JUMP_TABLE,A6     * Print the direction, left or right
000016BE  3638 0200                553      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000016C2  4EB9 00001966            554      JSR     CHECK_TYPE_DATA
000016C8  4EB9 0000192E            555      JSR     GET_THE_SECOND_NIBBLE
000016CE  E14B                     556      LSL      #8,D3
000016D0  EF4B                     557      LSL      #7,D3
000016D2  EE4B                     558      LSR       #7,D3
000016D4  E04B                     559      LSR      #8,D3
000016D6  C6FC 0006                560      MULU     #6,D3
000016DA  4EB6 3000                561      JSR      0(A6,D3)   * Print out left or right
000016DE  4EB9 00001F60            562      JSR     PRINT_NORMAL_WORD_SUFFIX
000016E4  31F8 0400 0550           563      MOVE.W   SOURCE_VAR, THIRD_TEMP_VAR      * Save the register number in case for print OUT
000016EA  4EB9 00001850            564      JSR      PRINT_DATA_MODE_SOURCE
000016F0  6100 FA8C                565      BSR     USER_INPUT_ENTER
000016F4  6000 F948                566      BRA     PARSING_OP_CODE
000016F8  4E75                     567      RTS
000016FA                           568  
000016FA                           569  PRINT_OUT_ROTATE_MEM
000016FA  43F9 000021C0            570      LEA    RO_VALUE,A1
00001700  4EB8 16B2                571      JSR    ASD_LSD_ROD_SHIFT_HELPER
00001704  4E75                     572      RTS
00001706                           573  
00001706                           574  
00001706                           575  
00001706                           576  PRINT_OUT_ASD_OR_LSD                * For other ASd and LSd, the first  bit of the last nibble can differentiate them
00001706  3638 0200                577      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
0000170A  4EB9 0000193E            578      JSR    GET_THE_FOURTH_NIBBLE
00001710  E64B                     579      LSR    #3,D3
00001712  B67C 0000                580      CMP    #0,D3
00001716  6700 0008                581      BEQ    PRINT_OUT_ASD * First bit is 0 for ASD
0000171A  6000 0012                582      BRA    PRINT_OUT_LSD * 1 for LSD
0000171E  4E75                     583      RTS
00001720                           584  
00001720                           585  PRINT_OUT_ASD
00001720  43F9 000021B8            586      LEA AS_VALUE,A1
00001726  4EB9 0000175E            587      JSR ASD_LSD_ROD_HELPER_FUNCTION
0000172C  4E75                     588      RTS
0000172E                           589  
0000172E                           590  PRINT_OUT_LSD
0000172E  43F9 000021BC            591      LEA LS_VALUE,A1
00001734  4EB9 0000175E            592      JSR ASD_LSD_ROD_HELPER_FUNCTION
0000173A  4E75                     593      RTS
0000173C                           594  
0000173C                           595  PRINT_OUT_ROD           * Could be ROd or ROXd. If the latter case, then it is invalid
0000173C  3638 0200                596      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001740  4EB9 0000193E            597      JSR     GET_THE_FOURTH_NIBBLE
00001746  E64B                     598      LSR     #3,D3
00001748  B67C 0001                599      CMP     #1,D3
0000174C  6600 FA40                600      BNE     INVALID         * ROD ibly accept 1 as the first bit in the fourth nibbles
00001750  43F9 000021C0            601      LEA     RO_VALUE,A1
00001756  4EB9 0000175E            602      JSR     ASD_LSD_ROD_HELPER_FUNCTION
0000175C  4E75                     603      RTS
0000175E                           604  
0000175E                           605  
0000175E                           606  
0000175E                           607  
0000175E                           608  ASD_LSD_ROD_HELPER_FUNCTION   * Used for printing out the cases where a source and destionaion are present
0000175E  4EB9 00001848            609      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001764  4DF9 00002056            610      LEA     RIGHT_OR_LEFT_JUMP_TABLE,A6     * Print the direction, left or right
0000176A  3638 0200                611      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3 * Now print out the Direction left or right
0000176E  4EB9 00001966            612      JSR     CHECK_TYPE_DATA
00001774  4EB9 0000192E            613      JSR     GET_THE_SECOND_NIBBLE
0000177A  E14B                     614      LSL      #8,D3
0000177C  EF4B                     615      LSL      #7,D3
0000177E  E04B                     616      LSR      #8,D3
00001780  EE4B                     617      LSR      #7,D3
00001782  C6FC 0006                618      MULU     #6,D3
00001786  4EB6 3000                619      JSR      0(A6,D3)   * Print out left or right
0000178A  3638 0200                620      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
0000178E  4EB8 1274                621      JSR     PRINT_NORMAL_SUFFIX    * Print out .B, .W or .L
00001792  3638 0200                622      MOVE.W   TEMP_CURRENT_4_NIBBLES,D3      * Now we need to determine if its is immediate or register rotation
00001796  4EB9 00001936            623      JSR      GET_THE_THIRD_NIBBLE
0000179C  E14B                     624      LSL      #8,D3
0000179E  ED4B                     625      LSL      #6,D3
000017A0  E04B                     626      LSR      #8,D3
000017A2  EE4B                     627      LSR      #7,D3 * Now the third bit will be at the last position
000017A4  4DF9 0000207A            628      LEA     IMMEDIATE_OR_REGISTER_JUMP_TABLE,A6
000017AA  C6FC 0006                629      MULU     #6,D3
000017AE  4EB6 3000                630      JSR     0(A6,D3)
000017B2  4EB9 000018BC            631      JSR     PRINT_DATA_REGISTER
000017B8  3638 0200                632      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000017BC  4EB9 00001966            633      JSR     CHECK_TYPE_DATA
000017C2  31F8 0400 0550           634      MOVE.W  SOURCE_VAR,THIRD_TEMP_VAR * Save the register number to print out
000017C8  4EB8 1292                635      JSR     PRINT_REGISTER_NUMBER
000017CC  6100 F9B0                636      BSR     USER_INPUT_ENTER
000017D0  6000 F86C                637      BRA     PARSING_OP_CODE
000017D4  4E75                     638      RTS
000017D6                           639  
000017D6                           640  
000017D6                           641  MOVE_OPCODE_HELPER
000017D6  3638 0200                642      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
000017DA  4EB9 00001966            643      JSR CHECK_TYPE_DATA
000017E0  0C78 0001 0300           644      CMP #%001, DESTINATION_MODE
000017E6  6700 0008                645      BEQ PRINT_OUT_MOVEA
000017EA  6000 0010                646      BRA PRINT_OUT_MOVE
000017EE  4E75                     647      RTS
000017F0                           648  
000017F0                           649  
000017F0                           650  PRINT_OUT_MOVEA
000017F0  43F9 000021D0            651      LEA MOVEA_VALUE,A1
000017F6  4EB9 00001808            652      JSR MOVE_SECOND_OPCODE_HELPER
000017FC                           653  
000017FC                           654  PRINT_OUT_MOVE
000017FC  43F9 000021D8            655      LEA MOVE_VALUE,A1
00001802  4EB9 00001808            656      JSR MOVE_SECOND_OPCODE_HELPER
00001808                           657  
00001808                           658  
00001808                           659  
00001808                           660  MOVE_SECOND_OPCODE_HELPER
00001808  4EB9 00001848            661      JSR PRINT_TO_SCREEN_ENTIRE_STRING
0000180E  4DF9 00001EEA            662      LEA MOVE_SIZE_PRINT_JUMP_TABLE,A6
00001814  3638 0200                663      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001818  4EB9 00001928            664      JSR GET_THE_FIRST_NIBBLE
0000181E  C6FC 0006                665      MULU #6,D3
00001822  4EB6 3000                666      JSR 0(A6,D3)
00001826  4EB9 00001850            667      JSR PRINT_DATA_MODE_SOURCE
0000182C  4EB9 000018A4            668      JSR PRINT_COMMA
00001832  4EB9 00001910            669      JSR PRINT_EMPTY_SPACE
00001838  4EB9 0000186A            670      JSR PRINT_DATA_MODE_DESTINATION
0000183E  6100 F93E                671      BSR USER_INPUT_ENTER
00001842  6000 F7FA                672      BRA PARSING_OP_CODE
00001846  4E75                     673      RTS
00001848                           674  
00001848                           675  
00001848                           676  
00001848                           677  
00001848                           678  PRINT_TO_SCREEN_ENTIRE_STRING         * Simple utility method that take whatever in A1 and print out
00001848  103C 000E                679      MOVE.B  #14,D0      * This is used to print out the command as an entire string
0000184C  4E4F                     680      TRAP    #15
0000184E  4E75                     681      RTS
00001850                           682  
00001850                           683  PRINT_DATA_MODE_SOURCE         * Depnding on the mode, will print out appropriate data mode: Dn,An,(An),...
00001850  4DF9 00001CA4            684      LEA     REGISTER_MODE_JUMP_TABLE,A6
00001856  31F8 0400 0550           685      MOVE.W   SOURCE_VAR, THIRD_TEMP_VAR
0000185C  3638 0350                686      MOVE    SOURCE_MODE,D3
00001860  C6FC 0006                687      MULU    #6,D3
00001864  4EB6 3000                688      JSR     0(A6,D3)       * Let's see what mode is this source mode
00001868  4E75                     689      RTS
0000186A                           690  
0000186A                           691  PRINT_DATA_MODE_DESTINATION
0000186A  4DF9 00001CA4            692      LEA     REGISTER_MODE_JUMP_TABLE,A6
00001870  31F8 0250 0550           693      MOVE.W    DESTINATION_VAR, THIRD_TEMP_VAR      * Determine the Xn to print
00001876  3638 0300                694      MOVE.W    DESTINATION_MODE,D3
0000187A  C6FC 0006                695      MULU    #6,D3
0000187E  4EB6 3000                696      JSR     0(A6,D3)
00001882  4E75                     697      RTS
00001884                           698  
00001884                           699  PRINT_ADDRESS_LOCATION        * Print out the address in which we are executing the disassembling
00001884                           700                                * Should print out 00XX YYYY as the address location
00001884                           701                                * Find a way to load the address at A2 into some variables and call print hex to ascii
00001884  2A0A                     702      MOVE.L  A2,D5
00001886  E04D                     703      LSR     #8,D5              * Shift 4 bytes left most to print out
00001888  E04D                     704      LSR     #8,D5
0000188A  31C5 0200                705      MOVE.W  D5,TEMP_CURRENT_4_NIBBLES * Get the entire long address
0000188E  4EB8 10AA                706      JSR     CONVERT_HEX_TO_ASCII
00001892  3A0A                     707      MOVE.W  A2,D5
00001894  31C5 0200                708      MOVE.W  D5,TEMP_CURRENT_4_NIBBLES
00001898  4EB8 10AA                709      JSR     CONVERT_HEX_TO_ASCII
0000189C  4EB9 00001910            710      JSR     PRINT_EMPTY_SPACE
000018A2  4E75                     711      RTS
000018A4                           712  
000018A4                           713  
000018A4                           714  PRINT_COMMA *Print the comma to separate between source and destination
000018A4  43F9 00002218            715      LEA     COMMA,A1
000018AA  4EB8 1848                716      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
000018AE  4E75                     717      RTS
000018B0                           718  
000018B0                           719  PRINT_ADDRESS_REGISTER
000018B0  43F9 00002214            720      LEA   ADDRESS_REGISTER,A1
000018B6  4EB8 1848                721      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
000018BA  4E75                     722      RTS
000018BC                           723  
000018BC                           724  PRINT_DATA_REGISTER
000018BC  43F9 00002210            725      LEA    DATA_REGISTER,A1
000018C2  4EB8 1848                726      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
000018C6  4E75                     727      RTS
000018C8                           728  
000018C8                           729  PRINT_OPEN_BRACKET
000018C8  43F9 00002200            730      LEA   OPENING_BRACKET,A1
000018CE  4EB8 1848                731      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
000018D2  4E75                     732      RTS
000018D4                           733  
000018D4                           734  PRINT_CLOSE_BRACKET
000018D4  43F9 00002204            735      LEA  CLOSING_BRACKET,A1
000018DA  4EB8 1848                736      JSR  PRINT_TO_SCREEN_ENTIRE_STRING
000018DE  4E75                     737      RTS
000018E0                           738  
000018E0                           739  PRINT_PLUS_SIGN
000018E0  43F9 00002208            740      LEA  PLUS_SIGN,A1
000018E6  4EB8 1848                741      JSR  PRINT_TO_SCREEN_ENTIRE_STRING
000018EA  4E75                     742      RTS
000018EC                           743  
000018EC                           744  PRINT_MINUS_SIGN
000018EC  43F9 0000220C            745      LEA  MINUS_SIGN,A1
000018F2  4EB8 1848                746      JSR  PRINT_TO_SCREEN_ENTIRE_STRING
000018F6  4E75                     747      RTS
000018F8                           748  
000018F8                           749  PRINT_HEX_SYMBOL
000018F8  43F9 00002224            750      LEA   HEX_SYMBOL,A1
000018FE  4EB8 1848                751      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
00001902  4E75                     752      RTS
00001904                           753  
00001904                           754  PRINT_BINARY_SYMBOL
00001904  43F9 00002220            755      LEA   BINARY_SYMBOL,A1
0000190A  4EB8 1848                756      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
0000190E  4E75                     757      RTS
00001910                           758  
00001910                           759  PRINT_EMPTY_SPACE
00001910  43F9 0000221C            760      LEA   SPACE,A1
00001916  4EB8 1848                761      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
0000191A  4E75                     762      RTS
0000191C                           763  
0000191C                           764  PRINT_IMMEDIATE_DATA_SYMBOL
0000191C  43F9 00002228            765      LEA    IMMEDIATE_DATA_SYMBOL,A1
00001922  4EB8 1848                766      JSR     PRINT_TO_SCREEN_ENTIRE_STRING
00001926  4E75                     767      RTS
00001928                           768  
00001928                           769  
00001928                           770  
00001928                           771  ****************************************
00001928                           772  * Query data section
00001928                           773  ****************************************
00001928                           774  
00001928                           775  GET_THE_FIRST_NIBBLE            * Get the left most byte. Assuming that the full word data is already store in D3
00001928  E04B                     776      LSR     #8,D3               * Shift 2 bytes to the rights
0000192A  E84B                     777      LSR     #4,D3               * Shift 1 byte to the right. Now left most byte is now the right most byte
0000192C  4E75                     778      RTS
0000192E                           779  
0000192E                           780  
0000192E                           781  GET_THE_SECOND_NIBBLE
0000192E  E94B                     782      LSL     #4,D3             * Shift the left most byte to go away
00001930  E84B                     783      LSR     #4,D3             * Return the original place
00001932  E04B                     784      LSR     #8,D3              * Push the 2 right most byte out of the way
00001934  4E75                     785      RTS
00001936                           786  
00001936                           787  GET_THE_THIRD_NIBBLE
00001936  E14B                     788      LSL     #8,D3                * Bye byte 2 left most nibble
00001938  E04B                     789      LSR     #8,D3                * Get rid of the 3 bytes that are infront
0000193A  E84B                     790      LSR     #4,D3                 * Shift back to original position
0000193C  4E75                     791      RTS
0000193E                           792  
0000193E                           793  GET_THE_FOURTH_NIBBLE
0000193E  E14B                     794      LSL     #8,D3
00001940  E94B                     795      LSL     #4,D3
00001942  E04B                     796      LSR     #8,D3
00001944  E84B                     797      LSR     #4,D3
00001946  4E75                     798      RTS
00001948                           799  
00001948                           800  GET_NEXT_FOUR_NIBBLE
00001948  361A                     801      MOVE.W  (A2)+,D3
0000194A  31C3 0200                802      MOVE.W  D3, TEMP_CURRENT_4_NIBBLES       * Copy the value into temp variable
0000194E  4E75                     803      RTS
00001950                           804  
00001950                           805  
00001950                           806  GET_NEXT_TWO_NIBBLE
00001950  161A                     807      MOVE.B  (A2)+,D3            * Get the next byte ( 2 nibbles)
00001952  11C3 0750                808      MOVE.B  D3, TEMP_CURRENT_2_NIBBLES
00001956  4E75                     809      RTS
00001958                           810  
00001958                           811  GET_NORMAL_SIZE                   * The normal size is on the first 2 bit of the third nibble of the op code
00001958                           812  *    MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001958                           813      **JSR     GET_THE_THIRD_NIBBLE           * Get the index to know which value to print
00001958  3638 0300                814      MOVE.W  DESTINATION_MODE,D3
0000195C  E14B                     815      LSL     #8,D3
0000195E  ED4B                     816      LSL     #6,D3
00001960  E04B                     817      LSR     #8,D3
00001962  EC4B                     818      LSR     #6,D3
00001964  4E75                     819      RTS
00001966                           820  **********************************
00001966                           821  * logical reasoning section (determine what kind of opcode to print, what type of data to print)
00001966                           822  **********************************
00001966                           823  
00001966                           824  
00001966                           825  ********
00001966                           826  * Check type data: Means getting the appropriate source and destination register  and mode
00001966                           827  ********
00001966                           828  CHECK_TYPE_DATA
00001966  3638 0200                829      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
0000196A  E94B                     830      LSL     #4,D3      * Get rid of left most byte
0000196C  E84B                     831      LSR     #4,D3      * Now focus on the following format      destination mode mode source. Start with destination first
0000196E  E04B                     832      LSR     #8,D3      * Now the D3 has the destination
00001970  E24B                     833      LSR     #1,D3
00001972  31C3 0250                834      MOVE.W  D3,DESTINATION_VAR
00001976  3638 0200                835      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3 * Now go with the destination mode
0000197A  EF4B                     836      LSL     #7,D3
0000197C  EE4B                     837      LSR     #7,D3
0000197E  EC4B                     838      LSR     #6,D3
00001980  31C3 0300                839      MOVE.W  D3,DESTINATION_MODE
00001984  3638 0200                840      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3       * Now extract the source mode
00001988  E14B                     841      LSL     #8,D3
0000198A  E54B                     842      LSL     #2,D3
0000198C  E04B                     843      LSR     #8,D3
0000198E  E44B                     844      LSR     #2,D3
00001990  E64B                     845      LSR     #3,D3
00001992  31C3 0350                846      MOVE.W  D3,SOURCE_MODE      * Now extract the source
00001996  3638 0200                847      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
0000199A  E14B                     848      LSL     #8,D3
0000199C  EB4B                     849      LSL     #5,D3
0000199E  E04B                     850      LSR     #8,D3
000019A0  EA4B                     851      LSR     #5,D3
000019A2  31C3 0400                852      MOVE.W  D3,SOURCE_VAR
000019A6  3638 0200                853      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000019AA  4E75                     854      RTS
000019AC                           855  
000019AC                           856  
000019AC                           857  * Now the byte of the opcode is in D3
000019AC                           858  
000019AC                           859  
000019AC                           860  
000019AC                           861  
000019AC                           862  
000019AC                           863  
000019AC                           864  
000019AC                           865  FIRST_NIBBLE_4_SECOND_NIBBLE_E        * Possible answer are NOP,JSR and RTS
000019AC  3638 0200                866      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3       * Get the op code
000019B0  E14B                     867      LSL     #8,D3             * Shift to the left to dissappear 2 left most byte
000019B2  E04B                     868      LSR     #8,D3             * Shift to the right to gain back original position. Only now the 2 left most byte are gone
000019B4  B63C 0071                869      CMP.B   #$71,D3           * NOP is 4E71
000019B8  6700 F7FC                870      BEQ     PRINT_OUT_NOP
000019BC  B63C 0075                871      CMP.B   #$75,D3           *RTS is 4E75
000019C0  6700 F80A                872      BEQ     PRINT_OUT_RTS
000019C4  4EB8 1966                873      JSR     CHECK_TYPE_DATA       *  Get the destination mode and desitnation register. Could be JSR
000019C8  3638 0200                874      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000019CC  4EB8 1936                875      JSR     GET_THE_THIRD_NIBBLE     * For Jsr  the 2 bit of the 3rd nibble is 10
000019D0  E44B                     876      LSR     #2, D3
000019D2  B67C 0002                877      CMP     #%10, D3              *
000019D6  6700 F81E                878      BEQ     PRINT_OUT_JSR         * Print out the command JSR and the data
000019DA  6000 F7B2                879      BRA     INVALID               * Need to implement
000019DE  4E75                     880      RTS
000019E0                           881  
000019E0                           882  SECOND_NIBBLE_IS_0 * Possible to be ORI. In the case first byte is 0 as well
000019E0  4EB8 1950                883      JSR     GET_NEXT_TWO_NIBBLE
000019E4  0C38 007C 0750           884      CMP.B   #$7C, TEMP_CURRENT_2_NIBBLES            * Only ORI to SR have the last 2 bytes in op code as 7C
000019EA  6000 F7F6                885      BRA     PRINT_OUT_ORI_TO_SR
000019EE                           886  
000019EE                           887  
000019EE                           888  SECOND_NIBBLE_IS_E  * Possible to be NOP and RTS. In the case the first byte is 4
000019EE  4EB8 1950                889      JSR GET_NEXT_TWO_NIBBLE   * Get the remaning 2 bytes
000019F2  0C78 0071 0750           890      CMP     #$71, TEMP_CURRENT_2_NIBBLES
000019F8  6700 F7BC                891      BEQ     PRINT_OUT_NOP
000019FC  B67C 0075                892      CMP     #$75,D3
00001A00  6700 F7CA                893      BEQ     PRINT_OUT_RTS
00001A04                           894  
00001A04                           895  
00001A04                           896  
00001A04                           897  
00001A04                           898  **************************************************
00001A04                           899  * Specific branching of the jump table is stored here
00001A04                           900  *************************************************
00001A04                           901  FIRST_NIBBLE_JUMP_TABLE                  * Based on the first byte of the op code then jump on what is possible
00001A04  4EF9 00001A64            902      JMP  FIRST_NIBBLE_IS_0               * ORI, CMPI. BCLR
00001A0A  4EF9 00001A76            903      JMP  FIRST_NIBBLE_IS_1               * MOVE.B, MOVEA.B
00001A10  4EF9 00001A7E            904      JMP  FIRST_NIBBLE_IS_2               * MOVEA.L, MOVE.L
00001A16  4EF9 00001A86            905      JMP  FIRST_NIBBLE_IS_3               * MOVE.W    MOVEA.W
00001A1C  4EF9 00001A8E            906      JMP  FIRST_NIBBLE_IS_4               * NOP, LEA, NEG, JSR, RTS
00001A22  4EF9 00001ABA            907      JMP  FIRST_NIBBLE_IS_5               * SUBQ
00001A28  4EF9 00001AF0            908      JMP  FIRST_NIBBLE_IS_6               * BCS, BGE, BLT, BVC, BRA
00001A2E  4EF9 00001B12            909      JMP  FIRST_NIBBLE_IS_7               * NOT SUPPORTED
00001A34  4EF9 00001B6C            910      JMP  FIRST_NIBBLE_IS_8               * DIVS, OR
00001A3A  4EF9 00001B92            911      JMP  FIRST_NIBBLE_IS_9               * SUB
00001A40  4EF9 00001BAE            912      JMP  FIRST_NIBBLE_IS_A               * NOT SUPPORTED
00001A46  4EF9 00001BB4            913      JMP  FIRST_NIBBLE_IS_B               * EOR, CMP
00001A4C  4EF9 00001BE8            914      JMP  FIRST_NIBBLE_IS_C               * MULS
00001A52  4EF9 00001C1E            915      JMP  FIRST_NIBBLE_IS_D               * ADD, ADDA
00001A58  4EF9 00001C3C            916      JMP  FIRST_NIBBLE_IS_E               * LSR, LSL, ASR, ASL, ROL, ROR
00001A5E  4EF9 00001C72            917      JMP  FIRST_NIBBLE_IS_F               * NOT SUPPORTED
00001A64                           918  
00001A64                           919  FIRST_NIBBLE_IS_0             * UNFINISHED IMPLEMENTATION
00001A64  3638 0200                920      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001A68  4EB8 192E                921      JSR     GET_THE_SECOND_NIBBLE
00001A6C  B63C 000C                922      CMP.B   #$C, D3
00001A70  6700 F7AA                923      BEQ     PRINT_OUT_CMPI
00001A74  4E75                     924      RTS
00001A76                           925  
00001A76                           926  
00001A76                           927  FIRST_NIBBLE_IS_1 *MOVE.B, MOVEA.B * Can only be MOVE for these nibble because of the size of MOVE
00001A76  4EB8 17D6                928      JSR MOVE_OPCODE_HELPER
00001A7A  FFFF FFFF                929      SIMHALT
00001A7E                           930  
00001A7E                           931  FIRST_NIBBLE_IS_2 *MOVE.L, MOVEA.L
00001A7E  4EB8 17D6                932      JSR MOVE_OPCODE_HELPER
00001A82  FFFF FFFF                933      SIMHALT
00001A86                           934  
00001A86                           935  FIRST_NIBBLE_IS_3 * MOVE.W, MOVEA.W
00001A86  4EB8 17D6                936      JSR MOVE_OPCODE_HELPER
00001A8A  FFFF FFFF                937      SIMHALT
00001A8E                           938  
00001A8E                           939  
00001A8E                           940  FIRST_NIBBLE_IS_4                 * Possible for NOP,LEA,RTS,JSR,NEG. Now will check the second byte
00001A8E  3638 0200                941      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3         * Get the original op code back
00001A92  4EB8 192E                942      JSR     GET_THE_SECOND_NIBBLE
00001A96  B63C 000E                943      CMP.B   #$E,D3
00001A9A  6700 FF10                944      BEQ     FIRST_NIBBLE_4_SECOND_NIBBLE_E             * NOP,RTS,JSR
00001A9E  B63C 0004                945      CMP.B   #4,D3              *  If the second nibble is 4, then it must be neg
00001AA2  6700 F6EC                946      BEQ     PRINT_OUT_NEG
00001AA6                           947                                  * For LEA, the aestination mode must be 111 (address register)
00001AA6  4EB8 1966                948      JSR     CHECK_TYPE_DATA
00001AAA  0C78 0007 0300           949      CMP     #%111,DESTINATION_MODE
00001AB0  6700 F7FA                950      BEQ     PRINT_OUT_LEA           * Only LEA have the 3 bits of destination is 111
00001AB4  6000 F6D8                951      BRA     INVALID
00001AB8  4E75                     952      RTS
00001ABA                           953  
00001ABA                           954  FIRST_NIBBLE_IS_5                     * This is SUBQ and ADDQ
00001ABA  3638 0200                955      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001ABE  4EB8 1966                956      JSR    CHECK_TYPE_DATA
00001AC2  4EB8 1958                957      JSR    GET_NORMAL_SIZE           * SUBQ and ADDQ only accpet normal size. Meaning no 11
00001AC6  B67C 0003                958      CMP    #%11,D3
00001ACA  6700 F6C2                959      BEQ    INVALID
00001ACE  3638 0200                960      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001AD2  4EB8 192E                961      JSR    GET_THE_SECOND_NIBBLE
00001AD6  E14B                     962      LSL    #8,D3           * Get rid of the first 2 byets
00001AD8  EF4B                     963      LSL    #7,D3           * Shift back to original position
00001ADA  E04B                     964      LSR    #8,D3
00001ADC  EE4B                     965      LSR    #7,D3
00001ADE  B67C 0000                966      CMP    #0,D3           * SUBQ have 1 as the last bit in the second nibble
00001AE2  6700 F80C                967      BEQ    PRINT_OUT_ADDQ     * ADDQ has 0 as the last bit in the second nibble
00001AE6  6000 F812                968      BRA    PRINT_OUT_SUBQ
00001AEA  4E75                     969      RTS
00001AEC  FFFF FFFF                970      SIMHALT
00001AF0                           971  
00001AF0                           972  FIRST_NIBBLE_IS_6
00001AF0  3638 0200                973      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001AF4  4EB8 192E                974      JSR     GET_THE_SECOND_NIBBLE
00001AF8  B67C 0000                975      CMP     #%0000,D3      * Only the condition code of BRA is 0000
00001AFC  6700 FAEA                976      BEQ     PRINT_OUT_BRA
00001B00  B67C 0001                977      CMP     #%0001,D3
00001B04  6700 FB14                978      BEQ     PRINT_OUT_BSR
00001B08  6000 FB42                979      BRA     PRINT_OUT_Bcc
00001B0C                           980  
00001B0C  4E75                     981      RTS
00001B0E  FFFF FFFF                982      SIMHALT
00001B12                           983  
00001B12                           984  FIRST_NIBBLE_IS_7 * This is MOVEQ
00001B12  43F9 000021DE            985      LEA MOVEQ_VALUE,A1
00001B18  4EB8 1848                986      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001B1C  4EB9 00001F70            987      JSR PRINT_NORMAL_LONG_SUFFIX
00001B22  3238 0200                988      MOVE.W TEMP_CURRENT_4_NIBBLES,D1 * Save the current opcode
00001B26  4EB8 191C                989      JSR PRINT_IMMEDIATE_DATA_SYMBOL
00001B2A  4EB8 18F8                990      JSR PRINT_HEX_SYMBOL
00001B2E  3638 0200                991      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001B32  E14B                     992      LSL #8,D3
00001B34  E04B                     993      LSR #8,D3
00001B36  31C3 0200                994      MOVE.W D3, TEMP_CURRENT_4_NIBBLES
00001B3A  4EB8 10AA                995      JSR CONVERT_HEX_TO_ASCII                * Print the 8 bit data field
00001B3E  31C1 0200                996      MOVE.W D1, TEMP_CURRENT_4_NIBBLES
00001B42  3638 0200                997      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001B46  4EB8 18A4                998      JSR PRINT_COMMA
00001B4A  4EB8 1910                999      JSR PRINT_EMPTY_SPACE
00001B4E  4EB8 1966               1000      JSR CHECK_TYPE_DATA
00001B52  4EB8 18BC               1001      JSR PRINT_DATA_REGISTER
00001B56  31F8 0250 0550          1002      MOVE.W DESTINATION_VAR, THIRD_TEMP_VAR
00001B5C  4EB8 1292               1003      JSR PRINT_REGISTER_NUMBER
00001B60  6100 F61C               1004      BSR USER_INPUT_ENTER
00001B64  6000 F4D8               1005      BRA PARSING_OP_CODE
00001B68                          1006  
00001B68  FFFF FFFF               1007      SIMHALT
00001B6C                          1008  
00001B6C                          1009  FIRST_NIBBLE_IS_8 * DIVS
00001B6C  3638 0200               1010      MOVE.W TEMP_CURRENT_4_NIBBLES, D3
00001B70  4EB8 1966               1011      JSR CHECK_TYPE_DATA
00001B74  0C78 0007 0300          1012      CMP #%111, DESTINATION_MODE
00001B7A  6700 F7F8               1013      BEQ  PRINT_OUT_DIVS
00001B7E  0C78 0003 0300          1014      CMP #%011, DESTINATION_MODE
00001B84  6700 F608               1015      BEQ  INVALID * This is DIVU
00001B88  6000 F97A               1016      BRA PRINT_OUT_OR
00001B8C  4E75                    1017      RTS
00001B8E  FFFF FFFF               1018      SIMHALT
00001B92                          1019  
00001B92                          1020  FIRST_NIBBLE_IS_9              * SUB and SUBA           * No way of knowing SUX
00001B92  3638 0200               1021      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001B96  4EB8 1966               1022      JSR CHECK_TYPE_DATA
00001B9A  4EB8 1958               1023      JSR GET_NORMAL_SIZE
00001B9E  B67C 0003               1024      CMP #%11,D3
00001BA2  6700 F8FC               1025      BEQ PRINT_OUT_SUBA      * SUB Does not accept the size of 11
00001BA6  6000 F970               1026      BRA PRINT_OUT_SUB
00001BAA  FFFF FFFF               1027      SIMHALT
00001BAE                          1028  
00001BAE                          1029  FIRST_NIBBLE_IS_A
00001BAE  4E75                    1030      RTS
00001BB0  FFFF FFFF               1031      SIMHALT
00001BB4                          1032  
00001BB4                          1033  FIRST_NIBBLE_IS_B        * CMP
00001BB4  3638 0200               1034      MOVE.W   TEMP_CURRENT_4_NIBBLES,D3
00001BB8  4EB8 1966               1035      JSR      CHECK_TYPE_DATA
00001BBC  4EB8 1958               1036      JSR     GET_NORMAL_SIZE
00001BC0  B67C 0003               1037      CMP      #%11, D3
00001BC4  6700 F5C8               1038      BEQ      INVALID * CMP does not accept size 11
00001BC8  3638 0200               1039      MOVE.W   TEMP_CURRENT_4_NIBBLES,D3
00001BCC  4EB8 192E               1040      JSR      GET_THE_SECOND_NIBBLE
00001BD0  E14B                    1041      LSL     #8,D3      * Get the last bit of the second nibble
00001BD2  EF4B                    1042      LSL      #7,D3
00001BD4  EE4B                    1043      LSR      #7,D3
00001BD6  E04B                    1044      LSR      #8,D3
00001BD8  B67C 0000               1045      CMP      #0,D3        * CMP only accept 0 as the last bit in the second nibble
00001BDC  6600 F5B0               1046      BNE      INVALID
00001BE0  6000 F876               1047      BRA      PRINT_OUT_CMP
00001BE4  FFFF FFFF               1048      SIMHALT
00001BE8                          1049  
00001BE8                          1050  FIRST_NIBBLE_IS_C          * MULS
00001BE8  3638 0200               1051      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001BEC  4EB8 1966               1052      JSR     CHECK_TYPE_DATA
00001BF0  4EB8 1958               1053      JSR     GET_NORMAL_SIZE
00001BF4  B67C 0003               1054      CMP     #%11,D3
00001BF8  6600 F594               1055      BNE     INVALID        * MULS only accept 11 as the size
00001BFC  3638 0200               1056      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001C00  4EB8 192E               1057      JSR     GET_THE_SECOND_NIBBLE
00001C04  E14B                    1058      LSL     #8,D3      * Get the last bit of the second
00001C06  EF4B                    1059      LSL      #7,D3
00001C08  EE4B                    1060      LSR      #7,D3
00001C0A  E04B                    1061      LSR      #8,D3
00001C0C  B67C 0001               1062      CMP     #1,D3     * If it is 1, then it is MULS. Otherwise MULU
00001C10  6700 F7A6               1063      BEQ     PRINT_OUT_MULS
00001C14  6000 F7F2               1064      BRA     PRINT_OUT_MULU
00001C18  4E75                    1065      RTS
00001C1A  FFFF FFFF               1066      SIMHALT
00001C1E                          1067  
00001C1E                          1068  FIRST_NIBBLE_IS_D *ADD, ADDA                        * Have no way of knowing ADDX
00001C1E  3638 0200               1069      MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
00001C22  4EB8 1966               1070      JSR CHECK_TYPE_DATA
00001C26  4EB8 1958               1071      JSR GET_NORMAL_SIZE
00001C2A  B67C 0003               1072      CMP #%11,D3
00001C2E  6700 F87A               1073      BEQ PRINT_OUT_ADDA
00001C32  6000 F8DA               1074      BRA PRINT_OUT_ADD
00001C36  4E75                    1075      RTS
00001C38  FFFF FFFF               1076      SIMHALT
00001C3C                          1077  
00001C3C                          1078  FIRST_NIBBLE_IS_E              * There are 2 types for every LSL,LSR,ASL,ASR,ROR,ROL. They can be seperated as LSd <ea> and other. They can be differentiate by the size 11
00001C3C  3638 0200               1079      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001C40  4EB8 1966               1080      JSR CHECK_TYPE_DATA
00001C44  4EB8 1958               1081      JSR GET_NORMAL_SIZE
00001C48  B67C 0003               1082      CMP #%11,D3
00001C4C  6700 002A               1083      BEQ SPECIAL_SHIFT_INSTRUCTION * Only the instructions with 11 in the size parts deal with <ea> (shift memory)
00001C50  3638 0200               1084      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001C54  4EB8 1966               1085      JSR CHECK_TYPE_DATA
00001C58  4EB8 1936               1086      JSR GET_THE_THIRD_NIBBLE         * For ASd and LSd, the lat bit is 0 of third nibble is 0
00001C5C  E14B                    1087      LSL     #8,D3      * Get the last bit of the second
00001C5E  EF4B                    1088      LSL      #7,D3
00001C60  EE4B                    1089      LSR      #7,D3
00001C62  E04B                    1090      LSR      #8,D3
00001C64  B67C 0000               1091      CMP     #0,D3
00001C68  6700 FA9C               1092      BEQ    PRINT_OUT_ASD_OR_LSD
00001C6C  6000 FACE               1093      BRA    PRINT_OUT_ROD           * Could also be ROXD. If it is then invalid
00001C70  4E75                    1094      RTS
00001C72                          1095  
00001C72                          1096  
00001C72                          1097  FIRST_NIBBLE_IS_F * UNSUPPORTED
00001C72  4E75                    1098      RTS
00001C74  FFFF FFFF               1099      SIMHALT
00001C78                          1100  
00001C78                          1101  SPECIAL_SHIFT_INSTRUCTION *Asd, LSd,ROd with <ea>. Shift instructions
00001C78  3638 0200               1102      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00001C7C  4EB8 1966               1103      JSR     CHECK_TYPE_DATA
00001C80  4EB8 192E               1104      JSR     GET_THE_SECOND_NIBBLE
00001C84  E24B                    1105      LSR     #1, D3
00001C86  B67C 0001               1106      CMP     #1,D3
00001C8A  6700 FA0A               1107      BEQ     PRINT_OUT_LOGICAL_SHIFT_MEM * 001
00001C8E  B67C 0000               1108      CMP     #0,D3
00001C92  6700 FA10               1109      BEQ     PRINT_OUT_ARITH_SHIFT_MEM *000
00001C96  B67C 0003               1110      CMP     #%11,D3
00001C9A  6700 FA5E               1111      BEQ     PRINT_OUT_ROTATE_MEM * 011
00001C9E  6000 F4EE               1112      BRA     INVALID * Must be ROXd, UNSUPPORTED
00001CA2  4E75                    1113      RTS
00001CA4                          1114  
00001CA4                          1115  
00001CA4                          1116  
00001CA4                          1117  
00001CA4                          1118  
00001CA4                          1119  * Used to figure out what type of mode and address where used to print
00001CA4                          1120  REGISTER_MODE_JUMP_TABLE
00001CA4  4EF9 00001CD4           1121      JMP REGISTER_MODE_000             * Data register mode Dn
00001CAA  4EF9 00001CDE           1122      JMP REGISTER_MODE_001             * ADdress register mode   An
00001CB0  4EF9 00001CE8           1123      JMP REGISTER_MODE_010             * Indirect address register mode (An)
00001CB6  4EF9 00001CF6           1124      JMP REGISTER_MODE_011             *  Address register with increment (An)+
00001CBC  4EF9 00001D00           1125      JMP REGISTER_MODE_100             * Address register with decrement -(An)
00001CC2  4EF9 00001D0A           1126      JMP REGISTER_MODE_101             * Not supported
00001CC8  4EF9 00001D0C           1127      JMP REGISTER_MODE_110             * Not supported
00001CCE  4EF9 00001D0E           1128      JMP REGISTER_MODE_111             * This could be immediate, absolute short or absolute long
00001CD4                          1129  
00001CD4                          1130  REGISTER_MODE_000   * Print out data register Dn
00001CD4  4EB8 18BC               1131      JSR     PRINT_DATA_REGISTER
00001CD8  4EB8 1292               1132      JSR     PRINT_REGISTER_NUMBER
00001CDC  4E75                    1133      RTS
00001CDE                          1134  
00001CDE                          1135  REGISTER_MODE_001       * An
00001CDE  4EB8 18B0               1136      JSR     PRINT_ADDRESS_REGISTER
00001CE2  4EB8 1292               1137      JSR     PRINT_REGISTER_NUMBER
00001CE6  4E75                    1138      RTS
00001CE8                          1139  
00001CE8                          1140  REGISTER_MODE_010         * (An)
00001CE8  4EB8 18C8               1141      JSR     PRINT_OPEN_BRACKET
00001CEC  4EB8 1CDE               1142      JSR     REGISTER_MODE_001
00001CF0  4EB8 18D4               1143      JSR     PRINT_CLOSE_BRACKET
00001CF4  4E75                    1144      RTS
00001CF6                          1145  
00001CF6                          1146  REGISTER_MODE_011        *(An)+
00001CF6  4EB8 1CE8               1147      JSR REGISTER_MODE_010
00001CFA  4EB8 18E0               1148      JSR PRINT_PLUS_SIGN
00001CFE  4E75                    1149      RTS
00001D00                          1150  
00001D00                          1151  REGISTER_MODE_100    * -(An)
00001D00  4EB8 18EC               1152      JSR PRINT_MINUS_SIGN
00001D04  4EB8 1CE8               1153      JSR REGISTER_MODE_010
00001D08  4E75                    1154      RTS
00001D0A                          1155  
00001D0A                          1156  REGISTER_MODE_101 * Not supported yet. Will deal later
00001D0A  4E75                    1157      RTS
00001D0C                          1158  
00001D0C                          1159  REGISTER_MODE_110 * Not supported. Will deal later
00001D0C  4E75                    1160      RTS
00001D0E                          1161  
00001D0E                          1162  REGISTER_MODE_111  * Immediate data, absolute long or absolute short
00001D0E  49F9 00001D8E           1163      LEA REGISTER_111_JUMP_TABLE,A4    * Print out the appropriate value
00001D14  3638 0550               1164      MOVE.W  THIRD_TEMP_VAR,D3
00001D18  C6FC 0006               1165      MULU #6,D3
00001D1C  4EB4 3000               1166      JSR 0(A4,D3)
00001D20                          1167  
00001D20  49F9 00001D34           1168      LEA SHORT_OR_LONG_PRINT,A4 * Prepare the table to print out the data
00001D26                          1169  **    CMP #4, THIRD_TEMP_VAR      * Check if it is immediate data or Not
00001D26                          1170  *    BEQ     IMMEDIATE_DATA        * This is immediate data, need to have specific check
00001D26  3638 0550               1171      MOVE.W  THIRD_TEMP_VAR,D3
00001D2A  C6FC 0006               1172      MULU #6,D3        * Use THIRD_TEMP_VAR as a place holder for the data we want to print out for register mode 111.
00001D2E                          1173                            * In the code before this, we need to move the appropriate data into this address. Either the destination or the source
00001D2E                          1174                            *   REMEMBER TO IMPLEMENT This
00001D2E                          1175  
00001D2E  4EB4 3000               1176      JSR  0(A4,D3)     * Print out the appropriate long or short value
00001D32  4E75                    1177      RTS
00001D34                          1178  
00001D34                          1179              * Third table that deal with printing out short .W or .L value
00001D34                          1180  SHORT_OR_LONG_PRINT                     * Will jump to this when the register mode is 111 and not immediate data
00001D34  4EF9 00001D52           1181      JMP ABSOLUTE_SHORT                  * Xn index for this is 000
00001D3A  4EF9 00001D64           1182      JMP ABSOLUTE_LONG                   * Xn index for this is 001
00001D40  4EF9 00001D72           1183      JMP COUNTER_DISPLACEMENT
00001D46  4EF9 00001D76           1184      JMP COUNTER_INDEX
00001D4C  4EF9 00001D7A           1185      JMP IMMEDIATE_DATA
00001D52                          1186  
00001D52                          1187  
00001D52                          1188  
00001D52                          1189  ABSOLUTE_SHORT     *We need to get the next 4 bytes as the address to print out
00001D52  4EB8 1948               1190      JSR     GET_NEXT_FOUR_NIBBLE * Got next 4 nibbles to print out as address
00001D56  4EB8 10AA               1191      JSR     CONVERT_HEX_TO_ASCII
00001D5A  4278 0500               1192      CLR.W   SECOND_TEMP_VAR * Reset the variables after displaying
00001D5E  4E75                    1193      RTS
00001D60  FFFF FFFF               1194      SIMHALT
00001D64                          1195  
00001D64                          1196  ABSOLUTE_LONG       * Print the next 8 bytes as the address
00001D64  4EB8 1D52               1197      JSR ABSOLUTE_SHORT        * PRinted 4 bytes
00001D68  4EB8 1D52               1198      JSR ABSOLUTE_SHORT         * Printed 4 more
00001D6C  4E75                    1199      RTS
00001D6E  FFFF FFFF               1200      SIMHALT
00001D72                          1201  
00001D72                          1202  COUNTER_DISPLACEMENT           * Not SUPPORTED
00001D72  FFFF FFFF               1203      SIMHALT
00001D76                          1204  
00001D76                          1205  COUNTER_INDEX                  * Not SUPPORTED
00001D76  FFFF FFFF               1206      SIMHALT
00001D7A                          1207  
00001D7A                          1208      * Immediate data is also like absolute short and long. Will take advantage of that
00001D7A                          1209  IMMEDIATE_DATA
00001D7A  4EB8 1958               1210      JSR     GET_NORMAL_SIZE  * Now the first 2 bit of third nibble is on the right most
00001D7E  E24B                    1211      LSR     #1, D3           * Byte aand word are mapped to absolute short => 00 and 01 after shift will go to 00
00001D80                          1212                                  * If the size is long, the it will go to absolute long 10 => 01
00001D80  49F8 1D34               1213      LEA SHORT_OR_LONG_PRINT,A4 * Prepare the table to print out the data
00001D84  C6FC 0006               1214      MULU #6,D3        * Use THIRD_TEMP_VAR as a place holder for the data we want to print out for register mode 111.
00001D88                          1215                                * In the code before this, we need to move the appropriate data into this address. Either the destination or the source
00001D88                          1216                                *   REMEMBER TO IMPLEMENT This
00001D88  4EB4 3000               1217      JSR  0(A4,D3)     * Print out the appropriate long or short value
00001D8C  4E75                    1218      RTS
00001D8E                          1219  
00001D8E                          1220  REGISTER_111_JUMP_TABLE
00001D8E  4EF9 00001DAC           1221      JMP PRINT_SHORT_SYMBOL
00001D94  4EF9 00001DB2           1222      JMP PRINT_LONG_SYMBOL
00001D9A  4EF9 00001DB8           1223      JMP PLACE_HOLDER_3
00001DA0  4EF9 00001DBC           1224      JMP PLACE_HOLDER_4
00001DA6  4EF9 00001DC0           1225      JMP PRINT_IMMEDIATE_DATA_AND_HEX
00001DAC                          1226  
00001DAC                          1227  PRINT_SHORT_SYMBOL
00001DAC  4EB8 18F8               1228      JSR PRINT_HEX_SYMBOL
00001DB0  4E75                    1229      RTS
00001DB2                          1230  
00001DB2                          1231  PRINT_LONG_SYMBOL
00001DB2  4EB8 18F8               1232      JSR PRINT_HEX_SYMBOL
00001DB6  4E75                    1233      RTS
00001DB8                          1234  
00001DB8                          1235  PLACE_HOLDER_3
00001DB8  FFFF FFFF               1236      SIMHALT
00001DBC                          1237  
00001DBC                          1238  PLACE_HOLDER_4
00001DBC  FFFF FFFF               1239      SIMHALT
00001DC0                          1240  
00001DC0                          1241  PRINT_IMMEDIATE_DATA_AND_HEX
00001DC0  4EB8 191C               1242      JSR PRINT_IMMEDIATE_DATA_SYMBOL
00001DC4  4EB8 18F8               1243      JSR PRINT_HEX_SYMBOL
00001DC8  4E75                    1244      RTS
00001DCA                          1245  
00001DCA                          1246  HEX_CHARACTER_JUMP_TABLE
00001DCA  4EF9 00001E2A           1247      JMP     PRINT_HEX_0
00001DD0  4EF9 00001E36           1248      JMP     PRINT_HEX_1
00001DD6  4EF9 00001E42           1249      JMP     PRINT_HEX_2
00001DDC  4EF9 00001E4E           1250      JMP     PRINT_HEX_3
00001DE2  4EF9 00001E5A           1251      JMP     PRINT_HEX_4
00001DE8  4EF9 00001E66           1252      JMP     PRINT_HEX_5
00001DEE  4EF9 00001E72           1253      JMP     PRINT_HEX_6
00001DF4  4EF9 00001E7E           1254      JMP     PRINT_HEX_7
00001DFA  4EF9 00001E8A           1255      JMP     PRINT_HEX_8
00001E00  4EF9 00001E96           1256      JMP     PRINT_HEX_9
00001E06  4EF9 00001EA2           1257      JMP     PRINT_HEX_A
00001E0C  4EF9 00001EAE           1258      JMP     PRINT_HEX_B
00001E12  4EF9 00001EBA           1259      JMP     PRINT_HEX_C
00001E18  4EF9 00001EC6           1260      JMP     PRINT_HEX_D
00001E1E  4EF9 00001ED2           1261      JMP     PRINT_HEX_E
00001E24  4EF9 00001EDE           1262      JMP     PRINT_HEX_F
00001E2A                          1263  
00001E2A                          1264  PRINT_HEX_0
00001E2A  43F9 00002238           1265          LEA ZERO,A1
00001E30  4EB8 1848               1266          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E34  4E75                    1267          RTS
00001E36                          1268  PRINT_HEX_1
00001E36  43F9 0000223C           1269          LEA ONE,A1
00001E3C  4EB8 1848               1270          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E40  4E75                    1271          RTS
00001E42                          1272  
00001E42                          1273  PRINT_HEX_2
00001E42  43F9 00002240           1274          LEA TWO,A1
00001E48  4EB8 1848               1275          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E4C  4E75                    1276          RTS
00001E4E                          1277  
00001E4E                          1278  PRINT_HEX_3
00001E4E  43F9 00002244           1279          LEA THREE,A1
00001E54  4EB8 1848               1280          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E58  4E75                    1281          RTS
00001E5A                          1282  
00001E5A                          1283  PRINT_HEX_4
00001E5A  43F9 00002248           1284          LEA FOUR,A1
00001E60  4EB8 1848               1285          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E64  4E75                    1286          RTS
00001E66                          1287  
00001E66                          1288  PRINT_HEX_5
00001E66  43F9 0000224C           1289          LEA FIVE,A1
00001E6C  4EB8 1848               1290          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E70  4E75                    1291          RTS
00001E72                          1292  
00001E72                          1293  PRINT_HEX_6
00001E72  43F9 00002250           1294          LEA SIX,A1
00001E78  4EB8 1848               1295          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E7C  4E75                    1296          RTS
00001E7E                          1297  
00001E7E                          1298  PRINT_HEX_7
00001E7E  43F9 00002254           1299          LEA SEVEN,A1
00001E84  4EB8 1848               1300          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E88  4E75                    1301          RTS
00001E8A                          1302  
00001E8A                          1303  PRINT_HEX_8
00001E8A  43F9 00002258           1304          LEA EIGHT,A1
00001E90  4EB8 1848               1305          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001E94  4E75                    1306          RTS
00001E96                          1307  
00001E96                          1308  PRINT_HEX_9
00001E96  43F9 0000225C           1309          LEA NINE,A1
00001E9C  4EB8 1848               1310          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001EA0  4E75                    1311          RTS
00001EA2                          1312  
00001EA2                          1313  PRINT_HEX_A
00001EA2  43F9 00002260           1314          LEA A,A1
00001EA8  4EB8 1848               1315          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001EAC  4E75                    1316          RTS
00001EAE                          1317  
00001EAE                          1318  PRINT_HEX_B
00001EAE  43F9 00002264           1319          LEA B,A1
00001EB4  4EB8 1848               1320          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001EB8  4E75                    1321          RTS
00001EBA                          1322  
00001EBA                          1323  PRINT_HEX_C
00001EBA  43F9 00002268           1324          LEA C,A1
00001EC0  4EB8 1848               1325          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001EC4  4E75                    1326          RTS
00001EC6                          1327  
00001EC6                          1328  PRINT_HEX_D
00001EC6  43F9 0000226C           1329          LEA D,A1
00001ECC  4EB8 1848               1330          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001ED0  4E75                    1331          RTS
00001ED2                          1332  
00001ED2                          1333  PRINT_HEX_E
00001ED2  43F9 00002270           1334          LEA E,A1
00001ED8  4EB8 1848               1335          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001EDC  4E75                    1336          RTS
00001EDE                          1337  
00001EDE                          1338  PRINT_HEX_F
00001EDE  43F9 00002274           1339          LEA F,A1
00001EE4  4EB8 1848               1340          JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001EE8  4E75                    1341          RTS
00001EEA                          1342  
00001EEA                          1343  MOVE_SIZE_PRINT_JUMP_TABLE
00001EEA  4EF9 00001F02           1344      JMP UNSUPPORTED_MOVE_SIZE
00001EF0  4EF9 00001F08           1345      JMP MOVE_BYTE_SUFFIX
00001EF6  4EF9 00001F18           1346      JMP MOVE_LONG_SUFFIX
00001EFC  4EF9 00001F28           1347      JMP MOVE_WORD_SUFFIX
00001F02                          1348  
00001F02                          1349  UNSUPPORTED_MOVE_SIZE
00001F02  6000 F28A               1350      BRA INVALID
00001F06  4E75                    1351      RTS
00001F08                          1352  
00001F08                          1353  MOVE_BYTE_SUFFIX
00001F08  43F9 0000222C           1354      LEA BYTE_SUFFIX,A1
00001F0E  4EB8 1848               1355      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F12  4EB8 1910               1356      JSR PRINT_EMPTY_SPACE
00001F16  4E75                    1357      RTS
00001F18                          1358  
00001F18                          1359  MOVE_LONG_SUFFIX
00001F18  43F9 00002234           1360      LEA LONG_SUFFIX,A1
00001F1E  4EB8 1848               1361      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F22  4EB8 1910               1362      JSR PRINT_EMPTY_SPACE
00001F26  4E75                    1363      RTS
00001F28                          1364  
00001F28                          1365  MOVE_WORD_SUFFIX
00001F28  43F9 00002230           1366      LEA WORD_SUFFIX,A1
00001F2E  4EB8 1848               1367      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F32  4EB8 1910               1368      JSR PRINT_EMPTY_SPACE
00001F36  4E75                    1369      RTS
00001F38                          1370  
00001F38                          1371  
00001F38                          1372  NORMAL_SIZE_PRINT_JUMP_TABLE
00001F38  4EF9 00001F50           1373      JMP PRINT_NORMAL_BYTE_SUFFIX
00001F3E  4EF9 00001F60           1374      JMP PRINT_NORMAL_WORD_SUFFIX
00001F44  4EF9 00001F70           1375      JMP PRINT_NORMAL_LONG_SUFFIX
00001F4A  4EF9 00001F80           1376      JMP UNSUPPORTED_NORMAL_SUFFIX         * Could be move
00001F50                          1377  
00001F50                          1378  PRINT_NORMAL_BYTE_SUFFIX
00001F50  43F9 0000222C           1379      LEA BYTE_SUFFIX,A1
00001F56  4EB8 1848               1380      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F5A  4EB8 1910               1381      JSR PRINT_EMPTY_SPACE
00001F5E  4E75                    1382      RTS
00001F60                          1383  
00001F60                          1384  PRINT_NORMAL_WORD_SUFFIX
00001F60  43F9 00002230           1385      LEA WORD_SUFFIX,A1
00001F66  4EB8 1848               1386      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F6A  4EB8 1910               1387      JSR PRINT_EMPTY_SPACE
00001F6E  4E75                    1388      RTS
00001F70                          1389  
00001F70                          1390  PRINT_NORMAL_LONG_SUFFIX
00001F70  43F9 00002234           1391      LEA LONG_SUFFIX,A1
00001F76  4EB8 1848               1392      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00001F7A  4EB8 1910               1393      JSR PRINT_EMPTY_SPACE
00001F7E  4E75                    1394      RTS
00001F80                          1395  
00001F80                          1396  UNSUPPORTED_NORMAL_SUFFIX * Could be Move to CCR 11
00001F80  6000 F20C               1397      BRA INVALID
00001F84  4E75                    1398      RTS
00001F86                          1399  
00001F86                          1400  
00001F86                          1401  *This jump table depends on the condition of Bcc
00001F86                          1402  CONDITION_JUMP_TABLE
00001F86  4EF9 00001FE6           1403      JMP    CONDITION_TRUE
00001F8C  4EF9 00001FEA           1404      JMP    CONDITION_FALSE
00001F92  4EF9 00001FEE           1405      JMP    CONDITION_HIGHER
00001F98  4EF9 00001FF2           1406      JMP    CONDITION_LOWER_OR_SAME
00001F9E  4EF9 00001FF6           1407      JMP    CONDITION_CARRY_CLEAR
00001FA4  4EF9 00001FFA           1408      JMP    CONDITION_CARRY_SET                * Supported
00001FAA  4EF9 0000200A           1409      JMP    CONDITION_NOT_EQUAL
00001FB0  4EF9 0000200E           1410      JMP    CONDITION_EQUAL
00001FB6  4EF9 00002012           1411      JMP    CONDITION_OVERFLOW_CLEAR            * Supported
00001FBC  4EF9 00002022           1412      JMP    CONDITION_OVERFLOW_SET
00001FC2  4EF9 00002026           1413      JMP    CONDITION_PLUS
00001FC8  4EF9 0000202A           1414      JMP    CONDITION_MINUS
00001FCE  4EF9 0000202E           1415      JMP    CONDITION_GREATER_OR_EQUAL         * Supported
00001FD4  4EF9 0000203E           1416      JMP    CONDITION_LESS_THAN                * SUPPORTED
00001FDA  4EF9 0000204E           1417      JMP    CONDITION_GREATER_THAN
00001FE0  4EF9 00002052           1418      JMP    CONDITION_LESS_OR_EQUAL
00001FE6                          1419  
00001FE6                          1420  
00001FE6                          1421  CONDITION_TRUE
00001FE6  6000 F1A6               1422      BRA     INVALID
00001FEA                          1423  CONDITION_FALSE
00001FEA  6000 F1A2               1424      BRA     INVALID
00001FEE                          1425  CONDITION_HIGHER
00001FEE  6000 F19E               1426      BRA     INVALID
00001FF2                          1427  CONDITION_LOWER_OR_SAME
00001FF2  6000 F19A               1428      BRA     INVALID
00001FF6                          1429  CONDITION_CARRY_CLEAR
00001FF6  6000 F196               1430      BRA     INVALID
00001FFA                          1431  
00001FFA                          1432  
00001FFA                          1433  
00001FFA                          1434  CONDITION_CARRY_SET
00001FFA  43F9 000021F2           1435      LEA     CARRY_SET_VALUE,A1
00002000  4EB8 1848               1436      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
00002004  4EB8 1910               1437      JSR    PRINT_EMPTY_SPACE
00002008  4E75                    1438      RTS
0000200A                          1439  
0000200A                          1440  
0000200A                          1441  
0000200A                          1442  
0000200A                          1443  
0000200A                          1444  
0000200A                          1445  
0000200A                          1446  CONDITION_NOT_EQUAL
0000200A  6000 F182               1447      BRA     INVALID
0000200E                          1448  CONDITION_EQUAL
0000200E  6000 F17E               1449      BRA     INVALID
00002012                          1450  
00002012                          1451  CONDITION_OVERFLOW_CLEAR
00002012  43F9 000021E6           1452      LEA    OVERFLOW_CLEAR_VALUE,A1
00002018  4EB8 1848               1453      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
0000201C  4EB8 1910               1454      JSR    PRINT_EMPTY_SPACE
00002020  4E75                    1455      RTS
00002022                          1456  
00002022                          1457  
00002022                          1458  
00002022                          1459  CONDITION_OVERFLOW_SET
00002022  6000 F16A               1460      BRA     INVALID
00002026                          1461  CONDITION_PLUS
00002026  6000 F166               1462      BRA     INVALID
0000202A                          1463  CONDITION_MINUS
0000202A  6000 F162               1464      BRA     INVALID
0000202E                          1465  
0000202E                          1466  
0000202E                          1467  CONDITION_GREATER_OR_EQUAL
0000202E  43F9 000021EA           1468      LEA    GREATER_OR_EQUAL_VALUE,A1
00002034  4EB8 1848               1469      JSR    PRINT_TO_SCREEN_ENTIRE_STRING
00002038  4EB8 1910               1470      JSR    PRINT_EMPTY_SPACE
0000203C  4E75                    1471      RTS
0000203E                          1472  
0000203E                          1473  
0000203E                          1474  
0000203E                          1475  
0000203E                          1476  CONDITION_LESS_THAN
0000203E  43F9 000021EE           1477      LEA   LESS_THAN_VALUE,A1
00002044  4EB8 1848               1478      JSR   PRINT_TO_SCREEN_ENTIRE_STRING
00002048  4EB8 1910               1479      JSR   PRINT_EMPTY_SPACE
0000204C  4E75                    1480      RTS
0000204E                          1481  
0000204E                          1482  
0000204E                          1483  
0000204E                          1484  
0000204E                          1485  CONDITION_GREATER_THAN
0000204E  6000 F13E               1486      BRA     INVALID
00002052                          1487  CONDITION_LESS_OR_EQUAL
00002052  6000 F13A               1488      BRA     INVALID
00002056                          1489  
00002056                          1490  RIGHT_OR_LEFT_JUMP_TABLE
00002056  4EF9 00002062           1491      JMP   RIGHT_DIRECTION_PRINT
0000205C  4EF9 0000206E           1492      JMP   LEFT_DIRECTION_PRINT
00002062                          1493  
00002062                          1494  
00002062                          1495  RIGHT_DIRECTION_PRINT
00002062  43F9 000021C8           1496      LEA RIGHT_DIRECTION,A1
00002068  4EB8 1848               1497      JSR PRINT_TO_SCREEN_ENTIRE_STRING
0000206C  4E75                    1498      RTS
0000206E                          1499  
0000206E                          1500  LEFT_DIRECTION_PRINT
0000206E  43F9 000021C4           1501      LEA LEFT_DIRECTION,A1
00002074  4EB8 1848               1502      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00002078  4E75                    1503      RTS
0000207A                          1504  
0000207A                          1505  
0000207A                          1506  IMMEDIATE_OR_REGISTER_JUMP_TABLE       * Use for ASd, LSd, ROd operations
0000207A  4EF9 00002086           1507      JMP   IMMEDIATE_ROTATION
00002080  4EF9 000020B4           1508      JMP   REGISTER_ROTATION
00002086                          1509  
00002086                          1510  IMMEDIATE_ROTATION
00002086  43F9 00002228           1511      LEA IMMEDIATE_DATA_SYMBOL,A1
0000208C  4EB8 1848               1512      JSR PRINT_TO_SCREEN_ENTIRE_STRING
00002090  3638 0200               1513      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
00002094  4EB8 192E               1514      JSR  GET_THE_SECOND_NIBBLE
00002098  E24B                    1515      LSR #1,D3
0000209A  B67C 0000               1516      CMP #0,D3
0000209E  6700 003A               1517      BEQ IMMEDIATE_ROTATION_HELPER  * For cases where the immediate is 0, make it 8
000020A2  31C3 0550               1518      MOVE.W D3, THIRD_TEMP_VAR * Save the immediate data 1-8 we want to print
000020A6  4EB8 1292               1519      JSR PRINT_REGISTER_NUMBER
000020AA  4EB8 18A4               1520      JSR PRINT_COMMA
000020AE  4EB8 1910               1521      JSR PRINT_EMPTY_SPACE
000020B2  4E75                    1522      RTS
000020B4                          1523  
000020B4                          1524  REGISTER_ROTATION
000020B4  43F9 00002210           1525      LEA DATA_REGISTER,A1
000020BA  4EB8 1848               1526      JSR PRINT_TO_SCREEN_ENTIRE_STRING
000020BE  3638 0200               1527      MOVE.W TEMP_CURRENT_4_NIBBLES,D3
000020C2  4EB8 192E               1528      JSR GET_THE_SECOND_NIBBLE
000020C6  E24B                    1529      LSR #1,D3
000020C8  31C3 0550               1530      MOVE.W D3,THIRD_TEMP_VAR
000020CC  4EB8 1292               1531      JSR PRINT_REGISTER_NUMBER
000020D0  4EB8 18A4               1532      JSR PRINT_COMMA
000020D4  4EB8 1910               1533      JSR PRINT_EMPTY_SPACE
000020D8  4E75                    1534      RTS
000020DA                          1535  
000020DA                          1536  IMMEDIATE_ROTATION_HELPER
000020DA  31FC 0008 0550          1537      MOVE.W #8,THIRD_TEMP_VAR
000020E0  4EB8 1292               1538      JSR PRINT_REGISTER_NUMBER
000020E4  4EB8 18A4               1539      JSR PRINT_COMMA
000020E8  4EB8 1910               1540      JSR PRINT_EMPTY_SPACE
000020EC  4E75                    1541      RTS
000020EE                          1542  
000020EE                          1543  
000020EE                          1544  
000020EE                          1545  ******************************************************************
000020EE                          1546  * Constant String that is used to print out the data is stored here
000020EE                          1547  ******************************************************************
000020EE= 506C 6561 7365 2...     1548  INTRO_STARTING   DC.W   'Please enter starting address',0
0000210E= 506C 6561 7365 2...     1549  INTRO_ENDING     DC.W   'Please enter ending address',0
0000212C= 494E 5641 4C49 4...     1550  INVALID_INPUT    DC.W   'INVALID ADDRESS ENTERED',0
00002146= 4E4F 5000 0000          1551  NOP_VALUE        DC.W   'NOP',0
0000214C= 5254 5300 0000          1552  RTS_VALUE        DC.W   'RTS',0
00002152= 4F52 4900 0000          1553  ORI_VALUE        DC.W   'ORI',0
00002158= 4A53 5200 0000          1554  JSR_VALUE        DC.W   'JSR',0
0000215E= 4C45 4100 0000          1555  LEA_VALUE        DC.W    'LEA',0
00002164= 4E45 4700 0000          1556  NEG_VALUE        DC.W    'NEG',0
0000216A= 434D 5049 0000          1557  CMPI_VALUE      DC.W     'CMPI',0
00002170= 434D 5000 0000          1558  CMP_VALUE        DC.W     'CMP',0
00002176= 5355 4200 0000          1559  SUB_VALUE        DC.W     'SUB',0
0000217C= 5355 4241 0000          1560  SUBA_VALUE       DC.W     'SUBA',0
00002182= 5355 4251 0000          1561  SUBQ_VALUE       DC.W    'SUBQ',0
00002188= 4449 5653 0000          1562  DIVS_VALUE       DC.W     'DIVS',0
0000218E= 4252 4100 0000          1563  BRA_VALUE        DC.W      'BRA',0
00002194= 4253 5200 0000          1564  BSR_VALUE        DC.W     'BSR',0
0000219A= 4D55 4C53 0000          1565  MULS_VALUE       DC.W       'MULS',0
000021A0= 4D55 4C55 0000          1566  MULU_VALUE       DC.W       'MULU',0
000021A6= 4144 4400 0000          1567  ADD_VALUE        DC.W     'ADD',0
000021AC= 4144 4441 0000          1568  ADDA_VALUE        DC.W      'ADDA',0
000021B2= 4144 4451 0000          1569  ADDQ_VALUE       DC.W     'ADDQ',0
000021B8= 4153 0000               1570  AS_VALUE         DC.W     'AS',0
000021BC= 4C53 0000               1571  LS_VALUE         DC.W     'LS',0
000021C0= 524F 0000               1572  RO_VALUE         DC.W     'RO',0
000021C4= 4C00 0000               1573  LEFT_DIRECTION   DC.W     'L',0
000021C8= 5200 0000               1574  RIGHT_DIRECTION  DC.W     'R',0
000021CC= 4F52 0000               1575  OR_VALUE         DC.W     'OR',0
000021D0= 4D4F 5645 4100 0000     1576  MOVEA_VALUE      DC.W    'MOVEA',0
000021D8= 4D4F 5645 0000          1577  MOVE_VALUE       DC.W    'MOVE',0
000021DE= 4D4F 5645 5100 0000     1578  MOVEQ_VALUE      DC.W    'MOVEQ',0
000021E6= 5643 0000               1579  OVERFLOW_CLEAR_VALUE     DC.W    'VC',0
000021EA= 4745 0000               1580  GREATER_OR_EQUAL_VALUE   DC.W    'GE',0
000021EE= 4C54 0000               1581  LESS_THAN_VALUE          DC.W     'LT',0
000021F2= 4353 0000               1582  CARRY_SET_VALUE          DC.W     'CS',0
000021F6= 5352 0000               1583  SR_VALUE         DC.W   'SR',0
000021FA= 4343 5200 0000          1584  CCR_VALUE        DC.W   'CCR',0
00002200= 2800 0000               1585  OPENING_BRACKET  DC.W   '(',0
00002204= 2900 0000               1586  CLOSING_BRACKET  DC.W   ')',0
00002208= 2B00 0000               1587  PLUS_SIGN        DC.W   '+',0
0000220C= 2D00 0000               1588  MINUS_SIGN       DC.W   '-',0
00002210= 4400 0000               1589  DATA_REGISTER    DC.W   'D',0
00002214= 4100 0000               1590  ADDRESS_REGISTER DC.W   'A',0
00002218= 2C00 0000               1591  COMMA            DC.W   ',',0
0000221C= 2000 0000               1592  SPACE            DC.W    ' ',0
00002220= 2500 0000               1593  BINARY_SYMBOL    DC.W   '%',0
00002224= 2400 0000               1594  HEX_SYMBOL      DC.W    '$',0
00002228= 2300 0000               1595  IMMEDIATE_DATA_SYMBOL   DC.W    '#',0
0000222C= 2E42 0000               1596  BYTE_SUFFIX      DC.W   '.B',0
00002230= 2E57 0000               1597  WORD_SUFFIX      DC.W    '.W',0
00002234= 2E4C 0000               1598  LONG_SUFFIX      DC.W    '.L',0
00002238                          1599  
00002238= 3000 0000               1600  ZERO            DC.W    '0',0
0000223C= 3100 0000               1601  ONE            DC.W     '1',0
00002240= 3200 0000               1602  TWO            DC.W     '2',0
00002244= 3300 0000               1603  THREE            DC.W   '3',0
00002248= 3400 0000               1604  FOUR            DC.W    '4',0
0000224C= 3500 0000               1605  FIVE            DC.W     '5',0
00002250= 3600 0000               1606  SIX             DC.W    '6',0
00002254= 3700 0000               1607  SEVEN           DC.W    '7',0
00002258= 3800 0000               1608  EIGHT          DC.W     '8',0
0000225C= 3900 0000               1609  NINE           DC.W     '9',0
00002260= 4100 0000               1610  A             DC.W      'A',0
00002264= 4200 0000               1611  B             DC.W      'B',0
00002268= 4300 0000               1612  C             DC.W      'C',0
0000226C= 4400 0000               1613  D            DC.W       'D',0
00002270= 4500 0000               1614  E            DC.W       'E',0
00002274= 4600 0000               1615  F            DC.W       'F',0
00002278                          1616  
00002278                          1617  
00002278                          1618  
00002278                          1619  
00002278                          1620  
00002278                          1621  
00002278                          1622  
00002278                          1623  
00002278                          1624  
00002278                          1625  
00002278                          1626  
00002278                          1627  
00002278                          1628  
00002278                          1629  
00002278                          1630      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   2260
ABSOLUTE_LONG       1D64
ABSOLUTE_SHORT      1D52
ADDA_VALUE          21AC
ADDQ_AND_SUBQ_HELPER  1304
ADDQ_VALUE          21B2
ADDRESS_REGISTER    2214
ADD_AND_SUB_HELPER  1522
ADD_VALUE           21A6
ASD_LSD_ROD_HELPER_FUNCTION  175E
ASD_LSD_ROD_SHIFT_HELPER  16B2
AS_VALUE            21B8
B                   2264
BINARY_SYMBOL       2220
BRA_VALUE           218E
BSR_VALUE           2194
BYTE_SUFFIX         222C
C                   2268
CARRY_SET_VALUE     21F2
CCR_VALUE           21FA
CHECK_TYPE_DATA     1966
CHECK_VALID_ADDRESS  1024
CLOSING_BRACKET     2204
CMPI_VALUE          216A
CMP_VALUE           2170
COMMA               2218
CONDITION_CARRY_CLEAR  1FF6
CONDITION_CARRY_SET  1FFA
CONDITION_EQUAL     200E
CONDITION_FALSE     1FEA
CONDITION_GREATER_OR_EQUAL  202E
CONDITION_GREATER_THAN  204E
CONDITION_HIGHER    1FEE
CONDITION_JUMP_TABLE  1F86
CONDITION_LESS_OR_EQUAL  2052
CONDITION_LESS_THAN  203E
CONDITION_LOWER_OR_SAME  1FF2
CONDITION_MINUS     202A
CONDITION_NOT_EQUAL  200A
CONDITION_OVERFLOW_CLEAR  2012
CONDITION_OVERFLOW_SET  2022
CONDITION_PLUS      2026
CONDITION_TRUE      1FE6
CONVERT_ASCII_TO_HEX  1060
CONVERT_CHARACTER_ASCII_TO_HEX  1086
CONVERT_HEX_TO_ASCII  10AA
COUNTER_DISPLACEMENT  1D72
COUNTER_INDEX       1D76
D                   226C
DATA_REGISTER       2210
DESTINATION_MODE    300
DESTINATION_VAR     250
DIVS_VALUE          2188
E                   2270
EIGHT               2258
ENDING_ADDRESS      150
ERROR_INVALID_INPUT  1186
F                   2274
FIFTH_TEMP_VAR      650
FINISH_CONVERT_ENDING_ADDRESS  1128
FINISH_CONVERT_STARTING_ADDRESS  110E
FIRST_NIBBLE_4_SECOND_NIBBLE_E  19AC
FIRST_NIBBLE_IS_0   1A64
FIRST_NIBBLE_IS_1   1A76
FIRST_NIBBLE_IS_2   1A7E
FIRST_NIBBLE_IS_3   1A86
FIRST_NIBBLE_IS_4   1A8E
FIRST_NIBBLE_IS_5   1ABA
FIRST_NIBBLE_IS_6   1AF0
FIRST_NIBBLE_IS_7   1B12
FIRST_NIBBLE_IS_8   1B6C
FIRST_NIBBLE_IS_9   1B92
FIRST_NIBBLE_IS_A   1BAE
FIRST_NIBBLE_IS_B   1BB4
FIRST_NIBBLE_IS_C   1BE8
FIRST_NIBBLE_IS_D   1C1E
FIRST_NIBBLE_IS_E   1C3C
FIRST_NIBBLE_IS_F   1C72
FIRST_NIBBLE_JUMP_TABLE  1A04
FIVE                224C
FOUR                2248
FOURTH_TEMP_VAR     600
GET_END_ADDRESS     1024
GET_NEXT_FOUR_NIBBLE  1948
GET_NEXT_TWO_NIBBLE  1950
GET_NORMAL_SIZE     1958
GET_START_ADDRESS   1000
GET_THE_FIRST_NIBBLE  1928
GET_THE_FOURTH_NIBBLE  193E
GET_THE_SECOND_NIBBLE  192E
GET_THE_THIRD_NIBBLE  1936
GREATER_OR_EQUAL_VALUE  21EA
HEX_CHARACTER_JUMP_TABLE  1DCA
HEX_SYMBOL          2224
IMMEDIATE_DATA      1D7A
IMMEDIATE_DATA_SYMBOL  2228
IMMEDIATE_OR_REGISTER_JUMP_TABLE  207A
IMMEDIATE_ROTATION  2086
IMMEDIATE_ROTATION_HELPER  20DA
INTRO_ENDING        210E
INTRO_STARTING      20EE
INVALID             118E
INVALID_ENDING_ADDRESS  1168
INVALID_INPUT       212C
INVALID_STARTING_ADDRESS  1152
JSR_VALUE           2158
LEA_VALUE           215E
LEFT_DIRECTION      21C4
LEFT_DIRECTION_PRINT  206E
LESS_THAN_VALUE     21EE
LONG_SUFFIX         2234
LS_VALUE            21BC
MINUS_SIGN          220C
MOVEA_VALUE         21D0
MOVEQ_VALUE         21DE
MOVE_BYTE_SUFFIX    1F08
MOVE_LONG_SUFFIX    1F18
MOVE_OPCODE_HELPER  17D6
MOVE_SECOND_OPCODE_HELPER  1808
MOVE_SIZE_PRINT_JUMP_TABLE  1EEA
MOVE_VALUE          21D8
MOVE_WORD_SUFFIX    1F28
MULS_VALUE          219A
MULU_VALUE          21A0
NEG_VALUE           2164
NINE                225C
NOP_VALUE           2146
NORMAL_SIZE_PRINT_JUMP_TABLE  1F38
ONE                 223C
OPENING_BRACKET     2200
ORI_VALUE           2152
OR_VALUE            21CC
OVERFLOW_CLEAR_VALUE  21E6
PARSING_OP_CODE     103E
PLACE_HOLDER_3      1DB8
PLACE_HOLDER_4      1DBC
PLUS_SIGN           2208
PREPARE_START_AND_END_ADDRESS  10FC
PRINT_ADDRESS_LOCATION  1884
PRINT_ADDRESS_REGISTER  18B0
PRINT_BINARY_SYMBOL  1904
PRINT_CLOSE_BRACKET  18D4
PRINT_COMMA         18A4
PRINT_DATA_MODE_DESTINATION  186A
PRINT_DATA_MODE_SOURCE  1850
PRINT_DATA_REGISTER  18BC
PRINT_EMPTY_SPACE   1910
PRINT_HEX_0         1E2A
PRINT_HEX_1         1E36
PRINT_HEX_2         1E42
PRINT_HEX_3         1E4E
PRINT_HEX_4         1E5A
PRINT_HEX_5         1E66
PRINT_HEX_6         1E72
PRINT_HEX_7         1E7E
PRINT_HEX_8         1E8A
PRINT_HEX_9         1E96
PRINT_HEX_A         1EA2
PRINT_HEX_B         1EAE
PRINT_HEX_C         1EBA
PRINT_HEX_D         1EC6
PRINT_HEX_E         1ED2
PRINT_HEX_F         1EDE
PRINT_HEX_SYMBOL    18F8
PRINT_IMMEDIATE_DATA_AND_HEX  1DC0
PRINT_IMMEDIATE_DATA_SYMBOL  191C
PRINT_LONG_SYMBOL   1DB2
PRINT_MINUS_SIGN    18EC
PRINT_NORMAL_BYTE_SUFFIX  1F50
PRINT_NORMAL_LONG_SUFFIX  1F70
PRINT_NORMAL_SUFFIX  1274
PRINT_NORMAL_WORD_SUFFIX  1F60
PRINT_OPEN_BRACKET  18C8
PRINT_OUT_ADD       150E
PRINT_OUT_ADDA      14AA
PRINT_OUT_ADDQ      12F0
PRINT_OUT_ARITH_SHIFT_MEM  16A4
PRINT_OUT_ASD       1720
PRINT_OUT_ASD_OR_LSD  1706
PRINT_OUT_BCC       164C
PRINT_OUT_BRA       15E8
PRINT_OUT_BSR       161A
PRINT_OUT_CMP       1458
PRINT_OUT_CMPI      121C
PRINT_OUT_DIVS      1374
PRINT_OUT_JSR       11F6
PRINT_OUT_LEA       12AC
PRINT_OUT_LOGICAL_SHIFT_MEM  1696
PRINT_OUT_LSD       172E
PRINT_OUT_MOVE      17FC
PRINT_OUT_MOVEA     17F0
PRINT_OUT_MULS      13B8
PRINT_OUT_MULU      1408
PRINT_OUT_NEG       1190
PRINT_OUT_NOP       11B6
PRINT_OUT_OR        1504
PRINT_OUT_ORI_TO_SR  11E2
PRINT_OUT_ROD       173C
PRINT_OUT_ROTATE_MEM  16FA
PRINT_OUT_RTS       11CC
PRINT_OUT_SUB       1518
PRINT_OUT_SUBA      14A0
PRINT_OUT_SUBQ      12FA
PRINT_PLUS_SIGN     18E0
PRINT_REGISTER_NUMBER  1292
PRINT_SHORT_SYMBOL  1DAC
PRINT_TO_SCREEN_ENTIRE_STRING  1848
REGISTER_111_JUMP_TABLE  1D8E
REGISTER_MODE_000   1CD4
REGISTER_MODE_001   1CDE
REGISTER_MODE_010   1CE8
REGISTER_MODE_011   1CF6
REGISTER_MODE_100   1D00
REGISTER_MODE_101   1D0A
REGISTER_MODE_110   1D0C
REGISTER_MODE_111   1D0E
REGISTER_MODE_JUMP_TABLE  1CA4
REGISTER_NUMBER_TO_PRINT  700
REGISTER_ROTATION   20B4
RIGHT_DIRECTION     21C8
RIGHT_DIRECTION_PRINT  2062
RIGHT_OR_LEFT_JUMP_TABLE  2056
RO_VALUE            21C0
RTS_VALUE           214C
SECOND_NIBBLE_IS_0  19E0
SECOND_NIBBLE_IS_E  19EE
SECOND_TEMP_VAR     500
SEVEN               2254
SHORT_OR_LONG_PRINT  1D34
SIX                 2250
SIZE                450
SOURCE_MODE         350
SOURCE_VAR          400
SPACE               221C
SPECIAL_SHIFT_INSTRUCTION  1C78
SR_VALUE            21F6
START               1000
STARTING_ADDRESS    100
SUBA_AND_ADDA_HELPER  14B4
SUBA_VALUE          217C
SUBQ_HELPER_FUNCTION  1350
SUBQ_VALUE          2182
SUB_HELPER_FUNCTION  156E
SUB_HELPER_REGISTER_TO_MEM  15C6
SUB_VALUE           2176
TEMP_CURRENT_2_NIBBLES  750
TEMP_CURRENT_4_NIBBLES  200
THIRD_TEMP_VAR      550
THREE               2244
TWO                 2240
UNSUPPORTED_MOVE_SIZE  1F02
UNSUPPORTED_NORMAL_SUFFIX  1F80
USER_INPUT_ENTER    117E
WORD_SUFFIX         2230
ZERO                2238
