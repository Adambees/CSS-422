00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/11/2018 2:40:42 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68k Disassembler
00000000                             3  * Written by : Thuan Tran
00000000                             4  * Date       : March 11th, 2018
00000000                             5  * Description: Load a test file, enter starting and ending address. Press enter to see it disassemble every line
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  *** A2 will be used as the address in which it will iterate through all the way until ending adrress
00000000                             9  *** A3 will be used to store the ending address
00000000                            10  
00000000  =00000100                 11  STARTING_ADDRESS            EQU    $100 * User input starting address
00000000  =00000150                 12  ENDING_ADDRESS              EQU    $150 * User input ending address
00000000  =00000200                 13  TEMP_CURRENT_4_NIBBLES      EQU    $200 * Temporary variable to hold 4 nibble at a time
00000000  =00000250                 14  DESTINATION_VAR             EQU    $250 * Used to hold the Address number     (11-9th bit)
00000000  =00000300                 15  DESTINATION_MODE            EQU    $300 * Used to hold the mode of destination (8-6 bit)
00000000  =00000350                 16  SOURCE_MODE                 EQU    $350 * used to hold the mode of the source (5-3)
00000000  =00000400                 17  SOURCE_VAR                  EQU    $400 * Used to hold the address number of source (2-0 bit)
00000000  =00000550                 18  THIRD_TEMP_VAR              EQU    $550 * Used as an arbitrary storage for data
00000000  =00000600                 19  FOURTH_TEMP_VAR             EQU    $600
00000000  =00000650                 20  FIFTH_TEMP_VAR              EQU    $650
00000000  =00000750                 21  TEMP_CURRENT_2_NIBBLES      EQU    $750 * Temporary variable to store 2 nibble at a time
00000000                            22  
00000000                            23  ********* Beginning of the program
00000000                            24  
00001000                            25      ORG    $1000
00001000                            26  START:                  ; first instruction of program
00001000                            27  
00001000                            28  
00001000                            29  *****************************************
00001000                            30  * Start of input and parsing op code section
00001000                            31  *****************************************
00001000                            32  
00001000                            33  GET_START_ADDRESS
00001000  43F9 0000218E             34      LEA         INTRO_STARTING,A1  * Welcome the user
00001006  103C 000D                 35      MOVE.B      #13,D0              * Nice to have carry and line feed
0000100A  4E4F                      36      TRAP        #15
0000100C  227C 00000000             37      MOVEA.L     #0,A1               * Clear what is in A1
00001012  43F8 0650                 38      LEA         FIFTH_TEMP_VAR,A1   * This was made so that when we read a string, it won't overide (A1)
00001016  4240                      39      CLR         D0
00001018  4241                      40      CLR         D1
0000101A  103C 0002                 41      MOVE.B      #2,D0               * Get a string input that represent the user
0000101E  4E4F                      42      TRAP        #15
00001020  6000 003E                 43      BRA         CONVERT_ASCII_TO_HEX
00001024                            44  
00001024                            45  GET_END_ADDRESS
00001024  43F9 000021AE             46      LEA         INTRO_ENDING,A1     * Now time to get the ending address
0000102A  103C 000D                 47      MOVE.B      #13,D0
0000102E  4E4F                      48      TRAP        #15
00001030  43F8 0600                 49      LEA         FOURTH_TEMP_VAR,A1  *Same like get starting address
00001034  103C 0002                 50      MOVE.B      #2,D0
00001038  4E4F                      51      TRAP        #15
0000103A  6000 0024                 52      BRA         CONVERT_ASCII_TO_HEX
0000103E                            53  
0000103E                            54  PARSING_OP_CODE                 * Decode the next four nibble. Will go throug each 2 nibbles at a time
0000103E  4EB9 000018F6             55      JSR         PRINT_ADDRESS_LOCATION
00001044  4EB9 000019AE             56      JSR         GET_NEXT_FOUR_NIBBLE
0000104A  3638 0200                 57      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
0000104E  4EB9 0000198E             58      JSR         GET_THE_FIRST_NIBBLE
00001054  C6FC 0006                 59      MULU        #6,D3
00001058  4EB0 3000                 60      JSR         0(A0,D3)          * Jump to the table depemding on first nibble
0000105C  FFFF FFFF                 61      SIMHALT
00001060                            62  
00001060                            63  *** This is called during the first part of program, when trying to convert user starting and ending address
00001060                            64  
00001060                            65  CONVERT_ASCII_TO_HEX            * ascii table http://www.asciitable.com/
00001060  1019                      66      MOVE.B      (A1)+,D0             * Go through each byte of the address
00001062  B03C 0030                 67      CMP.B       #$30,D0             * Valid data are from $30 - $39 ( 0-9) and $41 - $46 (A-F)
00001066  6D00 00B8                 68      BLT         ERROR_INVALID_INPUT
0000106A  B03C 0039                 69      CMP.B       #$39,D0             * check if in the range number of hex character
0000106E  6E00 0016                 70      BGT         CONVERT_CHARACTER_ASCII_TO_HEX
00001072  0400 0030                 71      SUB.B       #$30,D0             * Get the hex range from '0-9'
00001076  D680                      72      ADD.L       D0,D3
00001078  5341                      73      SUBI        #1,D1               * Decrement the counter for length of address
0000107A  B23C 0000                 74      CMP.B       #0,D1
0000107E  6700 002A                 75      BEQ         FINISH_CONVERT_STARTING_ADDRESS
00001082  E98B                      76      LSL.L       #4,D3               * Get space for next nibble
00001084  60DA                      77      BRA         CONVERT_ASCII_TO_HEX
00001086                            78  
00001086                            79  CONVERT_CHARACTER_ASCII_TO_HEX
00001086  B03C 0041                 80      CMP.B       #$41,D0             * At this point, the data must be larger than number
0000108A  6D00 0094                 81      BLT         ERROR_INVALID_INPUT * Only $41 - 46 are valid
0000108E  B03C 0046                 82      CMP.B       #$46,D0
00001092  6E00 008C                 83      BGT         ERROR_INVALID_INPUT * Greater than $46, nope
00001096  0400 0037                 84      SUB.B       #$37,D0             * Get the A-F value
0000109A  D680                      85      ADD.L       D0,D3               * Save the value
0000109C  5341                      86      SUBI        #1,D1               * Decrement the counter
0000109E  B23C 0000                 87      CMP.B       #0,D1
000010A2  6700 0006                 88      BEQ         FINISH_CONVERT_STARTING_ADDRESS
000010A6  E98B                      89      LSL.L       #4,D3               * Shift the value to the left 4 bits to save room for another nibble
000010A8  60B6                      90      BRA         CONVERT_ASCII_TO_HEX
000010AA                            91  
000010AA                            92  
000010AA                            93  
000010AA                            94  FINISH_CONVERT_STARTING_ADDRESS
000010AA  0803 0000                 95      BTST        #0,D3               * Test last bit of the address to see if it is even or odd
000010AE  6600 0040                 96      BNE         INVALID_STARTING_ADDRESS
000010B2  B47C 0001                 97      CMP         #1,D2               * Check if we are doing starting or ending address
000010B6  6700 000C                 98      BEQ         FINISH_CONVERT_ENDING_ADDRESS
000010BA  5242                      99      ADDI        #1,D2               * Counter to make sure that we are doing the ending address
000010BC  21C3 0100                100      MOVE.L      D3,STARTING_ADDRESS
000010C0  6000 FF62                101      BRA         GET_END_ADDRESS
000010C4                           102  
000010C4                           103  FINISH_CONVERT_ENDING_ADDRESS
000010C4  0803 0000                104      BTST        #0,D3                        * Check for odd address
000010C8  6600 003E                105      BNE         INVALID_ENDING_ADDRESS
000010CC  B6B8 0100                106      CMP.L       STARTING_ADDRESS, D3         * Check if the ending address is less than or equal starting address
000010D0  6F00 0036                107      BLE         INVALID_ENDING_ADDRESS
000010D4  4242                     108      CLR.W       D2                           * Clear the second data register for future use
000010D6  21C3 0150                109      MOVE.L      D3,ENDING_ADDRESS
000010DA  4243                     110      CLR.W       D3
000010DC  43F9 00002310            111      LEA         SPACE,A1
000010E2  103C 000D                112      MOVE.B      #13,D0
000010E6  4E4F                     113      TRAP        #15
000010E8  6000 0090                114      BRA         PREPARE_START_AND_END_ADDRESS
000010EC  FFFF FFFF                115      SIMHALT
000010F0                           116  
000010F0                           117  ** Called when invalid address are entered. Display the prompt and ask user to enter again
000010F0                           118  INVALID_STARTING_ADDRESS
000010F0  227C 00000000            119      MOVEA.L     #0,A1
000010F6  43F9 000021CC            120      LEA         INVALID_INPUT,A1
000010FC  103C 000D                121      MOVE.B      #13,D0
00001100  4E4F                     122      TRAP        #15
00001102  4243                     123      CLR         D3
00001104  6000 FEFA                124      BRA         GET_START_ADDRESS
00001108                           125  
00001108                           126  INVALID_ENDING_ADDRESS
00001108  227C 00000000            127      MOVEA.L     #0,A1
0000110E  43F9 000021CC            128      LEA         INVALID_INPUT,A1
00001114  103C 000D                129      MOVE.B      #13,D0
00001118  4E4F                     130      TRAP        #15
0000111A  4243                     131      CLR         D3
0000111C  6000 FF06                132      BRA         GET_END_ADDRESS
00001120                           133  
00001120                           134      * Could be used to detect non aligned starting address and ending address
00001120                           135  ERROR_INVALID_INPUT
00001120  B47C 0001                136      CMP         #1,D2
00001124  67E2                     137      BEQ         INVALID_ENDING_ADDRESS
00001126  60C8                     138      BRA         INVALID_STARTING_ADDRESS
00001128                           139  
00001128                           140  
00001128                           141  ** This is usally called during the program's execution.
00001128                           142  ** Used for printing out address location, immediate data, absolute short and long ,..etc
00001128                           143  ** Print out each nibble at a time
00001128                           144  CONVERT_HEX_TO_ASCII
00001128  49F9 00001E6A            145      LEA         HEX_CHARACTER_JUMP_TABLE,A4            * Load the table to print out ascii charracter
0000112E  3638 0200                146      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001132  4EB9 0000198E            147      JSR         GET_THE_FIRST_NIBBLE                    * Get the left most hex value and convert
00001138  C6FC 0006                148      MULU        #6,D3
0000113C  4EB4 3000                149      JSR         0(A4,D3)
00001140  3638 0200                150      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001144  4EB9 00001994            151      JSR         GET_THE_SECOND_NIBBLE
0000114A  C6FC 0006                152      MULU        #6,D3
0000114E  4EB4 3000                153      JSR         0(A4,D3)
00001152  3638 0200                154      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001156  4EB9 0000199C            155      JSR         GET_THE_THIRD_NIBBLE
0000115C  C6FC 0006                156      MULU        #6,D3
00001160  4EB4 3000                157      JSR         0(A4,D3)
00001164  3638 0200                158      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001168  4EB9 000019A4            159      JSR         GET_THE_FOURTH_NIBBLE
0000116E  C6FC 0006                160      MULU        #6,D3
00001172  4EB4 3000                161      JSR         0(A4,D3)
00001176  4243                     162      CLR.W       D3
00001178  4E75                     163      RTS
0000117A                           164  
0000117A                           165  
0000117A                           166  ** Called when starting and ending address was entered and converted correctly
0000117A                           167  PREPARE_START_AND_END_ADDRESS
0000117A  41F9 00001A88            168      LEA         FIRST_NIBBLE_JUMP_TABLE,A0
00001180  2478 0100                169      MOVE.L      STARTING_ADDRESS,A2
00001184  2678 0150                170      MOVE.L      ENDING_ADDRESS,A3
00001188                           171  *    MOVE.W      (A2), TEMP_CURRENT_4_NIBBLES
00001188  6000 FEB4                172      BRA         PARSING_OP_CODE                        * Start parsing the opcode now
0000118C                           173  
0000118C                           174  USER_INPUT_ENTER  * Wait for the user to press enter to continue
0000118C  103C 0005                175      MOVE.B      #5,D0
00001190  4E4F                     176      TRAP        #15
00001192  4E75                     177      RTS
00001194                           178  
00001194                           179  
00001194                           180  *************************************************
00001194                           181  * Print the decoded opcode and data to console
00001194                           182  * This section will also be the place where most of the logic is done
00001194                           183  *************************************************
00001194                           184  
00001194                           185  
00001194                           186  ** Called when an invalid opcode was encounterd
00001194                           187  INVALID
00001194  43F9 000022D4            188      LEA         DATA_VALUE,A1
0000119A  4EB9 000018BA            189      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000011A0  4EB9 00001976            190      JSR         PRINT_EMPTY_SPACE
000011A6  4EB9 0000196A            191      JSR         PRINT_HEX_SYMBOL
000011AC  4EB8 1128                192      JSR         CONVERT_HEX_TO_ASCII * Print out the op code that was not decoded
000011B0  43F9 00002310            193      LEA         SPACE,A1 * Go to new line
000011B6  103C 000E                194      MOVE.B      #14,D0
000011BA  4E4F                     195      TRAP        #15
000011BC  61CE                     196      BSR         USER_INPUT_ENTER
000011BE  6000 FE7E                197      BRA         PARSING_OP_CODE
000011C2                           198  
000011C2                           199  PRINT_OUT_NEG
000011C2  43F9 00002252            200      LEA         NEG_VALUE,A1            * Print NEG to screen
000011C8  4EB9 000018BA            201      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000011CE  4EB9 000012C4            202      JSR         PRINT_NORMAL_SUFFIX
000011D4  3638 0200                203      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
000011D8  4EB9 000019E6            204      JSR         CHECK_TYPE_DATA             * Extract the mode and register
000011DE  4EB9 000018C2            205      JSR         PRINT_DATA_MODE_SOURCE
000011E4  61A6                     206      BSR         USER_INPUT_ENTER
000011E6  6000 FE56                207      BRA         PARSING_OP_CODE
000011EA  4E75                     208      RTS
000011EC                           209  
000011EC                           210  PRINT_OUT_NOP
000011EC  43F9 00002234            211      LEA         NOP_VALUE,A1 * Display the NOP message
000011F2  4EB9 000018BA            212      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000011F8  6192                     213      BSR         USER_INPUT_ENTER
000011FA  6000 FE42                214      BRA         PARSING_OP_CODE
000011FE  4E75                     215      RTS
00001200                           216  
00001200                           217  PRINT_OUT_RTS
00001200  43F9 0000223A            218      LEA         RTS_VALUE,A1
00001206  4EB9 000018BA            219      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000120C  6100 FF7E                220      BSR         USER_INPUT_ENTER
00001210  6000 FE2C                221      BRA         PARSING_OP_CODE
00001214  4E75                     222      RTS
00001216                           223  
00001216                           224  PRINT_OUT_ORI_TO_SR
00001216  43F9 00002240            225      LEA         ORI_VALUE,A1
0000121C  4EB9 000018BA            226      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001222  6100 FF68                227      BSR         USER_INPUT_ENTER
00001226  6000 FE16                228      BRA         PARSING_OP_CODE
0000122A  4E75                     229      RTS
0000122C                           230  
0000122C                           231  PRINT_OUT_JSR
0000122C  43F9 00002246            232      LEA         JSR_VALUE,A1
00001232  4EB9 000018BA            233      JSR         PRINT_TO_SCREEN_ENTIRE_STRING * Now query what type of data to print out, source or destination
00001238  4EB9 00001976            234      JSR         PRINT_EMPTY_SPACE
0000123E  3638 0200                235      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001242  4EB9 000019E6            236      JSR         CHECK_TYPE_DATA
00001248  4EB9 000018C2            237      JSR         PRINT_DATA_MODE_SOURCE          * Print the M and N of the last 6 bits
0000124E  6100 FF3C                238      BSR         USER_INPUT_ENTER
00001252  6000 FDEA                239      BRA         PARSING_OP_CODE
00001256                           240  
00001256                           241  
00001256                           242  
00001256                           243  PRINT_OUT_CMPI
00001256  43F9 00002258            244      LEA         CMPI_VALUE,A1                  * Print out the literal value
0000125C  4EB9 000018BA            245      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001262  3638 0200                246      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001266  4EB9 000019E6            247      JSR         CHECK_TYPE_DATA
0000126C  4EB9 000012C4            248      JSR         PRINT_NORMAL_SUFFIX
00001272  4EB9 00001976            249      JSR         PRINT_EMPTY_SPACE
00001278  4EB9 00001982            250      JSR         PRINT_IMMEDIATE_DATA_SYMBOL
0000127E  4EB9 000019C4            251      JSR         GET_NORMAL_SIZE               * Get the size of the operation to know how much byte should we advance forward
00001284  E24B                     252      LSR         #1, D3                        * For cmpi.b and cmpi.w, they all map to absolute short in which print only 4
00001286  31C3 0550                253      MOVE.W      D3, THIRD_TEMP_VAR
0000128A  4EB9 000019E6            254      JSR         CHECK_TYPE_DATA              * Now byte and word will be printed 4 space where as long will be printed 5 space
00001290  4EB9 00001DA2            255      JSR         REGISTER_MODE_111            * Print out the immediate value
00001296  4EB9 00001916            256      JSR         PRINT_COMMA
0000129C  4EB9 00001976            257      JSR         PRINT_EMPTY_SPACE
000012A2  4EB9 000018C2            258      JSR         PRINT_DATA_MODE_SOURCE
000012A8  6100 FEE2                259      BSR         USER_INPUT_ENTER
000012AC  6000 FD90                260      BRA         PARSING_OP_CODE
000012B0  4E75                     261      RTS
000012B2                           262  
000012B2                           263  PRINT_NOT_NORMAL_SUFFIX                   * For instruction like ADDA and SUBA where size is 1
000012B2  49F9 00001FD8            264      LEA         NORMAL_SIZE_PRINT_JUMP_TABLE,A4
000012B8  C6FC 0006                265      MULU        #6,D3
000012BC  4EB4 3000                266      JSR         0(A4,D3)
000012C0  4243                     267      CLR         D3
000012C2  4E75                     268      RTS
000012C4                           269  
000012C4                           270  PRINT_NORMAL_SUFFIX                       * For normal size, the size is on the first 2 bit of the third nibble
000012C4                           271                                * Get rid of the 2 right most bit of the third nibble
000012C4  3638 0200                272      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
000012C8  4EB9 000019C4            273      JSR         GET_NORMAL_SIZE
000012CE  49F9 00001FD8            274      LEA         NORMAL_SIZE_PRINT_JUMP_TABLE,A4
000012D4  B67C 0003                275      CMP         #%11,D3                      * For normal size, does not take 11
000012D8  6700 FEBA                276      BEQ         INVALID
000012DC  C6FC 0006                277      MULU        #6,D3
000012E0  4EB4 3000                278      JSR         0(A4,D3)                       * Print out appropriate suffix
000012E4  4E75                     279      RTS
000012E6                           280  
000012E6                           281  
000012E6                           282  ** STORE DATA INTO THIRD_TEMP_VAR FIRST.DEPENDING ON SOURCE OR DESTINATION REGISTER
000012E6                           283  
000012E6                           284  PRINT_REGISTER_NUMBER           * This is used to print the register number Dn or An where it will print n
000012E6                           285                                  * Expected to store the data into D3 first
000012E6  49F9 00001E6A            286      LEA         HEX_CHARACTER_JUMP_TABLE,A4
000012EC  3638 0550                287      MOVE.W      THIRD_TEMP_VAR,D3
000012F0  C6FC 0006                288      MULU        #6,D3
000012F4  4EB4 3000                289      JSR         0(A4,D3)
000012F8  4278 0550                290      CLR.W       THIRD_TEMP_VAR
000012FC  4243                     291      CLR.W       D3
000012FE  4E75                     292      RTS
00001300                           293  
00001300                           294  PRINT_OUT_LEA
00001300  43F9 0000224C            295      LEA         LEA_VALUE,A1
00001306  4EB9 000018BA            296      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000130C  4EB9 00001976            297      JSR         PRINT_EMPTY_SPACE
00001312  3638 0200                298      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001316  4EB9 000019E6            299      JSR         CHECK_TYPE_DATA
0000131C  4EB9 000018C2            300      JSR         PRINT_DATA_MODE_SOURCE
00001322  4EB9 00001916            301      JSR         PRINT_COMMA
00001328  4EB9 00001976            302      JSR         PRINT_EMPTY_SPACE
0000132E  4EB9 00001922            303      JSR         PRINT_ADDRESS_REGISTER
00001334  31F8 0250 0550           304      MOVE.W      DESTINATION_VAR,THIRD_TEMP_VAR * Store the register number to print
0000133A  4EB8 12E6                305      JSR         PRINT_REGISTER_NUMBER
0000133E  6100 FE4C                306      BSR         USER_INPUT_ENTER
00001342  6000 FCFA                307      BRA         PARSING_OP_CODE
00001346  4E75                     308      RTS
00001348                           309  
00001348                           310  PRINT_OUT_ADDQ             * ADDQ is the same as SUBQ
00001348  43F9 000022A0            311      LEA         ADDQ_VALUE,A1
0000134E  6000 000C                312      BRA         ADDQ_AND_SUBQ_HELPER
00001352                           313  
00001352                           314  PRINT_OUT_SUBQ                              * SUBQ does not accept 0. working on a way to print out 8
00001352  43F9 00002270            315      LEA         SUBQ_VALUE,A1
00001358  6000 0002                316      BRA         ADDQ_AND_SUBQ_HELPER
0000135C                           317  
0000135C                           318  ADDQ_AND_SUBQ_HELPER
0000135C  4EB9 000018BA            319      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001362  4EB8 12C4                320      JSR         PRINT_NORMAL_SUFFIX
00001366  4EB9 00001976            321      JSR         PRINT_EMPTY_SPACE
0000136C  4EB9 00001982            322      JSR         PRINT_IMMEDIATE_DATA_SYMBOL
00001372  3638 0200                323      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001376  4EB9 000019E6            324      JSR         CHECK_TYPE_DATA
0000137C  0C78 0000 0250           325      CMP         #0, DESTINATION_VAR                * In the case of 8, the destination var is 000. But we want to print out 8
00001382  6700 0028                326      BEQ         SUBQ_HELPER_FUNCTION
00001386  31F8 0250 0550           327      MOVE.W      DESTINATION_VAR,THIRD_TEMP_VAR     * Save the value to print out from print register number
0000138C  4EB8 12E6                328      JSR         PRINT_REGISTER_NUMBER              * Print out the data from 1-8
00001390  4EB9 00001916            329      JSR         PRINT_COMMA
00001396  4EB9 00001976            330      JSR         PRINT_EMPTY_SPACE
0000139C  4EB9 000018C2            331      JSR         PRINT_DATA_MODE_SOURCE
000013A2  6100 FDE8                332      BSR         USER_INPUT_ENTER
000013A6  6000 FC96                333      BRA         PARSING_OP_CODE
000013AA  4E75                     334      RTS
000013AC                           335  
000013AC                           336  SUBQ_HELPER_FUNCTION                         * Single function that exist to help with printing oout the data in SUBQ
000013AC  31FC 0008 0550           337      MOVE.W      #8, THIRD_TEMP_VAR
000013B2  4EB8 12E6                338      JSR         PRINT_REGISTER_NUMBER
000013B6  4EB9 00001916            339      JSR         PRINT_COMMA
000013BC  4EB9 00001976            340      JSR         PRINT_EMPTY_SPACE
000013C2  4EB9 000018C2            341      JSR         PRINT_DATA_MODE_SOURCE
000013C8  6100 FDC2                342      BSR         USER_INPUT_ENTER
000013CC  6000 FC70                343      BRA         PARSING_OP_CODE
000013D0  4E75                     344      RTS
000013D2                           345  
000013D2                           346  PRINT_OUT_DIVS
000013D2  43F9 00002276            347      LEA         DIVS_VALUE,A1
000013D8  4EB9 000018BA            348      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000013DE  4EB9 00002000            349      JSR         PRINT_NORMAL_WORD_SUFFIX
000013E4  4EB9 00001976            350      JSR         PRINT_EMPTY_SPACE
000013EA  4EB9 000018C2            351      JSR         PRINT_DATA_MODE_SOURCE
000013F0  4EB9 00001916            352      JSR         PRINT_COMMA
000013F6  4EB9 00001976            353      JSR         PRINT_EMPTY_SPACE
000013FC  4EB9 0000192E            354      JSR         PRINT_DATA_REGISTER
00001402  31F8 0250 0550           355      MOVE.W      DESTINATION_VAR, THIRD_TEMP_VAR      * Store the register number Dn to print out
00001408  4EB8 12E6                356      JSR         PRINT_REGISTER_NUMBER
0000140C  6100 FD7E                357      BSR         USER_INPUT_ENTER
00001410  6000 FC2C                358      BRA         PARSING_OP_CODE
00001414  4E75                     359      RTS
00001416                           360  
00001416                           361  PRINT_OUT_MULS                      * MULS also act like sub for <ea>,Dn * FIX
00001416  43F9 00002288            362      LEA         MULS_VALUE,A1
0000141C  4EB9 000018BA            363      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001422  4EB9 00002000            364      JSR         PRINT_NORMAL_WORD_SUFFIX
00001428  4EB9 00001976            365      JSR         PRINT_EMPTY_SPACE
0000142E  3638 0200                366      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001432  4EB9 000019E6            367      JSR         CHECK_TYPE_DATA
00001438  31FC 0001 0300           368      MOVE.W      #%01, DESTINATION_MODE      * Change the size of the 2 size bit to print out
0000143E  4EB9 000018C2            369      JSR         PRINT_DATA_MODE_SOURCE
00001444  4EB9 00001916            370      JSR         PRINT_COMMA
0000144A  4EB9 00001976            371      JSR         PRINT_EMPTY_SPACE
00001450  4EB9 0000192E            372      JSR         PRINT_DATA_REGISTER
00001456  31F8 0250 0550           373      MOVE.W      DESTINATION_VAR,THIRD_TEMP_VAR
0000145C  4EB8 12E6                374      JSR         PRINT_REGISTER_NUMBER
00001460  6100 FD2A                375      BSR         USER_INPUT_ENTER
00001464  6000 FBD8                376      BRA         PARSING_OP_CODE
00001468  4E75                     377      RTS
0000146A                           378  
0000146A                           379  
0000146A                           380  PRINT_OUT_MULU
0000146A  43F9 0000228E            381      LEA         MULU_VALUE,A1
00001470  4EB9 000018BA            382      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001476  4EB9 00002000            383      JSR         PRINT_NORMAL_WORD_SUFFIX
0000147C  4EB9 00001976            384      JSR         PRINT_EMPTY_SPACE
00001482  3638 0200                385      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001486  4EB9 000019E6            386      JSR         CHECK_TYPE_DATA
0000148C  31FC 0001 0300           387      MOVE.W      #%01, DESTINATION_MODE
00001492  4EB9 000018C2            388      JSR         PRINT_DATA_MODE_SOURCE
00001498  4EB9 00001916            389      JSR         PRINT_COMMA
0000149E  4EB9 00001976            390      JSR         PRINT_EMPTY_SPACE
000014A4  4EB9 0000192E            391      JSR         PRINT_DATA_REGISTER
000014AA  31F8 0250 0550           392      MOVE.W      DESTINATION_VAR,THIRD_TEMP_VAR
000014B0  4EB8 12E6                393      JSR         PRINT_REGISTER_NUMBER
000014B4  6100 FCD6                394      BSR         USER_INPUT_ENTER
000014B8  6000 FB84                395      BRA         PARSING_OP_CODE
000014BC  4E75                     396      RTS
000014BE                           397  
000014BE                           398  PRINT_OUT_CMP
000014BE  43F9 0000225E            399      LEA         CMP_VALUE,A1
000014C4  4EB9 000018BA            400      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000014CA  4EB8 12C4                401      JSR         PRINT_NORMAL_SUFFIX
000014CE  4EB9 00001976            402      JSR         PRINT_EMPTY_SPACE
000014D4  3638 0200                403      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
000014D8  4EB9 000019E6            404      JSR         CHECK_TYPE_DATA
000014DE  4EB9 000018C2            405      JSR         PRINT_DATA_MODE_SOURCE
000014E4  4EB9 00001916            406      JSR         PRINT_COMMA
000014EA  4EB9 00001976            407      JSR         PRINT_EMPTY_SPACE
000014F0  4EB9 0000192E            408      JSR         PRINT_DATA_REGISTER
000014F6  31F8 0250 0550           409      MOVE.W      DESTINATION_VAR,THIRD_TEMP_VAR
000014FC  4EB8 12E6                410      JSR         PRINT_REGISTER_NUMBER
00001500  6100 FC8A                411      BSR         USER_INPUT_ENTER
00001504  6000 FB38                412      BRA         PARSING_OP_CODE
00001508  4E75                     413      RTS
0000150A                           414  
0000150A                           415  
0000150A                           416  PRINT_OUT_SUBA
0000150A  43F9 0000226A            417      LEA         SUBA_VALUE,A1
00001510  6000 000C                418      BRA         SUBA_AND_ADDA_HELPER
00001514                           419  
00001514                           420  PRINT_OUT_ADDA
00001514  43F9 0000229A            421      LEA         ADDA_VALUE,A1
0000151A  6000 0002                422      BRA         SUBA_AND_ADDA_HELPER
0000151E                           423  
0000151E                           424  SUBA_AND_ADDA_HELPER
0000151E  4EB9 000018BA            425      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001524  3638 0200                426      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001528  4EB9 000019E6            427      JSR         CHECK_TYPE_DATA
0000152E  4EB9 00001994            428      JSR         GET_THE_SECOND_NIBBLE
00001534  E14B                     429      LSL         #8,D3                      * Get the special one bit size of ADDA
00001536  EF4B                     430      LSL         #7,D3
00001538  EE4B                     431      LSR         #7,D3
0000153A  E04B                     432      LSR         #8,D3
0000153C  5243                     433      ADD         #1,D3                      * 0 is word and 1 is long. Add 1 will be 01 and 10, word and long
0000153E  4EB8 12B2                434      JSR         PRINT_NOT_NORMAL_SUFFIX        * Now print .W or .L only
00001542  4EB9 000018C2            435      JSR         PRINT_DATA_MODE_SOURCE
00001548  4EB9 00001916            436      JSR         PRINT_COMMA
0000154E  4EB9 00001976            437      JSR         PRINT_EMPTY_SPACE
00001554  4EB9 00001922            438      JSR         PRINT_ADDRESS_REGISTER
0000155A  31F8 0250 0550           439      MOVE.W      DESTINATION_VAR, THIRD_TEMP_VAR       * Save the variable to print out the number of address register
00001560  4EB8 12E6                440      JSR         PRINT_REGISTER_NUMBER
00001564  6100 FC26                441      BSR         USER_INPUT_ENTER
00001568  6000 FAD4                442      BRA         PARSING_OP_CODE
0000156C  4E75                     443      RTS
0000156E                           444  
0000156E                           445  PRINT_OUT_OR
0000156E  43F9 000022BA            446      LEA         OR_VALUE,A1
00001574  6000 0016                447      BRA         ADD_AND_SUB_HELPER           * Take advantage of the similar structure like add and sub
00001578                           448  
00001578                           449  PRINT_OUT_ADD           * Function similar like SUB
00001578  43F9 00002294            450      LEA         ADD_VALUE,A1
0000157E  6000 000C                451      BRA         ADD_AND_SUB_HELPER
00001582                           452  
00001582                           453  PRINT_OUT_SUB                      * The SUB function is odd is that the Dn is always in front
00001582                           454                                     * So to distinguish it, we need to check the source mode and compare with
00001582                           455                                     *000
00001582  43F9 00002264            456      LEA         SUB_VALUE,A1                       * Only time where the source and dstiantion are in correct position
00001588  6000 0002                457      BRA         ADD_AND_SUB_HELPER
0000158C                           458  
0000158C                           459  
0000158C                           460  ADD_AND_SUB_HELPER
0000158C  4EB9 000018BA            461      JSR         PRINT_TO_SCREEN_ENTIRE_STRING       * Is when both are data register
00001592  4EB8 12C4                462      JSR         PRINT_NORMAL_SUFFIX
00001596  4EB9 00001976            463      JSR         PRINT_EMPTY_SPACE
0000159C  3638 0200                464      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
000015A0  4EB9 000019E6            465      JSR         CHECK_TYPE_DATA
000015A6  0C78 0000 0350           466      CMP         #0, SOURCE_MODE               *
000015AC  6600 002E                467      BNE         SUB_HELPER_FUNCTION         * Utilize the not normal approach
000015B0  4EB9 000018C2            468      JSR         PRINT_DATA_MODE_SOURCE
000015B6  4EB9 00001916            469      JSR         PRINT_COMMA
000015BC  4EB9 00001976            470      JSR         PRINT_EMPTY_SPACE
000015C2  4EB9 0000192E            471      JSR         PRINT_DATA_REGISTER
000015C8  31F8 0250 0550           472      MOVE.W      DESTINATION_VAR, THIRD_TEMP_VAR
000015CE  4EB8 12E6                473      JSR         PRINT_REGISTER_NUMBER
000015D2  6100 FBB8                474      BSR         USER_INPUT_ENTER
000015D6  6000 FA66                475      BRA         PARSING_OP_CODE
000015DA  4E75                     476      RTS
000015DC                           477  
000015DC                           478  SUB_HELPER_FUNCTION       * For whatever the data register is always the first 3 bit of the second nibble
000015DC                           479                                             * Even though it can either be in the source or destination when write it
000015DC  3638 0200                480      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
000015E0  4EB9 000019E6            481      JSR         CHECK_TYPE_DATA
000015E6  3638 0250                482      MOVE.W      DESTINATION_VAR,D3
000015EA  31F8 0400 0250           483      MOVE.W      SOURCE_VAR,DESTINATION_VAR
000015F0  31C3 0400                484      MOVE.W      D3,SOURCE_VAR
000015F4  3638 0300                485      MOVE.W      DESTINATION_MODE,D3
000015F8  31F8 0350 0300           486      MOVE.W      SOURCE_MODE,DESTINATION_MODE
000015FE  31C3 0350                487      MOVE.W      D3,SOURCE_MODE
00001602  3638 0350                488      MOVE.W      SOURCE_MODE, D3
00001606  31F8 0400 0550           489      MOVE.W      SOURCE_VAR, THIRD_TEMP_VAR         * Save the variable to print out from register
0000160C  E44B                     490      LSR         #2,D3
0000160E  B67C 0000                491      CMP         #0,D3         * Check direction to know which order we should be printing
00001612  6700 0024                492      BEQ         SUB_HELPER_REGISTER_TO_MEM
00001616  4EB9 00001D60            493      JSR         REGISTER_MODE_000                  * Need to find a way to switch the places
0000161C  4EB9 00001916            494      JSR         PRINT_COMMA
00001622  4EB9 00001976            495      JSR         PRINT_EMPTY_SPACE
00001628  4EB9 000018DC            496      JSR         PRINT_DATA_MODE_DESTINATION
0000162E  6100 FB5C                497      BSR         USER_INPUT_ENTER
00001632  6000 FA0A                498      BRA         PARSING_OP_CODE
00001636  4E75                     499      RTS
00001638                           500  
00001638                           501  SUB_HELPER_REGISTER_TO_MEM            * Helper function to help with printing fro register to memory
00001638  4EB9 000018DC            502      JSR         PRINT_DATA_MODE_DESTINATION
0000163E  4EB9 00001916            503      JSR         PRINT_COMMA
00001644  4EB9 00001976            504      JSR         PRINT_EMPTY_SPACE
0000164A  4EB9 00001D60            505      JSR         REGISTER_MODE_000
00001650  6100 FB3A                506      BSR         USER_INPUT_ENTER
00001654  6000 F9E8                507      BRA         PARSING_OP_CODE
00001658  4E75                     508      RTS
0000165A                           509  
0000165A                           510  PRINT_OUT_BRA                         * Current limitation: Only can print out branch to a word address (4bytes).No support for 8 bytes
0000165A  43F9 0000227C            511      LEA         BRA_VALUE,A1
00001660  4EB9 000018BA            512      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001666  4EB9 00001976            513      JSR         PRINT_EMPTY_SPACE
0000166C  4EB9 0000196A            514      JSR         PRINT_HEX_SYMBOL
00001672  380A                     515      MOVE.W      A2,D4           * Save the current address we are at
00001674  4EB9 000019AE            516      JSR         GET_NEXT_FOUR_NIBBLE       * GEt the displacement we are suppose to branch to
0000167A  D843                     517      ADD         D3,D4             * Current address + displacement => address we are suppose to jump to
0000167C  31C4 0200                518      MOVE.W      D4, TEMP_CURRENT_4_NIBBLES     * Prepare the address to print out in hex
00001680  4EB8 1128                519      JSR         CONVERT_HEX_TO_ASCII
00001684  6100 FB06                520      BSR         USER_INPUT_ENTER
00001688  6000 F9B4                521      BRA         PARSING_OP_CODE
0000168C                           522  
0000168C                           523  PRINT_OUT_BSR
0000168C  43F9 00002282            524      LEA         BSR_VALUE,A1
00001692  4EB9 000018BA            525      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001698  4EB9 00001976            526      JSR         PRINT_EMPTY_SPACE
0000169E  4EB9 0000196A            527      JSR         PRINT_HEX_SYMBOL
000016A4  380A                     528      MOVE.W      A2,D4
000016A6  4EB9 000019AE            529      JSR         GET_NEXT_FOUR_NIBBLE
000016AC  D843                     530      ADD         D3,D4
000016AE  31C4 0200                531      MOVE.W      D4,TEMP_CURRENT_4_NIBBLES
000016B2  4EB8 1128                532      JSR         CONVERT_HEX_TO_ASCII
000016B6  6100 FAD4                533      BSR         USER_INPUT_ENTER
000016BA  6000 F982                534      BRA         PARSING_OP_CODE
000016BE                           535  
000016BE                           536  PRINT_OUT_Bcc
000016BE  43F9 00002358            537      LEA         B,A1
000016C4  4EB9 000018BA            538      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000016CA  4DF9 00002026            539      LEA         CONDITION_JUMP_TABLE,A6            * Load the jump table to know which condition code to print
000016D0  3638 0200                540      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
000016D4  4EB9 00001994            541      JSR         GET_THE_SECOND_NIBBLE
000016DA  C6FC 0006                542      MULU        #6,D3
000016DE  4EB6 3000                543      JSR         0(A6,D3)            * Now print out the suffix of B
000016E2  4EB9 00001976            544      JSR         PRINT_EMPTY_SPACE
000016E8  4EB9 0000196A            545      JSR         PRINT_HEX_SYMBOL
000016EE  380A                     546      MOVE.W      A2,D4
000016F0  4EB9 000019AE            547      JSR         GET_NEXT_FOUR_NIBBLE
000016F6  D843                     548      ADD         D3,D4
000016F8  31C4 0200                549      MOVE.W      D4,TEMP_CURRENT_4_NIBBLES
000016FC  4EB8 1128                550      JSR         CONVERT_HEX_TO_ASCII
00001700  6100 FA8A                551      BSR         USER_INPUT_ENTER
00001704  6000 F938                552      BRA         PARSING_OP_CODE
00001708                           553  
00001708                           554  PRINT_OUT_LOGICAL_SHIFT_MEM           * Lsd with <ea>
00001708  43F9 000022AA            555      LEA         LS_VALUE,A1
0000170E  4EB9 00001724            556      JSR         ASD_LSD_ROD_SHIFT_HELPER
00001714  4E75                     557      RTS
00001716                           558  
00001716                           559  PRINT_OUT_ARITH_SHIFT_MEM
00001716  43F9 000022A6            560      LEA         AS_VALUE,A1
0000171C  4EB9 00001724            561      JSR         ASD_LSD_ROD_SHIFT_HELPER
00001722  4E75                     562      RTS
00001724                           563  
00001724                           564  ASD_LSD_ROD_SHIFT_HELPER
00001724  4EB9 000018BA            565      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000172A  4DF9 000020F6            566      LEA         RIGHT_OR_LEFT_JUMP_TABLE,A6     * Print the direction, left or right
00001730  3638 0200                567      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001734  4EB9 000019E6            568      JSR         CHECK_TYPE_DATA
0000173A  4EB9 00001994            569      JSR         GET_THE_SECOND_NIBBLE
00001740  E14B                     570      LSL         #8,D3
00001742  EF4B                     571      LSL         #7,D3
00001744  EE4B                     572      LSR         #7,D3
00001746  E04B                     573      LSR         #8,D3
00001748  C6FC 0006                574      MULU        #6,D3
0000174C  4EB6 3000                575      JSR         0(A6,D3)   * Print out left or right
00001750  4EB9 00002000            576      JSR         PRINT_NORMAL_WORD_SUFFIX
00001756  31F8 0400 0550           577      MOVE.W      SOURCE_VAR, THIRD_TEMP_VAR      * Save the register number in case for print OUT
0000175C  4EB9 000018C2            578      JSR         PRINT_DATA_MODE_SOURCE
00001762  6100 FA28                579      BSR         USER_INPUT_ENTER
00001766  6000 F8D6                580      BRA         PARSING_OP_CODE
0000176A  4E75                     581      RTS
0000176C                           582  
0000176C                           583  PRINT_OUT_ROTATE_MEM
0000176C  43F9 000022AE            584      LEA         RO_VALUE,A1
00001772  4EB8 1724                585      JSR         ASD_LSD_ROD_SHIFT_HELPER
00001776  4E75                     586      RTS
00001778                           587  
00001778                           588  PRINT_OUT_ASD_OR_LSD                * For other ASd and LSd, the first  bit of the last nibble can differentiate them
00001778  3638 0200                589      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
0000177C  4EB9 000019A4            590      JSR         GET_THE_FOURTH_NIBBLE
00001782  E64B                     591      LSR         #3,D3
00001784  B67C 0000                592      CMP         #0,D3
00001788  6700 0008                593      BEQ         PRINT_OUT_ASD * First bit is 0 for ASD
0000178C  6000 0012                594      BRA         PRINT_OUT_LSD * 1 for LSD
00001790  4E75                     595      RTS
00001792                           596  
00001792                           597  PRINT_OUT_ASD
00001792  43F9 000022A6            598      LEA         AS_VALUE,A1
00001798  4EB9 000017D0            599      JSR         ASD_LSD_ROD_HELPER_FUNCTION
0000179E  4E75                     600      RTS
000017A0                           601  
000017A0                           602  PRINT_OUT_LSD
000017A0  43F9 000022AA            603      LEA         LS_VALUE,A1
000017A6  4EB9 000017D0            604      JSR         ASD_LSD_ROD_HELPER_FUNCTION
000017AC  4E75                     605      RTS
000017AE                           606  
000017AE                           607  PRINT_OUT_ROD           * Could be ROd or ROXd. If the latter case, then it is invalid
000017AE                           608  
000017AE  3638 0200                609      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
000017B2  4EB9 000019A4            610      JSR         GET_THE_FOURTH_NIBBLE
000017B8  E64B                     611      LSR         #3,D3
000017BA  B67C 0001                612      CMP         #1,D3
000017BE  6600 F9D4                613      BNE         INVALID         * ROD ibly accept 1 as the first bit in the fourth nibbles
000017C2  43F9 000022AE            614      LEA         RO_VALUE,A1
000017C8  4EB9 000017D0            615      JSR         ASD_LSD_ROD_HELPER_FUNCTION
000017CE  4E75                     616      RTS
000017D0                           617  
000017D0                           618  ASD_LSD_ROD_HELPER_FUNCTION   * Used for printing out the cases where a source and destionaion are present
000017D0  4EB9 000018BA            619      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000017D6  4DF9 000020F6            620      LEA         RIGHT_OR_LEFT_JUMP_TABLE,A6     * Print the direction, left or right
000017DC  3638 0200                621      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3 * Now print out the Direction left or right
000017E0  4EB9 000019E6            622      JSR         CHECK_TYPE_DATA
000017E6  4EB9 00001994            623      JSR         GET_THE_SECOND_NIBBLE
000017EC  E14B                     624      LSL         #8,D3
000017EE  EF4B                     625      LSL         #7,D3
000017F0  E04B                     626      LSR         #8,D3
000017F2  EE4B                     627      LSR         #7,D3
000017F4  C6FC 0006                628      MULU        #6,D3
000017F8  4EB6 3000                629      JSR         0(A6,D3)   * Print out left or right
000017FC  3638 0200                630      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001800  4EB8 12C4                631      JSR         PRINT_NORMAL_SUFFIX    * Print out .B, .W or .L
00001804  3638 0200                632      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3      * Now we need to determine if its is immediate or register rotation
00001808  4EB9 0000199C            633      JSR         GET_THE_THIRD_NIBBLE
0000180E  E14B                     634      LSL         #8,D3
00001810  ED4B                     635      LSL         #6,D3
00001812  E04B                     636      LSR         #8,D3
00001814  EE4B                     637      LSR         #7,D3 * Now the third bit will be at the last position
00001816  4DF9 0000211A            638      LEA         IMMEDIATE_OR_REGISTER_JUMP_TABLE,A6
0000181C  C6FC 0006                639      MULU        #6,D3
00001820  4EB6 3000                640      JSR         0(A6,D3)
00001824  4EB9 0000192E            641      JSR         PRINT_DATA_REGISTER
0000182A  3638 0200                642      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
0000182E  4EB9 000019E6            643      JSR         CHECK_TYPE_DATA
00001834  31F8 0400 0550           644      MOVE.W      SOURCE_VAR,THIRD_TEMP_VAR * Save the register number to print out
0000183A  4EB8 12E6                645      JSR         PRINT_REGISTER_NUMBER
0000183E  6100 F94C                646      BSR         USER_INPUT_ENTER
00001842  6000 F7FA                647      BRA         PARSING_OP_CODE
00001846  4E75                     648      RTS
00001848                           649  
00001848                           650  MOVE_OPCODE_HELPER
00001848  3638 0200                651      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
0000184C  4EB9 000019E6            652      JSR         CHECK_TYPE_DATA
00001852  0C78 0001 0300           653      CMP         #%001, DESTINATION_MODE
00001858  6700 0008                654      BEQ         PRINT_OUT_MOVEA
0000185C  6000 0010                655      BRA         PRINT_OUT_MOVE
00001860  4E75                     656      RTS
00001862                           657  
00001862                           658  PRINT_OUT_MOVEA
00001862  43F9 000022BE            659      LEA         MOVEA_VALUE,A1
00001868  4EB9 0000187A            660      JSR         MOVE_SECOND_OPCODE_HELPER
0000186E                           661  
0000186E                           662  PRINT_OUT_MOVE
0000186E  43F9 000022C6            663      LEA         MOVE_VALUE,A1
00001874  4EB9 0000187A            664      JSR         MOVE_SECOND_OPCODE_HELPER
0000187A                           665  
0000187A                           666  MOVE_SECOND_OPCODE_HELPER
0000187A  4EB9 000018BA            667      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001880  4DF9 00001F8A            668      LEA         MOVE_SIZE_PRINT_JUMP_TABLE,A6
00001886  3638 0200                669      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
0000188A  4EB9 0000198E            670      JSR         GET_THE_FIRST_NIBBLE
00001890  C6FC 0006                671      MULU        #6,D3
00001894  4EB6 3000                672      JSR         0(A6,D3)
00001898  4EB9 000018C2            673      JSR         PRINT_DATA_MODE_SOURCE
0000189E  4EB9 00001916            674      JSR         PRINT_COMMA
000018A4  4EB9 00001976            675      JSR         PRINT_EMPTY_SPACE
000018AA  4EB9 000018DC            676      JSR         PRINT_DATA_MODE_DESTINATION
000018B0  6100 F8DA                677      BSR         USER_INPUT_ENTER
000018B4  6000 F788                678      BRA         PARSING_OP_CODE
000018B8  4E75                     679      RTS
000018BA                           680  
000018BA                           681  PRINT_TO_SCREEN_ENTIRE_STRING         * Simple utility method that take whatever in A1 and print out
000018BA  103C 000E                682      MOVE.B      #14,D0      * This is used to print out the command as an entire string
000018BE  4E4F                     683      TRAP        #15
000018C0  4E75                     684      RTS
000018C2                           685  
000018C2                           686  PRINT_DATA_MODE_SOURCE         * Depnding on the mode, will print out appropriate data mode: Dn,An,(An),...
000018C2  4DF9 00001D30            687      LEA         REGISTER_MODE_JUMP_TABLE,A6
000018C8  31F8 0400 0550           688      MOVE.W      SOURCE_VAR, THIRD_TEMP_VAR
000018CE  3638 0350                689      MOVE        SOURCE_MODE,D3
000018D2  C6FC 0006                690      MULU        #6,D3
000018D6  4EB6 3000                691      JSR         0(A6,D3)       * Let's see what mode is this source mode
000018DA  4E75                     692      RTS
000018DC                           693  
000018DC                           694  PRINT_DATA_MODE_DESTINATION
000018DC  4DF9 00001D30            695      LEA         REGISTER_MODE_JUMP_TABLE,A6
000018E2  31F8 0250 0550           696      MOVE.W      DESTINATION_VAR, THIRD_TEMP_VAR      * Determine the Xn to print
000018E8  3638 0300                697      MOVE.W      DESTINATION_MODE,D3
000018EC  C6FC 0006                698      MULU        #6,D3
000018F0  4EB6 3000                699      JSR         0(A6,D3)
000018F4  4E75                     700      RTS
000018F6                           701  
000018F6                           702  PRINT_ADDRESS_LOCATION        * Print out the address in which we are executing the disassembling
000018F6                           703                                * Should print out 00XX YYYY as the address location
000018F6                           704                                * Find a way to load the address at A2 into some variables and call print hex to ascii
000018F6                           705      *MOVE.W      TEMP_CURRENT_4_NIBBLES,D7
000018F6  2A0A                     706      MOVE.L      A2,D5
000018F8  E04D                     707      LSR         #8,D5              * Shift 4 bytes left most to print out
000018FA  E04D                     708      LSR         #8,D5
000018FC  31C5 0200                709      MOVE.W      D5,TEMP_CURRENT_4_NIBBLES * Get the entire long address
00001900  4EB8 1128                710      JSR         CONVERT_HEX_TO_ASCII
00001904  3A0A                     711      MOVE.W      A2,D5
00001906  31C5 0200                712      MOVE.W      D5,TEMP_CURRENT_4_NIBBLES
0000190A  4EB8 1128                713      JSR         CONVERT_HEX_TO_ASCII
0000190E  4EB9 00001976            714      JSR         PRINT_EMPTY_SPACE
00001914                           715      *MOVE.W      D7, TEMP_CURRENT_4_NIBBLES * Save back the address
00001914  4E75                     716      RTS
00001916                           717  
00001916                           718  
00001916                           719  PRINT_COMMA *Print the comma to separate between source and destination
00001916  43F9 0000230C            720      LEA         COMMA,A1
0000191C  4EB8 18BA                721      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001920  4E75                     722      RTS
00001922                           723  
00001922                           724  PRINT_ADDRESS_REGISTER
00001922  43F9 00002308            725      LEA         ADDRESS_REGISTER,A1
00001928  4EB8 18BA                726      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000192C  4E75                     727      RTS
0000192E                           728  
0000192E                           729  PRINT_DATA_REGISTER
0000192E  43F9 00002304            730      LEA         DATA_REGISTER,A1
00001934  4EB8 18BA                731      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001938  4E75                     732      RTS
0000193A                           733  
0000193A                           734  PRINT_OPEN_BRACKET
0000193A  43F9 000022F4            735      LEA         OPENING_BRACKET,A1
00001940  4EB8 18BA                736      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001944  4E75                     737      RTS
00001946                           738  
00001946                           739  PRINT_CLOSE_BRACKET
00001946  43F9 000022F8            740      LEA         CLOSING_BRACKET,A1
0000194C  4EB8 18BA                741      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001950  4E75                     742      RTS
00001952                           743  
00001952                           744  PRINT_PLUS_SIGN
00001952  43F9 000022FC            745      LEA         PLUS_SIGN,A1
00001958  4EB8 18BA                746      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000195C  4E75                     747      RTS
0000195E                           748  
0000195E                           749  PRINT_MINUS_SIGN
0000195E  43F9 00002300            750      LEA         MINUS_SIGN,A1
00001964  4EB8 18BA                751      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001968  4E75                     752      RTS
0000196A                           753  
0000196A                           754  PRINT_HEX_SYMBOL
0000196A  43F9 00002318            755      LEA         HEX_SYMBOL,A1
00001970  4EB8 18BA                756      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001974  4E75                     757      RTS
00001976                           758  
00001976                           759  PRINT_EMPTY_SPACE
00001976  43F9 00002310            760      LEA         SPACE,A1
0000197C  4EB8 18BA                761      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001980  4E75                     762      RTS
00001982                           763  
00001982                           764  PRINT_IMMEDIATE_DATA_SYMBOL
00001982  43F9 0000231C            765      LEA         IMMEDIATE_DATA_SYMBOL,A1
00001988  4EB8 18BA                766      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000198C  4E75                     767      RTS
0000198E                           768  
0000198E                           769  
0000198E                           770  
0000198E                           771  ****************************************
0000198E                           772  * Query data section
0000198E                           773  ****************************************
0000198E                           774  
0000198E                           775  GET_THE_FIRST_NIBBLE            * Get the left most byte. Assuming that the full word data is already store in D3
0000198E  E04B                     776      LSR         #8,D3               * Shift 2 bytes to the rights
00001990  E84B                     777      LSR         #4,D3               * Shift 1 byte to the right. Now left most byte is now the right most byte
00001992  4E75                     778      RTS
00001994                           779  
00001994                           780  
00001994                           781  GET_THE_SECOND_NIBBLE
00001994  E94B                     782      LSL         #4,D3             * Shift the left most byte to go away
00001996  E84B                     783      LSR         #4,D3             * Return the original place
00001998  E04B                     784      LSR         #8,D3              * Push the 2 right most byte out of the way
0000199A  4E75                     785      RTS
0000199C                           786  
0000199C                           787  GET_THE_THIRD_NIBBLE
0000199C  E14B                     788      LSL         #8,D3                * Bye byte 2 left most nibble
0000199E  E04B                     789      LSR         #8,D3                * Get rid of the 3 bytes that are infront
000019A0  E84B                     790      LSR         #4,D3                 * Shift back to original position
000019A2  4E75                     791      RTS
000019A4                           792  
000019A4                           793  GET_THE_FOURTH_NIBBLE
000019A4  E14B                     794      LSL         #8,D3
000019A6  E94B                     795      LSL         #4,D3
000019A8  E04B                     796      LSR         #8,D3
000019AA  E84B                     797      LSR         #4,D3
000019AC  4E75                     798      RTS
000019AE                           799  
000019AE                           800  GET_NEXT_FOUR_NIBBLE
000019AE  361A                     801      MOVE.W      (A2)+,D3
000019B0  31C3 0200                802      MOVE.W      D3, TEMP_CURRENT_4_NIBBLES       * Copy the value into temp variable
000019B4  B7CA                     803      CMPA.L      A2,A3                            * Check the starting and ending address if we have surpass it
000019B6  6F00 0020                804      BLE         FINISH_DISASSEMBLING
000019BA  4E75                     805      RTS
000019BC                           806  
000019BC                           807  
000019BC                           808  GET_NEXT_TWO_NIBBLE
000019BC  161A                     809      MOVE.B      (A2)+,D3            * Get the next byte ( 2 nibbles)
000019BE  11C3 0750                810      MOVE.B      D3, TEMP_CURRENT_2_NIBBLES
000019C2  4E75                     811      RTS
000019C4                           812  
000019C4                           813  GET_NORMAL_SIZE                   * The normal size is on the first 2 bit of the third nibble of the op code
000019C4                           814  *    MOVE.W  TEMP_CURRENT_4_NIBBLES,D3
000019C4                           815      **JSR     GET_THE_THIRD_NIBBLE           * Get the index to know which value to print
000019C4  4EB9 000019E6            816      JSR         CHECK_TYPE_DATA
000019CA  3638 0300                817      MOVE.W      DESTINATION_MODE,D3
000019CE  E14B                     818      LSL         #8,D3
000019D0  ED4B                     819      LSL         #6,D3
000019D2  E04B                     820      LSR         #8,D3
000019D4  EC4B                     821      LSR         #6,D3
000019D6  4E75                     822      RTS
000019D8                           823  
000019D8                           824  FINISH_DISASSEMBLING
000019D8  43F9 000021E6            825      LEA         FINISH,A1
000019DE  4EB8 18BA                826      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000019E2  FFFF FFFF                827      SIMHALT
000019E6                           828  **********************************
000019E6                           829  * logical reasoning section (determine what kind of opcode to print, what type of data to print)
000019E6                           830  **********************************
000019E6                           831  
000019E6                           832  
000019E6                           833  ********
000019E6                           834  * Check type data: Means getting the appropriate source and destination register  and mode
000019E6                           835  ********
000019E6                           836  CHECK_TYPE_DATA
000019E6  3638 0200                837      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
000019EA  E94B                     838      LSL         #4,D3      * Get rid of left most byte
000019EC  E84B                     839      LSR         #4,D3      * Now focus on the following format      destination mode mode source. Start with destination first
000019EE  E04B                     840      LSR         #8,D3      * Now the D3 has the destination
000019F0  E24B                     841      LSR         #1,D3
000019F2  31C3 0250                842      MOVE.W      D3,DESTINATION_VAR
000019F6  3638 0200                843      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3 * Now go with the destination mode
000019FA  EF4B                     844      LSL         #7,D3
000019FC  EE4B                     845      LSR         #7,D3
000019FE  EC4B                     846      LSR         #6,D3
00001A00  31C3 0300                847      MOVE.W      D3,DESTINATION_MODE
00001A04  3638 0200                848      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3       * Now extract the source mode
00001A08  E14B                     849      LSL         #8,D3
00001A0A  E54B                     850      LSL         #2,D3
00001A0C  E04B                     851      LSR         #8,D3
00001A0E  E44B                     852      LSR         #2,D3
00001A10  E64B                     853      LSR         #3,D3
00001A12  31C3 0350                854      MOVE.W      D3,SOURCE_MODE      * Now extract the source
00001A16  3638 0200                855      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001A1A  E14B                     856      LSL         #8,D3
00001A1C  EB4B                     857      LSL         #5,D3
00001A1E  E04B                     858      LSR         #8,D3
00001A20  EA4B                     859      LSR         #5,D3
00001A22  31C3 0400                860      MOVE.W      D3,SOURCE_VAR
00001A26  3638 0200                861      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001A2A  4E75                     862      RTS
00001A2C                           863  
00001A2C                           864  
00001A2C                           865  * Now the byte of the opcode is in D3
00001A2C                           866  
00001A2C                           867  
00001A2C                           868  
00001A2C                           869  
00001A2C                           870  
00001A2C                           871  
00001A2C                           872  
00001A2C                           873  FIRST_NIBBLE_4_SECOND_NIBBLE_E        * Possible answer are NOP,JSR and RTS
00001A2C  3638 0200                874      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3       * Get the op code
00001A30  E14B                     875      LSL         #8,D3             * Shift to the left to dissappear 2 left most byte
00001A32  E04B                     876      LSR         #8,D3             * Shift to the right to gain back original position. Only now the 2 left most byte are gone
00001A34  B63C 0071                877      CMP.B       #$71,D3           * NOP is 4E71
00001A38  6700 F7B2                878      BEQ         PRINT_OUT_NOP
00001A3C  B63C 0075                879      CMP.B       #$75,D3           *RTS is 4E75
00001A40  6700 F7BE                880      BEQ         PRINT_OUT_RTS
00001A44  3638 0200                881      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001A48  4EB8 19E6                882      JSR         CHECK_TYPE_DATA       *  Get the destination mode and desitnation register. Could be JSR
00001A4C  3638 0200                883      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001A50  4EB8 199C                884      JSR         GET_THE_THIRD_NIBBLE     * For Jsr  the 2 bit of the 3rd nibble is 10
00001A54  E44B                     885      LSR         #2, D3
00001A56  B67C 0002                886      CMP         #%10, D3              *
00001A5A  6700 F7D0                887      BEQ         PRINT_OUT_JSR         * Print out the command JSR and the data
00001A5E  6000 F734                888      BRA         INVALID               * Need to implement
00001A62  4E75                     889      RTS
00001A64                           890  
00001A64                           891  SECOND_NIBBLE_IS_0 * Possible to be ORI. In the case first byte is 0 as well
00001A64  4EB8 19BC                892      JSR         GET_NEXT_TWO_NIBBLE
00001A68  0C38 007C 0750           893      CMP.B       #$7C, TEMP_CURRENT_2_NIBBLES            * Only ORI to SR have the last 2 bytes in op code as 7C
00001A6E  6000 F7A6                894      BRA         PRINT_OUT_ORI_TO_SR
00001A72                           895  
00001A72                           896  
00001A72                           897  SECOND_NIBBLE_IS_E  * Possible to be NOP and RTS. In the case the first byte is 4
00001A72  4EB8 19BC                898      JSR         GET_NEXT_TWO_NIBBLE   * Get the remaning 2 bytes
00001A76  0C78 0071 0750           899      CMP         #$71, TEMP_CURRENT_2_NIBBLES
00001A7C  6700 F76E                900      BEQ         PRINT_OUT_NOP
00001A80  B67C 0075                901      CMP         #$75,D3
00001A84  6700 F77A                902      BEQ         PRINT_OUT_RTS
00001A88                           903  
00001A88                           904  
00001A88                           905  
00001A88                           906  
00001A88                           907  **************************************************
00001A88                           908  * Specific branching of the jump table is stored here
00001A88                           909  *************************************************
00001A88                           910  FIRST_NIBBLE_JUMP_TABLE                  * Based on the first byte of the op code then jump on what is possible
00001A88  4EF9 00001AE8            911      JMP         FIRST_NIBBLE_IS_0               * ORI, CMPI. BCLR
00001A8E  4EF9 00001AFA            912      JMP         FIRST_NIBBLE_IS_1               * MOVE.B, MOVEA.B
00001A94  4EF9 00001B02            913      JMP         FIRST_NIBBLE_IS_2               * MOVEA.L, MOVE.L
00001A9A  4EF9 00001B0A            914      JMP         FIRST_NIBBLE_IS_3               * MOVE.W    MOVEA.W
00001AA0  4EF9 00001B12            915      JMP         FIRST_NIBBLE_IS_4               * NOP, LEA, NEG, JSR, RTS
00001AA6  4EF9 00001B42            916      JMP         FIRST_NIBBLE_IS_5               * SUBQ
00001AAC  4EF9 00001B78            917      JMP         FIRST_NIBBLE_IS_6               * BCS, BGE, BLT, BVC, BRA
00001AB2  4EF9 00001B9A            918      JMP         FIRST_NIBBLE_IS_7               * NOT SUPPORTED
00001AB8  4EF9 00001BF8            919      JMP         FIRST_NIBBLE_IS_8               * DIVS, OR
00001ABE  4EF9 00001C1E            920      JMP         FIRST_NIBBLE_IS_9               * SUB
00001AC4  4EF9 00001C3A            921      JMP         FIRST_NIBBLE_IS_A               * NOT SUPPORTED
00001ACA  4EF9 00001C40            922      JMP         FIRST_NIBBLE_IS_B               * EOR, CMP
00001AD0  4EF9 00001C74            923      JMP         FIRST_NIBBLE_IS_C               * MULS
00001AD6  4EF9 00001CAA            924      JMP         FIRST_NIBBLE_IS_D               * ADD, ADDA
00001ADC  4EF9 00001CC8            925      JMP         FIRST_NIBBLE_IS_E               * LSR, LSL, ASR, ASL, ROL, ROR
00001AE2  4EF9 00001CFE            926      JMP         FIRST_NIBBLE_IS_F               * NOT SUPPORTED
00001AE8                           927  
00001AE8                           928  FIRST_NIBBLE_IS_0             * UNFINISHED IMPLEMENTATION
00001AE8  3638 0200                929      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001AEC  4EB8 1994                930      JSR         GET_THE_SECOND_NIBBLE
00001AF0  B63C 000C                931      CMP.B       #$C, D3
00001AF4  6700 F760                932      BEQ         PRINT_OUT_CMPI
00001AF8  4E75                     933      RTS
00001AFA                           934  
00001AFA                           935  
00001AFA                           936  FIRST_NIBBLE_IS_1 *MOVE.B, MOVEA.B * Can only be MOVE for these nibble because of the size of MOVE
00001AFA  4EB8 1848                937      JSR         MOVE_OPCODE_HELPER
00001AFE  FFFF FFFF                938      SIMHALT
00001B02                           939  
00001B02                           940  FIRST_NIBBLE_IS_2 *MOVE.L, MOVEA.L
00001B02  4EB8 1848                941      JSR         MOVE_OPCODE_HELPER
00001B06  FFFF FFFF                942      SIMHALT
00001B0A                           943  
00001B0A                           944  FIRST_NIBBLE_IS_3 * MOVE.W, MOVEA.W
00001B0A  4EB8 1848                945      JSR         MOVE_OPCODE_HELPER
00001B0E  FFFF FFFF                946      SIMHALT
00001B12                           947  
00001B12                           948  
00001B12                           949  FIRST_NIBBLE_IS_4                 * Possible for NOP,LEA,RTS,JSR,NEG. Now will check the second byte
00001B12  3638 0200                950      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3         * Get the original op code back
00001B16  4EB8 1994                951      JSR         GET_THE_SECOND_NIBBLE
00001B1A  B63C 000E                952      CMP.B       #$E,D3
00001B1E  6700 FF0C                953      BEQ         FIRST_NIBBLE_4_SECOND_NIBBLE_E             * NOP,RTS,JSR
00001B22  B63C 0004                954      CMP.B       #4,D3              *  If the second nibble is 4, then it must be neg
00001B26  6700 F69A                955      BEQ         PRINT_OUT_NEG
00001B2A                           956                                  * For LEA, the aestination mode must be 111 (address register)
00001B2A  3638 0200                957      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001B2E  4EB8 19E6                958      JSR         CHECK_TYPE_DATA
00001B32  0C78 0007 0300           959      CMP         #%111,DESTINATION_MODE
00001B38  6700 F7C6                960      BEQ         PRINT_OUT_LEA           * Only LEA have the 3 bits of destination is 111
00001B3C  6000 F656                961      BRA         INVALID
00001B40  4E75                     962      RTS
00001B42                           963  
00001B42                           964  FIRST_NIBBLE_IS_5                     * This is SUBQ and ADDQ
00001B42  3638 0200                965      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001B46  4EB8 19E6                966      JSR         CHECK_TYPE_DATA
00001B4A  4EB8 19C4                967      JSR         GET_NORMAL_SIZE           * SUBQ and ADDQ only accpet normal size. Meaning no 11
00001B4E  B67C 0003                968      CMP         #%11,D3
00001B52  6700 F640                969      BEQ         INVALID
00001B56  3638 0200                970      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001B5A  4EB8 1994                971      JSR         GET_THE_SECOND_NIBBLE
00001B5E  E14B                     972      LSL         #8,D3           * Get rid of the first 2 byets
00001B60  EF4B                     973      LSL         #7,D3           * Shift back to original position
00001B62  E04B                     974      LSR         #8,D3
00001B64  EE4B                     975      LSR         #7,D3
00001B66  B67C 0000                976      CMP         #0,D3           * SUBQ have 1 as the last bit in the second nibble
00001B6A  6700 F7DC                977      BEQ         PRINT_OUT_ADDQ     * ADDQ has 0 as the last bit in the second nibble
00001B6E  6000 F7E2                978      BRA         PRINT_OUT_SUBQ
00001B72  4E75                     979      RTS
00001B74  FFFF FFFF                980      SIMHALT
00001B78                           981  
00001B78                           982  FIRST_NIBBLE_IS_6
00001B78  3638 0200                983      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001B7C  4EB8 1994                984      JSR         GET_THE_SECOND_NIBBLE
00001B80  B67C 0000                985      CMP         #%0000,D3      * Only the condition code of BRA is 0000
00001B84  6700 FAD4                986      BEQ         PRINT_OUT_BRA
00001B88  B67C 0001                987      CMP         #%0001,D3
00001B8C  6700 FAFE                988      BEQ         PRINT_OUT_BSR
00001B90  6000 FB2C                989      BRA         PRINT_OUT_Bcc
00001B94                           990  
00001B94  4E75                     991      RTS
00001B96  FFFF FFFF                992      SIMHALT
00001B9A                           993  
00001B9A                           994  FIRST_NIBBLE_IS_7 * This is MOVEQ
00001B9A  43F9 000022CC            995      LEA         MOVEQ_VALUE,A1
00001BA0  4EB8 18BA                996      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001BA4  4EB9 00002010            997      JSR         PRINT_NORMAL_LONG_SUFFIX
00001BAA  3238 0200                998      MOVE.W      TEMP_CURRENT_4_NIBBLES,D1 * Save the current opcode
00001BAE  4EB8 1982                999      JSR         PRINT_IMMEDIATE_DATA_SYMBOL
00001BB2  4EB8 196A               1000      JSR         PRINT_HEX_SYMBOL
00001BB6  3638 0200               1001      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001BBA  E14B                    1002      LSL         #8,D3
00001BBC  E04B                    1003      LSR         #8,D3
00001BBE  31C3 0200               1004      MOVE.W      D3, TEMP_CURRENT_4_NIBBLES
00001BC2  4EB8 1128               1005      JSR         CONVERT_HEX_TO_ASCII                * Print the 8 bit data field
00001BC6  31C1 0200               1006      MOVE.W      D1, TEMP_CURRENT_4_NIBBLES
00001BCA  3638 0200               1007      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001BCE  4EB8 1916               1008      JSR         PRINT_COMMA
00001BD2  4EB8 1976               1009      JSR         PRINT_EMPTY_SPACE
00001BD6  3638 0200               1010      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001BDA  4EB8 19E6               1011      JSR         CHECK_TYPE_DATA
00001BDE  4EB8 192E               1012      JSR         PRINT_DATA_REGISTER
00001BE2  31F8 0250 0550          1013      MOVE.W      DESTINATION_VAR, THIRD_TEMP_VAR
00001BE8  4EB8 12E6               1014      JSR         PRINT_REGISTER_NUMBER
00001BEC  6100 F59E               1015      BSR         USER_INPUT_ENTER
00001BF0  6000 F44C               1016      BRA         PARSING_OP_CODE
00001BF4  FFFF FFFF               1017      SIMHALT
00001BF8                          1018  
00001BF8                          1019  FIRST_NIBBLE_IS_8 * DIVS, Can't recognize SBCD
00001BF8  3638 0200               1020      MOVE.W      TEMP_CURRENT_4_NIBBLES, D3
00001BFC  4EB8 19E6               1021      JSR         CHECK_TYPE_DATA
00001C00  0C78 0007 0300          1022      CMP         #%111, DESTINATION_MODE
00001C06  6700 F7CA               1023      BEQ         PRINT_OUT_DIVS
00001C0A  0C78 0003 0300          1024      CMP         #%011, DESTINATION_MODE
00001C10  6700 F582               1025      BEQ         INVALID * This is DIVU
00001C14  6000 F958               1026      BRA         PRINT_OUT_OR
00001C18  4E75                    1027      RTS
00001C1A  FFFF FFFF               1028      SIMHALT
00001C1E                          1029  
00001C1E                          1030  FIRST_NIBBLE_IS_9              * SUB and SUBA           * No way of knowing SUX
00001C1E  3638 0200               1031      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001C22  4EB8 19E6               1032      JSR         CHECK_TYPE_DATA
00001C26  4EB8 19C4               1033      JSR         GET_NORMAL_SIZE
00001C2A  B67C 0003               1034      CMP         #%11,D3
00001C2E  6700 F8DA               1035      BEQ         PRINT_OUT_SUBA      * SUB Does not accept the size of 11
00001C32  6000 F94E               1036      BRA         PRINT_OUT_SUB
00001C36  FFFF FFFF               1037      SIMHALT
00001C3A                          1038  
00001C3A                          1039  FIRST_NIBBLE_IS_A              * There are not any opcode with 1010
00001C3A  4E75                    1040      RTS
00001C3C  FFFF FFFF               1041      SIMHALT
00001C40                          1042  
00001C40                          1043  FIRST_NIBBLE_IS_B        * CMP
00001C40  3638 0200               1044      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001C44  4EB8 19E6               1045      JSR         CHECK_TYPE_DATA
00001C48  4EB8 19C4               1046      JSR         GET_NORMAL_SIZE
00001C4C  B67C 0003               1047      CMP         #%11, D3
00001C50  6700 F542               1048      BEQ         INVALID * CMP does not accept size 11
00001C54  3638 0200               1049      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001C58  4EB8 1994               1050      JSR         GET_THE_SECOND_NIBBLE
00001C5C  E14B                    1051      LSL         #8,D3      * Get the last bit of the second nibble
00001C5E  EF4B                    1052      LSL         #7,D3
00001C60  EE4B                    1053      LSR         #7,D3
00001C62  E04B                    1054      LSR         #8,D3
00001C64  B67C 0000               1055      CMP         #0,D3        * CMP only accept 0 as the last bit in the second nibble
00001C68  6600 F52A               1056      BNE         INVALID
00001C6C  6000 F850               1057      BRA         PRINT_OUT_CMP
00001C70  FFFF FFFF               1058      SIMHALT
00001C74                          1059  
00001C74                          1060  FIRST_NIBBLE_IS_C          * MULS
00001C74  3638 0200               1061      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001C78  4EB8 19E6               1062      JSR         CHECK_TYPE_DATA
00001C7C  4EB8 19C4               1063      JSR         GET_NORMAL_SIZE
00001C80  B67C 0003               1064      CMP         #%11,D3
00001C84  6600 F50E               1065      BNE         INVALID        * MULS only accept 11 as the size
00001C88  3638 0200               1066      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001C8C  4EB8 1994               1067      JSR         GET_THE_SECOND_NIBBLE
00001C90  E14B                    1068      LSL         #8,D3      * Get the last bit of the second
00001C92  EF4B                    1069      LSL         #7,D3
00001C94  EE4B                    1070      LSR         #7,D3
00001C96  E04B                    1071      LSR         #8,D3
00001C98  B67C 0001               1072      CMP         #1,D3     * If it is 1, then it is MULS. Otherwise MULU
00001C9C  6700 F778               1073      BEQ         PRINT_OUT_MULS
00001CA0  6000 F7C8               1074      BRA         PRINT_OUT_MULU
00001CA4  4E75                    1075      RTS
00001CA6  FFFF FFFF               1076      SIMHALT
00001CAA                          1077  
00001CAA                          1078  FIRST_NIBBLE_IS_D *ADD, ADDA                        * Have no way of knowing ADDX
00001CAA  3638 0200               1079      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001CAE  4EB8 19E6               1080      JSR         CHECK_TYPE_DATA
00001CB2  4EB8 19C4               1081      JSR         GET_NORMAL_SIZE
00001CB6  B67C 0003               1082      CMP         #%11,D3
00001CBA  6700 F858               1083      BEQ         PRINT_OUT_ADDA
00001CBE  6000 F8B8               1084      BRA         PRINT_OUT_ADD
00001CC2  4E75                    1085      RTS
00001CC4  FFFF FFFF               1086      SIMHALT
00001CC8                          1087  
00001CC8                          1088  FIRST_NIBBLE_IS_E              * There are 2 types for every LSL,LSR,ASL,ASR,ROR,ROL. They can be seperated as LSd <ea> and other. They can be differentiate by the size 11
00001CC8  3638 0200               1089      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001CCC  4EB8 19E6               1090      JSR         CHECK_TYPE_DATA
00001CD0  4EB8 19C4               1091      JSR         GET_NORMAL_SIZE
00001CD4  B67C 0003               1092      CMP         #%11,D3
00001CD8  6700 002A               1093      BEQ         SPECIAL_SHIFT_INSTRUCTION * Only the instructions with 11 in the size parts deal with <ea> (shift memory)
00001CDC  3638 0200               1094      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001CE0  4EB8 19E6               1095      JSR         CHECK_TYPE_DATA
00001CE4  4EB8 199C               1096      JSR         GET_THE_THIRD_NIBBLE         * For ASd and LSd, the lat bit is 0 of third nibble is 0
00001CE8  E14B                    1097      LSL         #8,D3      * Get the last bit of the second
00001CEA  EF4B                    1098      LSL         #7,D3
00001CEC  EE4B                    1099      LSR         #7,D3
00001CEE  E04B                    1100      LSR         #8,D3
00001CF0  B67C 0000               1101      CMP         #0,D3
00001CF4  6700 FA82               1102      BEQ         PRINT_OUT_ASD_OR_LSD
00001CF8  6000 FAB4               1103      BRA         PRINT_OUT_ROD           * Could also be ROXD. If it is then invalid
00001CFC  4E75                    1104      RTS
00001CFE                          1105  
00001CFE                          1106  
00001CFE                          1107  FIRST_NIBBLE_IS_F * UNSUPPORTED
00001CFE  4E75                    1108      RTS
00001D00  FFFF FFFF               1109      SIMHALT
00001D04                          1110  
00001D04                          1111  SPECIAL_SHIFT_INSTRUCTION *Asd, LSd,ROd with <ea>. Shift instructions
00001D04  3638 0200               1112      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00001D08  4EB8 19E6               1113      JSR         CHECK_TYPE_DATA
00001D0C  4EB8 1994               1114      JSR         GET_THE_SECOND_NIBBLE
00001D10  E24B                    1115      LSR         #1, D3
00001D12  B67C 0001               1116      CMP         #1,D3
00001D16  6700 F9F0               1117      BEQ         PRINT_OUT_LOGICAL_SHIFT_MEM * 001
00001D1A  B67C 0000               1118      CMP         #0,D3
00001D1E  6700 F9F6               1119      BEQ         PRINT_OUT_ARITH_SHIFT_MEM *000
00001D22  B67C 0003               1120      CMP         #%11,D3
00001D26  6700 FA44               1121      BEQ         PRINT_OUT_ROTATE_MEM * 011
00001D2A  6000 F468               1122      BRA         INVALID * Must be ROXd, UNSUPPORTED
00001D2E  4E75                    1123      RTS
00001D30                          1124  
00001D30                          1125  **************************
00001D30                          1126  * Jump table section
00001D30                          1127  *************************
00001D30                          1128  * Used to figure out what type of mode and address where used to print
00001D30                          1129  REGISTER_MODE_JUMP_TABLE
00001D30  4EF9 00001D60           1130      JMP         REGISTER_MODE_000             * Data register mode Dn
00001D36  4EF9 00001D6A           1131      JMP         REGISTER_MODE_001             * ADdress register mode   An
00001D3C  4EF9 00001D74           1132      JMP         REGISTER_MODE_010             * Indirect address register mode (An)
00001D42  4EF9 00001D82           1133      JMP         REGISTER_MODE_011             *  Address register with increment (An)+
00001D48  4EF9 00001D8C           1134      JMP         REGISTER_MODE_100             * Address register with decrement -(An)
00001D4E  4EF9 00001D96           1135      JMP         REGISTER_MODE_101             * Not supported
00001D54  4EF9 00001D9C           1136      JMP         REGISTER_MODE_110             * Not supported
00001D5A  4EF9 00001DA2           1137      JMP         REGISTER_MODE_111             * This could be immediate, absolute short or absolute long
00001D60                          1138  
00001D60                          1139  REGISTER_MODE_000   * Print out data register Dn
00001D60  4EB8 192E               1140      JSR         PRINT_DATA_REGISTER
00001D64  4EB8 12E6               1141      JSR         PRINT_REGISTER_NUMBER
00001D68  4E75                    1142      RTS
00001D6A                          1143  
00001D6A                          1144  REGISTER_MODE_001       * An
00001D6A  4EB8 1922               1145      JSR         PRINT_ADDRESS_REGISTER
00001D6E  4EB8 12E6               1146      JSR         PRINT_REGISTER_NUMBER
00001D72  4E75                    1147      RTS
00001D74                          1148  
00001D74                          1149  REGISTER_MODE_010         * (An)
00001D74  4EB8 193A               1150      JSR         PRINT_OPEN_BRACKET
00001D78  4EB8 1D6A               1151      JSR         REGISTER_MODE_001
00001D7C  4EB8 1946               1152      JSR         PRINT_CLOSE_BRACKET
00001D80  4E75                    1153      RTS
00001D82                          1154  
00001D82                          1155  REGISTER_MODE_011        *(An)+
00001D82  4EB8 1D74               1156      JSR         REGISTER_MODE_010
00001D86  4EB8 1952               1157      JSR         PRINT_PLUS_SIGN
00001D8A  4E75                    1158      RTS
00001D8C                          1159  
00001D8C                          1160  REGISTER_MODE_100    * -(An)
00001D8C  4EB8 195E               1161      JSR         PRINT_MINUS_SIGN
00001D90  4EB8 1D74               1162      JSR         REGISTER_MODE_010
00001D94  4E75                    1163      RTS
00001D96                          1164  
00001D96                          1165  REGISTER_MODE_101 * Not supported yet. Will deal later
00001D96  6000 F3FC               1166      BRA         INVALID
00001D9A  4E75                    1167      RTS
00001D9C                          1168  
00001D9C                          1169  REGISTER_MODE_110 * Not supported. Will deal later
00001D9C  6000 F3F6               1170      BRA         INVALID
00001DA0  4E75                    1171      RTS
00001DA2                          1172  
00001DA2                          1173  REGISTER_MODE_111  * Immediate data, absolute long or absolute short
00001DA2  49F9 00001E26           1174      LEA         REGISTER_111_JUMP_TABLE,A4    * Print out the appropriate value
00001DA8  3638 0550               1175      MOVE.W      THIRD_TEMP_VAR,D3
00001DAC  C6FC 0006               1176      MULU        #6,D3
00001DB0  4EB4 3000               1177      JSR         0(A4,D3)
00001DB4  49F9 00001DC8           1178      LEA         SHORT_OR_LONG_PRINT,A4 * Prepare the table to print out the data
00001DBA                          1179  **    CMP #4, THIRD_TEMP_VAR      * Check if it is immediate data or Not
00001DBA                          1180  *    BEQ     IMMEDIATE_DATA        * This is immediate data, need to have specific check
00001DBA  3638 0550               1181      MOVE.W      THIRD_TEMP_VAR,D3
00001DBE  C6FC 0006               1182      MULU        #6,D3        * Use THIRD_TEMP_VAR as a place holder for the data we want to print out for register mode 111.
00001DC2                          1183                            * In the code before this, we need to move the appropriate data into this address. Either the destination or the source
00001DC2                          1184                            *   REMEMBER TO IMPLEMENT This
00001DC2                          1185  
00001DC2  4EB4 3000               1186      JSR         0(A4,D3)     * Print out the appropriate long or short value
00001DC6  4E75                    1187      RTS
00001DC8                          1188  
00001DC8                          1189              * Third table that deal with printing out short .W or .L value
00001DC8                          1190  SHORT_OR_LONG_PRINT                     * Will jump to this when the register mode is 111 and not immediate data
00001DC8  4EF9 00001DE6           1191      JMP         ABSOLUTE_SHORT                  * Xn index for this is 000
00001DCE  4EF9 00001DF4           1192      JMP         ABSOLUTE_LONG                   * Xn index for this is 001
00001DD4  4EF9 00001E02           1193      JMP         COUNTER_DISPLACEMENT
00001DDA  4EF9 00001E0A           1194      JMP         COUNTER_INDEX
00001DE0  4EF9 00001E12           1195      JMP         IMMEDIATE_DATA
00001DE6                          1196  
00001DE6                          1197  
00001DE6                          1198  
00001DE6                          1199  ABSOLUTE_SHORT     *We need to get the next 4 bytes as the address to print out
00001DE6  4EB8 19AE               1200      JSR         GET_NEXT_FOUR_NIBBLE * Got next 4 nibbles to print out as address
00001DEA  4EB8 1128               1201      JSR         CONVERT_HEX_TO_ASCII
00001DEE  4E75                    1202      RTS
00001DF0  FFFF FFFF               1203      SIMHALT
00001DF4                          1204  
00001DF4                          1205  ABSOLUTE_LONG       * Print the next 8 bytes as the address
00001DF4  4EB8 1DE6               1206      JSR         ABSOLUTE_SHORT        * PRinted 4 bytes
00001DF8  4EB8 1DE6               1207      JSR         ABSOLUTE_SHORT         * Printed 4 more
00001DFC  4E75                    1208      RTS
00001DFE  FFFF FFFF               1209      SIMHALT
00001E02                          1210  
00001E02                          1211  COUNTER_DISPLACEMENT           * Not SUPPORTED
00001E02  6000 F390               1212      BRA         INVALID
00001E06  FFFF FFFF               1213      SIMHALT
00001E0A                          1214  
00001E0A                          1215  COUNTER_INDEX                  * Not SUPPORTED
00001E0A  6000 F388               1216      BRA         INVALID
00001E0E  FFFF FFFF               1217      SIMHALT
00001E12                          1218  
00001E12                          1219      * Immediate data is also like absolute short and long. Will take advantage of that
00001E12                          1220  IMMEDIATE_DATA
00001E12  4EB8 19C4               1221      JSR         GET_NORMAL_SIZE  * Now the first 2 bit of third nibble is on the right most
00001E16  E24B                    1222      LSR         #1, D3           * Byte aand word are mapped to absolute short => 00 and 01 after shift will go to 00
00001E18                          1223                                  * If the size is long, the it will go to absolute long 10 => 01
00001E18  49F8 1DC8               1224      LEA         SHORT_OR_LONG_PRINT,A4 * Prepare the table to print out the data
00001E1C  C6FC 0006               1225      MULU        #6,D3        * Use THIRD_TEMP_VAR as a place holder for the data we want to print out for register mode 111.
00001E20                          1226                                * In the code before this, we need to move the appropriate data into this address. Either the destination or the source
00001E20                          1227                                *   REMEMBER TO IMPLEMENT This
00001E20  4EB4 3000               1228      JSR         0(A4,D3)     * Print out the appropriate long or short value
00001E24  4E75                    1229      RTS
00001E26                          1230  
00001E26                          1231  REGISTER_111_JUMP_TABLE
00001E26  4EF9 00001E44           1232      JMP         PRINT_SHORT_SYMBOL
00001E2C  4EF9 00001E4A           1233      JMP         PRINT_LONG_SYMBOL
00001E32  4EF9 00001E50           1234      JMP         PLACE_HOLDER_3 * Won't be reached
00001E38  4EF9 00001E58           1235      JMP         PLACE_HOLDER_4
00001E3E  4EF9 00001E60           1236      JMP         PRINT_IMMEDIATE_DATA_AND_HEX
00001E44                          1237  
00001E44                          1238  PRINT_SHORT_SYMBOL
00001E44  4EB8 196A               1239      JSR         PRINT_HEX_SYMBOL
00001E48  4E75                    1240      RTS
00001E4A                          1241  
00001E4A                          1242  PRINT_LONG_SYMBOL
00001E4A  4EB8 196A               1243      JSR         PRINT_HEX_SYMBOL
00001E4E  4E75                    1244      RTS
00001E50                          1245  
00001E50                          1246  PLACE_HOLDER_3
00001E50  6000 F342               1247      BRA         INVALID
00001E54  FFFF FFFF               1248      SIMHALT
00001E58                          1249  
00001E58                          1250  PLACE_HOLDER_4
00001E58  6000 F33A               1251      BRA        INVALID
00001E5C  FFFF FFFF               1252      SIMHALT
00001E60                          1253  
00001E60                          1254  PRINT_IMMEDIATE_DATA_AND_HEX
00001E60  4EB8 1982               1255      JSR         PRINT_IMMEDIATE_DATA_SYMBOL
00001E64  4EB8 196A               1256      JSR         PRINT_HEX_SYMBOL
00001E68  4E75                    1257      RTS
00001E6A                          1258  
00001E6A                          1259  HEX_CHARACTER_JUMP_TABLE
00001E6A  4EF9 00001ECA           1260      JMP         PRINT_HEX_0
00001E70  4EF9 00001ED6           1261      JMP         PRINT_HEX_1
00001E76  4EF9 00001EE2           1262      JMP         PRINT_HEX_2
00001E7C  4EF9 00001EEE           1263      JMP         PRINT_HEX_3
00001E82  4EF9 00001EFA           1264      JMP         PRINT_HEX_4
00001E88  4EF9 00001F06           1265      JMP         PRINT_HEX_5
00001E8E  4EF9 00001F12           1266      JMP         PRINT_HEX_6
00001E94  4EF9 00001F1E           1267      JMP         PRINT_HEX_7
00001E9A  4EF9 00001F2A           1268      JMP         PRINT_HEX_8
00001EA0  4EF9 00001F36           1269      JMP         PRINT_HEX_9
00001EA6  4EF9 00001F42           1270      JMP         PRINT_HEX_A
00001EAC  4EF9 00001F4E           1271      JMP         PRINT_HEX_B
00001EB2  4EF9 00001F5A           1272      JMP         PRINT_HEX_C
00001EB8  4EF9 00001F66           1273      JMP         PRINT_HEX_D
00001EBE  4EF9 00001F72           1274      JMP         PRINT_HEX_E
00001EC4  4EF9 00001F7E           1275      JMP         PRINT_HEX_F
00001ECA                          1276  
00001ECA                          1277  PRINT_HEX_0
00001ECA  43F9 0000232C           1278      LEA         ZERO,A1
00001ED0  4EB8 18BA               1279      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001ED4  4E75                    1280      RTS
00001ED6                          1281  
00001ED6                          1282  PRINT_HEX_1
00001ED6  43F9 00002330           1283      LEA         ONE,A1
00001EDC  4EB8 18BA               1284      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001EE0  4E75                    1285      RTS
00001EE2                          1286  
00001EE2                          1287  PRINT_HEX_2
00001EE2  43F9 00002334           1288      LEA         TWO,A1
00001EE8  4EB8 18BA               1289      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001EEC  4E75                    1290      RTS
00001EEE                          1291  
00001EEE                          1292  PRINT_HEX_3
00001EEE  43F9 00002338           1293      LEA         THREE,A1
00001EF4  4EB8 18BA               1294      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001EF8  4E75                    1295      RTS
00001EFA                          1296  
00001EFA                          1297  PRINT_HEX_4
00001EFA  43F9 0000233C           1298      LEA         FOUR,A1
00001F00  4EB8 18BA               1299      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F04  4E75                    1300      RTS
00001F06                          1301  
00001F06                          1302  PRINT_HEX_5
00001F06  43F9 00002340           1303      LEA         FIVE,A1
00001F0C  4EB8 18BA               1304      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F10  4E75                    1305      RTS
00001F12                          1306  
00001F12                          1307  PRINT_HEX_6
00001F12  43F9 00002344           1308      LEA         SIX,A1
00001F18  4EB8 18BA               1309      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F1C  4E75                    1310      RTS
00001F1E                          1311  
00001F1E                          1312  PRINT_HEX_7
00001F1E  43F9 00002348           1313      LEA         SEVEN,A1
00001F24  4EB8 18BA               1314      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F28  4E75                    1315      RTS
00001F2A                          1316  
00001F2A                          1317  PRINT_HEX_8
00001F2A  43F9 0000234C           1318      LEA         EIGHT,A1
00001F30  4EB8 18BA               1319      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F34  4E75                    1320      RTS
00001F36                          1321  
00001F36                          1322  PRINT_HEX_9
00001F36  43F9 00002350           1323      LEA         NINE,A1
00001F3C  4EB8 18BA               1324      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F40  4E75                    1325      RTS
00001F42                          1326  
00001F42                          1327  PRINT_HEX_A
00001F42  43F9 00002354           1328      LEA         A,A1
00001F48  4EB8 18BA               1329      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F4C  4E75                    1330      RTS
00001F4E                          1331  
00001F4E                          1332  PRINT_HEX_B
00001F4E  43F9 00002358           1333      LEA         B,A1
00001F54  4EB8 18BA               1334      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F58  4E75                    1335      RTS
00001F5A                          1336  
00001F5A                          1337  PRINT_HEX_C
00001F5A  43F9 0000235C           1338      LEA         C,A1
00001F60  4EB8 18BA               1339      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F64  4E75                    1340      RTS
00001F66                          1341  
00001F66                          1342  PRINT_HEX_D
00001F66  43F9 00002360           1343      LEA         D,A1
00001F6C  4EB8 18BA               1344      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F70  4E75                    1345      RTS
00001F72                          1346  
00001F72                          1347  PRINT_HEX_E
00001F72  43F9 00002364           1348      LEA         E,A1
00001F78  4EB8 18BA               1349      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F7C  4E75                    1350      RTS
00001F7E                          1351  
00001F7E                          1352  PRINT_HEX_F
00001F7E  43F9 00002368           1353      LEA         F,A1
00001F84  4EB8 18BA               1354      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001F88  4E75                    1355      RTS
00001F8A                          1356  
00001F8A                          1357  MOVE_SIZE_PRINT_JUMP_TABLE
00001F8A  4EF9 00001FA2           1358      JMP         UNSUPPORTED_MOVE_SIZE
00001F90  4EF9 00001FA8           1359      JMP         MOVE_BYTE_SUFFIX
00001F96  4EF9 00001FB8           1360      JMP         MOVE_LONG_SUFFIX
00001F9C  4EF9 00001FC8           1361      JMP         MOVE_WORD_SUFFIX
00001FA2                          1362  
00001FA2                          1363  UNSUPPORTED_MOVE_SIZE
00001FA2  6000 F1F0               1364      BRA         INVALID
00001FA6  4E75                    1365      RTS
00001FA8                          1366  
00001FA8                          1367  MOVE_BYTE_SUFFIX
00001FA8  43F9 00002320           1368      LEA         BYTE_SUFFIX,A1
00001FAE  4EB8 18BA               1369      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001FB2  4EB8 1976               1370      JSR         PRINT_EMPTY_SPACE
00001FB6  4E75                    1371      RTS
00001FB8                          1372  
00001FB8                          1373  MOVE_LONG_SUFFIX
00001FB8  43F9 00002328           1374      LEA         LONG_SUFFIX,A1
00001FBE  4EB8 18BA               1375      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001FC2  4EB8 1976               1376      JSR         PRINT_EMPTY_SPACE
00001FC6  4E75                    1377      RTS
00001FC8                          1378  
00001FC8                          1379  MOVE_WORD_SUFFIX
00001FC8  43F9 00002324           1380      LEA         WORD_SUFFIX,A1
00001FCE  4EB8 18BA               1381      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001FD2  4EB8 1976               1382      JSR         PRINT_EMPTY_SPACE
00001FD6  4E75                    1383      RTS
00001FD8                          1384  
00001FD8                          1385  
00001FD8                          1386  NORMAL_SIZE_PRINT_JUMP_TABLE
00001FD8  4EF9 00001FF0           1387      JMP         PRINT_NORMAL_BYTE_SUFFIX
00001FDE  4EF9 00002000           1388      JMP         PRINT_NORMAL_WORD_SUFFIX
00001FE4  4EF9 00002010           1389      JMP         PRINT_NORMAL_LONG_SUFFIX
00001FEA  4EF9 00002020           1390      JMP         UNSUPPORTED_NORMAL_SUFFIX         * Could be move
00001FF0                          1391  
00001FF0                          1392  PRINT_NORMAL_BYTE_SUFFIX
00001FF0  43F9 00002320           1393      LEA         BYTE_SUFFIX,A1
00001FF6  4EB8 18BA               1394      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00001FFA  4EB8 1976               1395      JSR         PRINT_EMPTY_SPACE
00001FFE  4E75                    1396      RTS
00002000                          1397  
00002000                          1398  PRINT_NORMAL_WORD_SUFFIX
00002000  43F9 00002324           1399      LEA         WORD_SUFFIX,A1
00002006  4EB8 18BA               1400      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000200A  4EB8 1976               1401      JSR         PRINT_EMPTY_SPACE
0000200E  4E75                    1402      RTS
00002010                          1403  
00002010                          1404  PRINT_NORMAL_LONG_SUFFIX
00002010  43F9 00002328           1405      LEA         LONG_SUFFIX,A1
00002016  4EB8 18BA               1406      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000201A  4EB8 1976               1407      JSR         PRINT_EMPTY_SPACE
0000201E  4E75                    1408      RTS
00002020                          1409  
00002020                          1410  UNSUPPORTED_NORMAL_SUFFIX * Could be Move to CCR 11
00002020  6000 F172               1411      BRA         INVALID
00002024  4E75                    1412      RTS
00002026                          1413  
00002026                          1414  
00002026                          1415  *This jump table depends on the condition of Bcc
00002026                          1416  CONDITION_JUMP_TABLE
00002026  4EF9 00002086           1417      JMP         CONDITION_TRUE
0000202C  4EF9 0000208A           1418      JMP         CONDITION_FALSE
00002032  4EF9 0000208E           1419      JMP         CONDITION_HIGHER
00002038  4EF9 00002092           1420      JMP         CONDITION_LOWER_OR_SAME
0000203E  4EF9 00002096           1421      JMP         CONDITION_CARRY_CLEAR
00002044  4EF9 0000209A           1422      JMP         CONDITION_CARRY_SET                * Supported
0000204A  4EF9 000020AA           1423      JMP         CONDITION_NOT_EQUAL
00002050  4EF9 000020AE           1424      JMP         CONDITION_EQUAL
00002056  4EF9 000020B2           1425      JMP         CONDITION_OVERFLOW_CLEAR            * Supported
0000205C  4EF9 000020C2           1426      JMP         CONDITION_OVERFLOW_SET
00002062  4EF9 000020C6           1427      JMP         CONDITION_PLUS
00002068  4EF9 000020CA           1428      JMP         CONDITION_MINUS
0000206E  4EF9 000020CE           1429      JMP         CONDITION_GREATER_OR_EQUAL         * Supported
00002074  4EF9 000020DE           1430      JMP         CONDITION_LESS_THAN                * SUPPORTED
0000207A  4EF9 000020EE           1431      JMP         CONDITION_GREATER_THAN
00002080  4EF9 000020F2           1432      JMP         CONDITION_LESS_OR_EQUAL
00002086                          1433  
00002086                          1434  CONDITION_TRUE
00002086  6000 F10C               1435      BRA         INVALID
0000208A                          1436  
0000208A                          1437  CONDITION_FALSE
0000208A  6000 F108               1438      BRA         INVALID
0000208E                          1439  
0000208E                          1440  CONDITION_HIGHER
0000208E  6000 F104               1441      BRA         INVALID
00002092                          1442  
00002092                          1443  CONDITION_LOWER_OR_SAME
00002092  6000 F100               1444      BRA         INVALID
00002096                          1445  
00002096                          1446  CONDITION_CARRY_CLEAR
00002096  6000 F0FC               1447      BRA         INVALID
0000209A                          1448  
0000209A                          1449  
0000209A                          1450  
0000209A                          1451  CONDITION_CARRY_SET
0000209A  43F9 000022E6           1452      LEA         CARRY_SET_VALUE,A1
000020A0  4EB8 18BA               1453      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000020A4  4EB8 1976               1454      JSR         PRINT_EMPTY_SPACE
000020A8  4E75                    1455      RTS
000020AA                          1456  
000020AA                          1457  CONDITION_NOT_EQUAL
000020AA  6000 F0E8               1458      BRA         INVALID
000020AE                          1459  CONDITION_EQUAL
000020AE  6000 F0E4               1460      BRA         INVALID
000020B2                          1461  
000020B2                          1462  CONDITION_OVERFLOW_CLEAR
000020B2  43F9 000022DA           1463      LEA         OVERFLOW_CLEAR_VALUE,A1
000020B8  4EB8 18BA               1464      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000020BC  4EB8 1976               1465      JSR         PRINT_EMPTY_SPACE
000020C0  4E75                    1466      RTS
000020C2                          1467  
000020C2                          1468  CONDITION_OVERFLOW_SET
000020C2  6000 F0D0               1469      BRA         INVALID
000020C6                          1470  
000020C6                          1471  CONDITION_PLUS
000020C6  6000 F0CC               1472      BRA         INVALID
000020CA                          1473  
000020CA                          1474  CONDITION_MINUS
000020CA  6000 F0C8               1475      BRA         INVALID
000020CE                          1476  
000020CE                          1477  CONDITION_GREATER_OR_EQUAL
000020CE  43F9 000022DE           1478      LEA         GREATER_OR_EQUAL_VALUE,A1
000020D4  4EB8 18BA               1479      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000020D8  4EB8 1976               1480      JSR         PRINT_EMPTY_SPACE
000020DC  4E75                    1481      RTS
000020DE                          1482  
000020DE                          1483  
000020DE                          1484  
000020DE                          1485  
000020DE                          1486  CONDITION_LESS_THAN
000020DE  43F9 000022E2           1487      LEA         LESS_THAN_VALUE,A1
000020E4  4EB8 18BA               1488      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
000020E8  4EB8 1976               1489      JSR         PRINT_EMPTY_SPACE
000020EC  4E75                    1490      RTS
000020EE                          1491  
000020EE                          1492  CONDITION_GREATER_THAN
000020EE  6000 F0A4               1493      BRA         INVALID
000020F2                          1494  
000020F2                          1495  CONDITION_LESS_OR_EQUAL
000020F2  6000 F0A0               1496      BRA         INVALID
000020F6                          1497  
000020F6                          1498  RIGHT_OR_LEFT_JUMP_TABLE
000020F6  4EF9 00002102           1499      JMP         RIGHT_DIRECTION_PRINT
000020FC  4EF9 0000210E           1500      JMP         LEFT_DIRECTION_PRINT
00002102                          1501  
00002102                          1502  
00002102                          1503  RIGHT_DIRECTION_PRINT
00002102  43F9 000022B6           1504      LEA         RIGHT_DIRECTION,A1
00002108  4EB8 18BA               1505      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000210C  4E75                    1506      RTS
0000210E                          1507  
0000210E                          1508  LEFT_DIRECTION_PRINT
0000210E  43F9 000022B2           1509      LEA         LEFT_DIRECTION,A1
00002114  4EB8 18BA               1510      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00002118  4E75                    1511      RTS
0000211A                          1512  
0000211A                          1513  IMMEDIATE_OR_REGISTER_JUMP_TABLE       * Use for ASd, LSd, ROd operations
0000211A  4EF9 00002126           1514      JMP         IMMEDIATE_ROTATION
00002120  4EF9 00002154           1515      JMP         REGISTER_ROTATION
00002126                          1516  
00002126                          1517  IMMEDIATE_ROTATION
00002126  43F9 0000231C           1518      LEA         IMMEDIATE_DATA_SYMBOL,A1
0000212C  4EB8 18BA               1519      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
00002130  3638 0200               1520      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00002134  4EB8 1994               1521      JSR         GET_THE_SECOND_NIBBLE
00002138  E24B                    1522      LSR         #1,D3
0000213A  B67C 0000               1523      CMP         #0,D3
0000213E  6700 003A               1524      BEQ         IMMEDIATE_ROTATION_HELPER  * For cases where the immediate is 0, make it 8
00002142  31C3 0550               1525      MOVE.W      D3, THIRD_TEMP_VAR * Save the immediate data 1-8 we want to print
00002146  4EB8 12E6               1526      JSR         PRINT_REGISTER_NUMBER
0000214A  4EB8 1916               1527      JSR         PRINT_COMMA
0000214E  4EB8 1976               1528      JSR         PRINT_EMPTY_SPACE
00002152  4E75                    1529      RTS
00002154                          1530  
00002154                          1531  REGISTER_ROTATION
00002154  43F9 00002304           1532      LEA         DATA_REGISTER,A1
0000215A  4EB8 18BA               1533      JSR         PRINT_TO_SCREEN_ENTIRE_STRING
0000215E  3638 0200               1534      MOVE.W      TEMP_CURRENT_4_NIBBLES,D3
00002162  4EB8 1994               1535      JSR         GET_THE_SECOND_NIBBLE
00002166  E24B                    1536      LSR         #1,D3
00002168  31C3 0550               1537      MOVE.W      D3,THIRD_TEMP_VAR
0000216C  4EB8 12E6               1538      JSR         PRINT_REGISTER_NUMBER
00002170  4EB8 1916               1539      JSR         PRINT_COMMA
00002174  4EB8 1976               1540      JSR         PRINT_EMPTY_SPACE
00002178  4E75                    1541      RTS
0000217A                          1542  
0000217A                          1543  IMMEDIATE_ROTATION_HELPER
0000217A  31FC 0008 0550          1544      MOVE.W      #8,THIRD_TEMP_VAR
00002180  4EB8 12E6               1545      JSR         PRINT_REGISTER_NUMBER
00002184  4EB8 1916               1546      JSR         PRINT_COMMA
00002188  4EB8 1976               1547      JSR         PRINT_EMPTY_SPACE
0000218C  4E75                    1548      RTS
0000218E                          1549  
0000218E                          1550  
0000218E                          1551  
0000218E                          1552  ******************************************************************
0000218E                          1553  * Constant String that is used to print out the data is stored here
0000218E                          1554  ******************************************************************
0000218E= 506C 6561 7365 2...     1555  INTRO_STARTING          DC.W        'Please enter starting address',0
000021AE= 506C 6561 7365 2...     1556  INTRO_ENDING            DC.W        'Please enter ending address',0
000021CC= 494E 5641 4C49 4...     1557  INVALID_INPUT           DC.W        'INVALID ADDRESS ENTERED',0
000021E6= 4669 6E69 7368 2...     1558  FINISH                  DC.W        'Finish Dissassembling. Starting address has reached or passed ending address',0
00002234= 4E4F 5000 0000          1559  NOP_VALUE               DC.W        'NOP',0
0000223A= 5254 5300 0000          1560  RTS_VALUE               DC.W        'RTS',0
00002240= 4F52 4900 0000          1561  ORI_VALUE               DC.W        'ORI',0
00002246= 4A53 5200 0000          1562  JSR_VALUE               DC.W        'JSR',0
0000224C= 4C45 4100 0000          1563  LEA_VALUE               DC.W        'LEA',0
00002252= 4E45 4700 0000          1564  NEG_VALUE               DC.W        'NEG',0
00002258= 434D 5049 0000          1565  CMPI_VALUE              DC.W        'CMPI',0
0000225E= 434D 5000 0000          1566  CMP_VALUE               DC.W        'CMP',0
00002264= 5355 4200 0000          1567  SUB_VALUE               DC.W        'SUB',0
0000226A= 5355 4241 0000          1568  SUBA_VALUE              DC.W        'SUBA',0
00002270= 5355 4251 0000          1569  SUBQ_VALUE              DC.W        'SUBQ',0
00002276= 4449 5653 0000          1570  DIVS_VALUE              DC.W        'DIVS',0
0000227C= 4252 4100 0000          1571  BRA_VALUE               DC.W        'BRA',0
00002282= 4253 5200 0000          1572  BSR_VALUE               DC.W        'BSR',0
00002288= 4D55 4C53 0000          1573  MULS_VALUE              DC.W        'MULS',0
0000228E= 4D55 4C55 0000          1574  MULU_VALUE              DC.W        'MULU',0
00002294= 4144 4400 0000          1575  ADD_VALUE               DC.W        'ADD',0
0000229A= 4144 4441 0000          1576  ADDA_VALUE              DC.W        'ADDA',0
000022A0= 4144 4451 0000          1577  ADDQ_VALUE              DC.W        'ADDQ',0
000022A6= 4153 0000               1578  AS_VALUE                DC.W        'AS',0
000022AA= 4C53 0000               1579  LS_VALUE                DC.W        'LS',0
000022AE= 524F 0000               1580  RO_VALUE                DC.W        'RO',0
000022B2= 4C00 0000               1581  LEFT_DIRECTION          DC.W        'L',0
000022B6= 5200 0000               1582  RIGHT_DIRECTION         DC.W        'R',0
000022BA= 4F52 0000               1583  OR_VALUE                DC.W        'OR',0
000022BE= 4D4F 5645 4100 0000     1584  MOVEA_VALUE             DC.W        'MOVEA',0
000022C6= 4D4F 5645 0000          1585  MOVE_VALUE              DC.W        'MOVE',0
000022CC= 4D4F 5645 5100 0000     1586  MOVEQ_VALUE             DC.W        'MOVEQ',0
000022D4= 4441 5441 0000          1587  DATA_VALUE              DC.W        'DATA',0
000022DA= 5643 0000               1588  OVERFLOW_CLEAR_VALUE    DC.W        'VC',0
000022DE= 4745 0000               1589  GREATER_OR_EQUAL_VALUE  DC.W        'GE',0
000022E2= 4C54 0000               1590  LESS_THAN_VALUE         DC.W        'LT',0
000022E6= 4353 0000               1591  CARRY_SET_VALUE         DC.W        'CS',0
000022EA= 5352 0000               1592  SR_VALUE                DC.W        'SR',0
000022EE= 4343 5200 0000          1593  CCR_VALUE               DC.W        'CCR',0
000022F4= 2800 0000               1594  OPENING_BRACKET         DC.W        '(',0
000022F8= 2900 0000               1595  CLOSING_BRACKET         DC.W        ')',0
000022FC= 2B00 0000               1596  PLUS_SIGN               DC.W        '+',0
00002300= 2D00 0000               1597  MINUS_SIGN              DC.W        '-',0
00002304= 4400 0000               1598  DATA_REGISTER           DC.W        'D',0
00002308= 4100 0000               1599  ADDRESS_REGISTER        DC.W        'A',0
0000230C= 2C00 0000               1600  COMMA                   DC.W        ',',0
00002310= 2000 0000               1601  SPACE                   DC.W        ' ',0
00002314= 2500 0000               1602  BINARY_SYMBOL           DC.W        '%',0
00002318= 2400 0000               1603  HEX_SYMBOL              DC.W        '$',0
0000231C= 2300 0000               1604  IMMEDIATE_DATA_SYMBOL   DC.W        '#',0
00002320= 2E42 0000               1605  BYTE_SUFFIX             DC.W        '.B',0
00002324= 2E57 0000               1606  WORD_SUFFIX             DC.W        '.W',0
00002328= 2E4C 0000               1607  LONG_SUFFIX             DC.W        '.L',0
0000232C= 3000 0000               1608  ZERO                    DC.W        '0',0
00002330= 3100 0000               1609  ONE                     DC.W        '1',0
00002334= 3200 0000               1610  TWO                     DC.W        '2',0
00002338= 3300 0000               1611  THREE                   DC.W        '3',0
0000233C= 3400 0000               1612  FOUR                    DC.W        '4',0
00002340= 3500 0000               1613  FIVE                    DC.W        '5',0
00002344= 3600 0000               1614  SIX                     DC.W        '6',0
00002348= 3700 0000               1615  SEVEN                   DC.W        '7',0
0000234C= 3800 0000               1616  EIGHT                   DC.W        '8',0
00002350= 3900 0000               1617  NINE                    DC.W        '9',0
00002354= 4100 0000               1618  A                       DC.W        'A',0
00002358= 4200 0000               1619  B                       DC.W        'B',0
0000235C= 4300 0000               1620  C                       DC.W        'C',0
00002360= 4400 0000               1621  D                       DC.W        'D',0
00002364= 4500 0000               1622  E                       DC.W        'E',0
00002368= 4600 0000               1623  F                       DC.W        'F',0
0000236C                          1624  
0000236C                          1625  
0000236C                          1626      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   2354
ABSOLUTE_LONG       1DF4
ABSOLUTE_SHORT      1DE6
ADDA_VALUE          229A
ADDQ_AND_SUBQ_HELPER  135C
ADDQ_VALUE          22A0
ADDRESS_REGISTER    2308
ADD_AND_SUB_HELPER  158C
ADD_VALUE           2294
ASD_LSD_ROD_HELPER_FUNCTION  17D0
ASD_LSD_ROD_SHIFT_HELPER  1724
AS_VALUE            22A6
B                   2358
BINARY_SYMBOL       2314
BRA_VALUE           227C
BSR_VALUE           2282
BYTE_SUFFIX         2320
C                   235C
CARRY_SET_VALUE     22E6
CCR_VALUE           22EE
CHECK_TYPE_DATA     19E6
CLOSING_BRACKET     22F8
CMPI_VALUE          2258
CMP_VALUE           225E
COMMA               230C
CONDITION_CARRY_CLEAR  2096
CONDITION_CARRY_SET  209A
CONDITION_EQUAL     20AE
CONDITION_FALSE     208A
CONDITION_GREATER_OR_EQUAL  20CE
CONDITION_GREATER_THAN  20EE
CONDITION_HIGHER    208E
CONDITION_JUMP_TABLE  2026
CONDITION_LESS_OR_EQUAL  20F2
CONDITION_LESS_THAN  20DE
CONDITION_LOWER_OR_SAME  2092
CONDITION_MINUS     20CA
CONDITION_NOT_EQUAL  20AA
CONDITION_OVERFLOW_CLEAR  20B2
CONDITION_OVERFLOW_SET  20C2
CONDITION_PLUS      20C6
CONDITION_TRUE      2086
CONVERT_ASCII_TO_HEX  1060
CONVERT_CHARACTER_ASCII_TO_HEX  1086
CONVERT_HEX_TO_ASCII  1128
COUNTER_DISPLACEMENT  1E02
COUNTER_INDEX       1E0A
D                   2360
DATA_REGISTER       2304
DATA_VALUE          22D4
DESTINATION_MODE    300
DESTINATION_VAR     250
DIVS_VALUE          2276
E                   2364
EIGHT               234C
ENDING_ADDRESS      150
ERROR_INVALID_INPUT  1120
F                   2368
FIFTH_TEMP_VAR      650
FINISH              21E6
FINISH_CONVERT_ENDING_ADDRESS  10C4
FINISH_CONVERT_STARTING_ADDRESS  10AA
FINISH_DISASSEMBLING  19D8
FIRST_NIBBLE_4_SECOND_NIBBLE_E  1A2C
FIRST_NIBBLE_IS_0   1AE8
FIRST_NIBBLE_IS_1   1AFA
FIRST_NIBBLE_IS_2   1B02
FIRST_NIBBLE_IS_3   1B0A
FIRST_NIBBLE_IS_4   1B12
FIRST_NIBBLE_IS_5   1B42
FIRST_NIBBLE_IS_6   1B78
FIRST_NIBBLE_IS_7   1B9A
FIRST_NIBBLE_IS_8   1BF8
FIRST_NIBBLE_IS_9   1C1E
FIRST_NIBBLE_IS_A   1C3A
FIRST_NIBBLE_IS_B   1C40
FIRST_NIBBLE_IS_C   1C74
FIRST_NIBBLE_IS_D   1CAA
FIRST_NIBBLE_IS_E   1CC8
FIRST_NIBBLE_IS_F   1CFE
FIRST_NIBBLE_JUMP_TABLE  1A88
FIVE                2340
FOUR                233C
FOURTH_TEMP_VAR     600
GET_END_ADDRESS     1024
GET_NEXT_FOUR_NIBBLE  19AE
GET_NEXT_TWO_NIBBLE  19BC
GET_NORMAL_SIZE     19C4
GET_START_ADDRESS   1000
GET_THE_FIRST_NIBBLE  198E
GET_THE_FOURTH_NIBBLE  19A4
GET_THE_SECOND_NIBBLE  1994
GET_THE_THIRD_NIBBLE  199C
GREATER_OR_EQUAL_VALUE  22DE
HEX_CHARACTER_JUMP_TABLE  1E6A
HEX_SYMBOL          2318
IMMEDIATE_DATA      1E12
IMMEDIATE_DATA_SYMBOL  231C
IMMEDIATE_OR_REGISTER_JUMP_TABLE  211A
IMMEDIATE_ROTATION  2126
IMMEDIATE_ROTATION_HELPER  217A
INTRO_ENDING        21AE
INTRO_STARTING      218E
INVALID             1194
INVALID_ENDING_ADDRESS  1108
INVALID_INPUT       21CC
INVALID_STARTING_ADDRESS  10F0
JSR_VALUE           2246
LEA_VALUE           224C
LEFT_DIRECTION      22B2
LEFT_DIRECTION_PRINT  210E
LESS_THAN_VALUE     22E2
LONG_SUFFIX         2328
LS_VALUE            22AA
MINUS_SIGN          2300
MOVEA_VALUE         22BE
MOVEQ_VALUE         22CC
MOVE_BYTE_SUFFIX    1FA8
MOVE_LONG_SUFFIX    1FB8
MOVE_OPCODE_HELPER  1848
MOVE_SECOND_OPCODE_HELPER  187A
MOVE_SIZE_PRINT_JUMP_TABLE  1F8A
MOVE_VALUE          22C6
MOVE_WORD_SUFFIX    1FC8
MULS_VALUE          2288
MULU_VALUE          228E
NEG_VALUE           2252
NINE                2350
NOP_VALUE           2234
NORMAL_SIZE_PRINT_JUMP_TABLE  1FD8
ONE                 2330
OPENING_BRACKET     22F4
ORI_VALUE           2240
OR_VALUE            22BA
OVERFLOW_CLEAR_VALUE  22DA
PARSING_OP_CODE     103E
PLACE_HOLDER_3      1E50
PLACE_HOLDER_4      1E58
PLUS_SIGN           22FC
PREPARE_START_AND_END_ADDRESS  117A
PRINT_ADDRESS_LOCATION  18F6
PRINT_ADDRESS_REGISTER  1922
PRINT_CLOSE_BRACKET  1946
PRINT_COMMA         1916
PRINT_DATA_MODE_DESTINATION  18DC
PRINT_DATA_MODE_SOURCE  18C2
PRINT_DATA_REGISTER  192E
PRINT_EMPTY_SPACE   1976
PRINT_HEX_0         1ECA
PRINT_HEX_1         1ED6
PRINT_HEX_2         1EE2
PRINT_HEX_3         1EEE
PRINT_HEX_4         1EFA
PRINT_HEX_5         1F06
PRINT_HEX_6         1F12
PRINT_HEX_7         1F1E
PRINT_HEX_8         1F2A
PRINT_HEX_9         1F36
PRINT_HEX_A         1F42
PRINT_HEX_B         1F4E
PRINT_HEX_C         1F5A
PRINT_HEX_D         1F66
PRINT_HEX_E         1F72
PRINT_HEX_F         1F7E
PRINT_HEX_SYMBOL    196A
PRINT_IMMEDIATE_DATA_AND_HEX  1E60
PRINT_IMMEDIATE_DATA_SYMBOL  1982
PRINT_LONG_SYMBOL   1E4A
PRINT_MINUS_SIGN    195E
PRINT_NORMAL_BYTE_SUFFIX  1FF0
PRINT_NORMAL_LONG_SUFFIX  2010
PRINT_NORMAL_SUFFIX  12C4
PRINT_NORMAL_WORD_SUFFIX  2000
PRINT_NOT_NORMAL_SUFFIX  12B2
PRINT_OPEN_BRACKET  193A
PRINT_OUT_ADD       1578
PRINT_OUT_ADDA      1514
PRINT_OUT_ADDQ      1348
PRINT_OUT_ARITH_SHIFT_MEM  1716
PRINT_OUT_ASD       1792
PRINT_OUT_ASD_OR_LSD  1778
PRINT_OUT_BCC       16BE
PRINT_OUT_BRA       165A
PRINT_OUT_BSR       168C
PRINT_OUT_CMP       14BE
PRINT_OUT_CMPI      1256
PRINT_OUT_DIVS      13D2
PRINT_OUT_JSR       122C
PRINT_OUT_LEA       1300
PRINT_OUT_LOGICAL_SHIFT_MEM  1708
PRINT_OUT_LSD       17A0
PRINT_OUT_MOVE      186E
PRINT_OUT_MOVEA     1862
PRINT_OUT_MULS      1416
PRINT_OUT_MULU      146A
PRINT_OUT_NEG       11C2
PRINT_OUT_NOP       11EC
PRINT_OUT_OR        156E
PRINT_OUT_ORI_TO_SR  1216
PRINT_OUT_ROD       17AE
PRINT_OUT_ROTATE_MEM  176C
PRINT_OUT_RTS       1200
PRINT_OUT_SUB       1582
PRINT_OUT_SUBA      150A
PRINT_OUT_SUBQ      1352
PRINT_PLUS_SIGN     1952
PRINT_REGISTER_NUMBER  12E6
PRINT_SHORT_SYMBOL  1E44
PRINT_TO_SCREEN_ENTIRE_STRING  18BA
REGISTER_111_JUMP_TABLE  1E26
REGISTER_MODE_000   1D60
REGISTER_MODE_001   1D6A
REGISTER_MODE_010   1D74
REGISTER_MODE_011   1D82
REGISTER_MODE_100   1D8C
REGISTER_MODE_101   1D96
REGISTER_MODE_110   1D9C
REGISTER_MODE_111   1DA2
REGISTER_MODE_JUMP_TABLE  1D30
REGISTER_ROTATION   2154
RIGHT_DIRECTION     22B6
RIGHT_DIRECTION_PRINT  2102
RIGHT_OR_LEFT_JUMP_TABLE  20F6
RO_VALUE            22AE
RTS_VALUE           223A
SECOND_NIBBLE_IS_0  1A64
SECOND_NIBBLE_IS_E  1A72
SEVEN               2348
SHORT_OR_LONG_PRINT  1DC8
SIX                 2344
SOURCE_MODE         350
SOURCE_VAR          400
SPACE               2310
SPECIAL_SHIFT_INSTRUCTION  1D04
SR_VALUE            22EA
START               1000
STARTING_ADDRESS    100
SUBA_AND_ADDA_HELPER  151E
SUBA_VALUE          226A
SUBQ_HELPER_FUNCTION  13AC
SUBQ_VALUE          2270
SUB_HELPER_FUNCTION  15DC
SUB_HELPER_REGISTER_TO_MEM  1638
SUB_VALUE           2264
TEMP_CURRENT_2_NIBBLES  750
TEMP_CURRENT_4_NIBBLES  200
THIRD_TEMP_VAR      550
THREE               2338
TWO                 2334
UNSUPPORTED_MOVE_SIZE  1FA2
UNSUPPORTED_NORMAL_SUFFIX  2020
USER_INPUT_ENTER    118C
WORD_SUFFIX         2324
ZERO                232C
